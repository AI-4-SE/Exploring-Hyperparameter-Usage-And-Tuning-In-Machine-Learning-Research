{
    "config/__pycache__/config.py": {
        "torch": {
            "device_90": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "config/__pycache__/utils.py": {
        "torch": {
            "max_21": {
                "variable": {
                    "value": "(maxScores, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "word_seq_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "label_seq_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "char_seq_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, max_char_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "word_emb_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, emb_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_24": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - maxScoresExpanded), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "adjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "adjs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[head_to_adj(max_seq_len, inst, config) for inst in batch_data]",
                            "ListComp"
                        ],
                        [
                            "np.stack(adjs, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(adjs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "dep_label_adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(dep_label_adj, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "batch_dep_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "dep_label_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "word_emb_tensor[idx, :word_seq_len[idx], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_data[idx].elmo_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "torch.exp(vec - maxScoresExpanded)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_24": {
                "input": {
                    "value": "vec - maxScoresExpanded",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "config/config.py": {
        "torch": {
            "device_93": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "config/utils.py": {
        "torch": {
            "max_21": {
                "variable": {
                    "value": "(maxScores, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "word_seq_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "label_seq_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "poslabel_seq_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "char_seq_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, max_char_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "word_emb_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, emb_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_24": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - maxScoresExpanded), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "adjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "adjs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[head_to_adj(max_seq_len, inst, config) for inst in batch_data]",
                            "ListComp"
                        ],
                        [
                            "np.stack(adjs, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(adjs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "dep_label_adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(dep_label_adj, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "batch_dep_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "dep_label_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "word_emb_tensor[idx, :word_seq_len[idx], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_data[idx].elmo_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "torch.exp(vec - maxScoresExpanded)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_24": {
                "input": {
                    "value": "vec - maxScoresExpanded",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "get_context_emb/get_context_emb.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_26": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_87": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "float(config.l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_176": {
                "f": {
                    "value": "model_name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'model_files/gcn_{}_hidden_{}_dataset_{}_{}_context_{}.m'.format(config.num_gcn_layers, config.hidden_dim, config.dataset, config.affix, config.context_emb.name)",
                            "Call"
                        ],
                        [
                            "'model_files/gcn_{}_hidden_{}_dataset_{}_{}_context_{}.m'.format(config.num_gcn_layers, config.hidden_dim, config.dataset, config.affix, config.context_emb.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_209": {
                "f": {
                    "value": "model_name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'model_files/gcn_{}_hidden_{}_dataset_{}_{}_context_{}.m'.format(config.num_gcn_layers, config.hidden_dim, config.dataset, config.affix, config.context_emb.name)",
                            "Call"
                        ],
                        [
                            "'model_files/gcn_{}_hidden_{}_dataset_{}_{}_context_{}.m'.format(config.num_gcn_layers, config.hidden_dim, config.dataset, config.affix, config.context_emb.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_90": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__152": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_169": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'model_files/gcn_{}_hidden_{}_dataset_{}_{}_context_{}.m'.format(config.num_gcn_layers, config.hidden_dim, config.dataset, config.affix, config.context_emb.name)",
                            "Call"
                        ],
                        [
                            "'model_files/gcn_{}_hidden_{}_dataset_{}_{}_context_{}.m'.format(config.num_gcn_layers, config.hidden_dim, config.dataset, config.affix, config.context_emb.name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/charbilstm.py": {
        "torch": {
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.char_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.char_emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_26": {
                "variable": {
                    "value": "self.char_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.char_emb_size",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_53": {
                "variable": {
                    "value": "pack_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout(self.char_embeddings(sorted_seq_tensor))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/deplabel_gcn.py": {
        "torch": {
            "flip_24": {
                "variable": {
                    "value": "flipped_padded_sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_sequence_29": {
                "sequences": {
                    "value": "sequences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[flipped_padded_sequence[i, num_timesteps - length:] for (i, length) in enumerate(sequence_lengths)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.drop_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "variable": {
                    "value": "self.drop_gcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "feature_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lstm_out, lstm_out_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.all1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_sz * 1 + self.input_sz * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.all2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_sz * 1 + self.input_sz + self.g_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.all3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_sz * 1 + self.input_sz + self.g_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.all4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_sz * 1 + self.input_sz * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.all11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_sz * 1 + self.g_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.all44",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_sz * 1 + self.g_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_102": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "hx_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ht, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "hm_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ht, mt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "hxm_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ht, xt, mt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "hidden_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hidden_seq).permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_152": {
                "variable": {
                    "value": "hidden_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "graph_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "AxW",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.W[l](Ax)",
                            "Call"
                        ],
                        [
                            "AxW + self.W[l](graph_input)",
                            "BinOp"
                        ],
                        [
                            "AxW / denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "ht",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_sz, self.hidden_sz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "Ct_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_sz, self.hidden_sz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "Ct_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_sz, self.hidden_sz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "input": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.all2(hxm_concat)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_123": {
                "input": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.all4(hx_concat)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_124": {
                "input": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.all11(hm_concat)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_124": {
                "input": {
                    "value": "uu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.all44(hm_concat)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_126": {
                "input": {
                    "value": "Ct_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i * u + ii * uu + f * Ct_x",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((batch_sz, self.hidden_sz)).to(x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_150": {
                "input": {
                    "value": "torch.stack(hidden_seq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_151": {
                "input": {
                    "value": "torch.stack(cell_seq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "self.graph_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.graph_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_150": {
                "tensors": {
                    "value": "hidden_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hidden_seq).permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_151": {
                "tensors": {
                    "value": "cell_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "model/lstmcrf.py": {
        "torch": {
            "Dropout_44": {
                "variable": {
                    "value": "self.word_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "variable": {
                    "value": "self.drop_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_96": {
                "variable": {
                    "value": "self.pos_label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(config.poslabel2idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dep_emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_115": {
                "variable": {
                    "value": "init_transition",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_transition",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(self.label_size, self.label_size).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "word_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_emb, pos_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "word_seq_tensor.size(0)",
                            "Call"
                        ],
                        [
                            "features.size(0)",
                            "Call"
                        ],
                        [
                            "all_scores.size(0)",
                            "Call"
                        ],
                        [
                            "words.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "features.size(1)",
                            "Call"
                        ],
                        [
                            "all_scores.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.label_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_227": {
                "variable": {
                    "value": "last_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, seq_len, self.label_size).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "word_seq_lens.view(batch_size, 1, 1).expand(batch_size, 1, self.label_size) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_245": {
                "variable": {
                    "value": "currentTagScores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.calculate_all_scores(features)",
                            "Call"
                        ],
                        [
                            "self.calculate_all_scores(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "tags.view(batchSize, sentLength, 1, 1).expand(batchSize, sentLength, self.label_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_249": {
                "variable": {
                    "value": "endTagIds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "word_seq_lens.view(batchSize, 1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_250": {
                "variable": {
                    "value": "tagTransScoresEnd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.transition[:, self.end_idx].view(1, self.label_size).expand(batchSize, self.label_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "endTagIds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(tags, 1, word_seq_lens.view(batchSize, 1) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_264": {
                "variable": {
                    "value": "maskTemp",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "sent_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "le_265": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maskTemp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(1, sent_len + 1, dtype=torch.long).view(1, sent_len).expand(batch_size, sent_len).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "word_seq_lens.view(batch_size, 1).expand(batch_size, sent_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_276": {
                "variable": {
                    "value": "scoresRecord",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batchSize, sentLength, self.label_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "variable": {
                    "value": "idxRecord",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batchSize, sentLength, self.label_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_278": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_279": {
                "variable": {
                    "value": "startIds",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batchSize, self.label_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_293": {
                "variable": {
                    "value": "lastScores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scoresRecord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([batchSize, sentLength, self.label_size]).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "word_seq_lens.view(batchSize, 1, 1).expand(batchSize, 1, self.label_size) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_295": {
                "variable": {
                    "value": "decodeIdx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "lastScores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(scoresRecord, 1, word_seq_lens.view(batchSize, 1, 1).expand(batchSize, 1, self.label_size) - 1).view(batchSize, self.label_size)",
                            "Call"
                        ],
                        [
                            "lastScores + self.transition[:, self.end_idx].view(1, self.label_size).expand(batchSize, self.label_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_296": {
                "variable": {
                    "value": "bestScores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lastScores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(scoresRecord, 1, word_seq_lens.view(batchSize, 1, 1).expand(batchSize, 1, self.label_size) - 1).view(batchSize, self.label_size)",
                            "Call"
                        ],
                        [
                            "lastScores + self.transition[:, self.end_idx].view(1, self.label_size).expand(batchSize, self.label_size)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "decodeIdx[:, 0].view(batchSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.mlp_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.mlp_head_linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_77": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "config.num_lstm_layer",
                            "Attribute"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.add_lstms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_106": {
                "variable": {
                    "value": "self.dep_label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(config.deplabel2idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dep_emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "word_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_emb, char_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_143": {
                "variable": {
                    "value": "dep_head_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.word_embedding(word_seq_tensor)",
                            "Call"
                        ],
                        [
                            "torch.cat((word_emb, char_features), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((word_emb, dep_emb), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((word_emb, pos_emb), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((word_emb, batch_context_emb.to(self.device)), 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "dep_head_tensor.view(batch_size, sent_len, 1).expand(batch_size, sent_len, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "word_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_emb, dep_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "word_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_emb, batch_context_emb.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_172": {
                "variable": {
                    "value": "packed_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_seq_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "word_rep[permIdx]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_174": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "last_alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(alpha, 1, word_seq_lens.view(batch_size, 1, 1).expand(batch_size, 1, self.label_size) - 1).view(batch_size, self.label_size)",
                            "Call"
                        ],
                        [
                            "last_alpha + self.transition[:, self.end_idx].view(1, self.label_size).expand(batch_size, self.label_size)",
                            "BinOp"
                        ],
                        [
                            "log_sum_exp_pytorch(last_alpha.view(batch_size, self.label_size, 1)).view(batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_247": {
                "variable": {
                    "value": "tagTransScoresMiddle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentTagScores[:, 1:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "tags[:, :sentLength - 1].view(batchSize, sentLength - 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_290": {
                "variable": {
                    "value": "idxRecord[:, wordIdx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scoresIdx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scoresRecord[:, wordIdx - 1, :].view(batchSize, self.label_size, 1).expand(batchSize, self.label_size, self.label_size) + scores[:, wordIdx, :, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_291": {
                "variable": {
                    "value": "scoresRecord[:, wordIdx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scoresIdx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scoresRecord[:, wordIdx - 1, :].view(batchSize, self.label_size, 1).expand(batchSize, self.label_size, self.label_size) + scores[:, wordIdx, :, :]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idxRecord[:, wordIdx, :].view(batchSize, 1, self.label_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_299": {
                "variable": {
                    "value": "lastNIdxRecord",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idxRecord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([batchSize, sentLength, self.label_size], dtype=torch.int64).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.where(word_seq_lens - distance2Last - 1 > 0, word_seq_lens - distance2Last - 1, mask).view(batchSize, 1, 1).expand(batchSize, 1, self.label_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_300": {
                "variable": {
                    "value": "decodeIdx[:, distance2Last + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "lastNIdxRecord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(idxRecord, 1, torch.where(word_seq_lens - distance2Last - 1 > 0, word_seq_lens - distance2Last - 1, mask).view(batchSize, 1, 1).expand(batchSize, 1, self.label_size)).view(batchSize, self.label_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "decodeIdx[:, distance2Last].view(batchSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_184": {
                "variable": {
                    "value": "dep_head_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.drop_lstm(lstm_out)",
                            "Call"
                        ],
                        [
                            "sorted_seq_tensor",
                            "Name"
                        ],
                        [
                            "self.gcn(feature_out, sorted_seq_len, adj_matrixs[permIdx], dep_label_adj[permIdx])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature_out, dep_head_emb), 2)",
                            "Call"
                        ],
                        [
                            "self.drop_lstm(lstm_out)",
                            "Call"
                        ],
                        [
                            "feature_out + dep_head_emb",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.mlp_layers[l](feature_out) + self.mlp_head_linears[l](dep_head_emb))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "dep_head_tensor[permIdx].view(batch_size, sent_len, 1).expand(batch_size, sent_len, self.lstm_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_192": {
                "variable": {
                    "value": "packed_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.drop_lstm(lstm_out)",
                            "Call"
                        ],
                        [
                            "sorted_seq_tensor",
                            "Name"
                        ],
                        [
                            "self.gcn(feature_out, sorted_seq_len, adj_matrixs[permIdx], dep_label_adj[permIdx])",
                            "Call"
                        ],
                        [
                            "torch.cat((feature_out, dep_head_emb), 2)",
                            "Call"
                        ],
                        [
                            "self.drop_lstm(lstm_out)",
                            "Call"
                        ],
                        [
                            "feature_out + dep_head_emb",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.mlp_layers[l](feature_out) + self.mlp_head_linears[l](dep_head_emb))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_194": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_251": {
                "input": {
                    "value": "tagTransScoresEnd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(self.transition[:, self.end_idx].view(1, self.label_size).expand(batchSize, self.label_size), 1, endTagIds).view(batchSize)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_253": {
                "input": {
                    "value": "tagTransScoresMiddle.masked_select(masks[:, 1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "feature_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_out, dep_head_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * config.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * config.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTM_92": {
                "*args": {
                    "value": "hidden_size",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "feature_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mlp_layers[l](feature_out) + self.mlp_head_linears[l](dep_head_emb)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_299": {
                "condition": {
                    "value": "word_seq_lens - distance2Last - 1 > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "word_seq_lens - distance2Last - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.le(maskTemp, word_seq_lens.view(batch_size, 1).expand(batch_size, sent_len)).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(word_seq_lens, dtype=torch.int64).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}