{
    "hyper_pixelNN.py": {
        "sklearn": {
            "SVC_738": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "args.svm_regularization_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_score_747": {
                "variable": {
                    "value": "overall_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "valY",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_748": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "valY",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ]
                    ]
                }
            },
            "cohen_kappa_score_751": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "y1": {
                    "value": "valY",
                    "type": "variable",
                    "possible_values": []
                },
                "y2": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_676": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "args.svm_regularization_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_score_684": {
                "variable": {
                    "value": "overall_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "valY",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_685": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "valY",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ]
                    ]
                }
            },
            "cohen_kappa_score_688": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "y1": {
                    "value": "valY",
                    "type": "variable",
                    "possible_values": []
                },
                "y2": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(valY)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_461": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_item_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(map(operator.add, addl_padding, (1, 1, data.shape[2])))",
                            "Call"
                        ],
                        [
                            "tupsum(hyper_pixel_shape, padding, addl_spatial_pad)",
                            "Call"
                        ],
                        [
                            "tupsum(hyper_pixel_shape, net_addl_padding, addl_spatial_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_544": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_item_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(map(operator.add, addl_padding, (1, 1, data.shape[2])))",
                            "Call"
                        ],
                        [
                            "tupsum(hyper_pixel_shape, padding, addl_spatial_pad)",
                            "Call"
                        ],
                        [
                            "tupsum(hyper_pixel_shape, net_addl_padding, addl_spatial_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "Estimator_922": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "args.model_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numpy_input_fn_939": {
                "variable": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'subimages': trainX[:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "min(nlabeled, bs)",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "args.eval_period",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_943": {
                "variable": {
                    "value": "eval_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'subimages': valX[:n_eval, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "valY[:n_eval]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "min(nlabeled, bs)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_947": {
                "variable": {
                    "value": "test_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'subimages': valX[n_eval:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "valY[n_eval:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "min(nlabeled, bs)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_90": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [1, 2, 3, 4, 0])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [1, -1, final_size, final_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, 1, 1), (lambda1_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(U1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pooling3d_113": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [1, 2, 3, 4, 0])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [1, -1, final_size, final_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, 1, 1), (lambda1_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(U1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(lambda1_d, band1_d, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(lambda1_d, band1_d, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [1, 2, 3, 4, 0])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [1, -1, final_size, final_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, 1, 1), (lambda1_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(U1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 3, 4, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "U2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_134": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 4)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U2, (lambda2_d, band2_d, 1), (lambda2_d, band2_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [1, 2, 3, 4, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pooling3d_137": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 4)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U2, (lambda2_d, band2_d, 1), (lambda2_d, band2_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [1, 2, 3, 4, 0])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(lambda2_d, band2_d, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(lambda2_d, band2_d, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_139": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 4)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U2, (lambda2_d, band2_d, 1), (lambda2_d, band2_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [1, 2, 3, 4, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 3, 4, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x[:, :, p2h:-p2h, p2w:-p2w, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, [-1, final_size, final_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, final_size, final_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "variable": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(U1[:, :, p1h:-p1h, p1w:-p1w, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(U1, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, [-1, final_size, final_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, final_size, final_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, [-1, final_size, final_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, final_size, final_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "SX",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S0, S1, S2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_188": {
                "variable": {
                    "value": "SX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(SX, 0)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(SX, (lambdax_d, 1, 1), (lambdax_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(SX)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pooling3d_189": {
                "variable": {
                    "value": "SX",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "SX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(SX, 0)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(SX, (lambdax_d, 1, 1), (lambdax_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(SX)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(lambdax_d, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(lambdax_d, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_191": {
                "variable": {
                    "value": "SX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(SX, 0)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(SX, (lambdax_d, 1, 1), (lambdax_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(SX)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_194": {
                "a": {
                    "value": "SX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(SX, 0)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(SX, (lambdax_d, 1, 1), (lambdax_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(SX)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_218": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [1, 2, 3, 4, 0])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [1, -1, final_size, final_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, 1, 1), (lambda1_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(U1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pooling3d_230": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [1, 2, 3, 4, 0])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [1, -1, final_size, final_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, 1, 1), (lambda1_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(U1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(lambda1_d, band1_d, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(lambda1_d, band1_d, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [1, 2, 3, 4, 0])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [1, -1, final_size, final_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, 1, 1), (lambda1_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(U1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, final_size, final_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pooling3d_234": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [1, 2, 3, 4, 0])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [1, -1, final_size, final_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, 1, 1), (lambda1_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(U1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(lambda1_d, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(lambda1_d, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_235": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [1, 2, 3, 4, 0])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [1, -1, final_size, final_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, 1, 1), (lambda1_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(U1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_237": {
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [1, 2, 3, 4, 0])",
                            "Call"
                        ],
                        [
                            "fst.scat3d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, band1_d, 1), (lambda1_d, band1_d, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [1, -1, final_size, final_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (lambda1_d, 1, 1), (lambda1_d, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(U1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_249": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_251": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_252": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_254": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_255": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 500)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_256": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 500)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_257": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 500)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_258": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 100)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_274": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_275": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_276": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_277": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_279": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_280": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 500)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_281": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 500)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_299": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_300": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_301": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_302": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_304": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_305": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_306": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_307": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_309": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_310": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, n_classes, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv2, n_classes, 1, activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_pooling2d_311": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, n_classes, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv2, n_classes, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_313": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, 5, 1, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, 5, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_325": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "average_pooling2d_326": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_327": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_329": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 1024, 1, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 4, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 4, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 128, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv1, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "average_pooling2d_330": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_331": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_333": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "average_pooling2d_334": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, n_classes, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv2, n_classes, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_336": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, 5, 1, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, 5, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_348": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=batch_item_shape)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_349": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_350": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_351": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_353": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 512, 3, activation=tf.nn.relu, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv2, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 64, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(conv2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_355": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 500)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_387": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, 5, 1, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, 5, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_889": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=True, is_training=False, n_classes=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_890": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=True, is_training=False, n_classes=n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_897": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_899": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_904": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_val, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_per_class_accuracy_905": {
                "variable": {
                    "value": "avg_acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_val, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ],
                        [
                            "nclass_dict[args.dataset]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "EstimatorSpec_911": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_val, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32)))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "{'accuracy': acc_op, 'avg_accuracy': avg_acc_op, 'kappa': kappa_op}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "placeholder_934": {
                "variable": {
                    "value": "serialized_tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, trainX.shape[1], trainX.shape[2], trainX.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "Hyper3DNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "Hyper3DNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_295": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_804": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_806": {
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "full_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(best_models_dir, latest)",
                            "Call"
                        ]
                    ]
                }
            },
            "ServingInputReceiver_937": {
                "features": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "user_input",
                            "variable"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "user_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'subimages': serialized_tf_example}",
                            "Dict"
                        ]
                    ]
                }
            },
            "info_994": {
                "msg": {
                    "value": "'{:06d}: Validation Accuracy: {:.4f} (At lowest loss: {:.4f}) (Best Ever: {:.4f})'.format(i * args.eval_period, e['accuracy'], acc_at_best_loss, best_acc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_995": {
                "msg": {
                    "value": "'{:06d}: Test Accuracy: Best by Eval Acc: {:.4f}. Best by Eval Loss: {:.4f}'.format(i * args.eval_period, test_acc_at_best_eval_acc, test_acc_at_best_eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_999": {
                "msg": {
                    "value": "'{:06d}: Overall Accuracy: Best by Eval Acc: {:.4f}. Best by Eval Loss: {:.4f}'.format(i * args.eval_period, overall_acc_at_best_eval_acc, overall_acc_at_best_eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_563": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "EstimatorSpec_894": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_val, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_897": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=False, is_training=True, n_classes=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.cast(labels, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_966": {
                "msg": {
                    "value": "'{:06d}: High Accuracy. Saving model with Validation Accuracy: {:.4f}'.format(i * args.eval_period, e['accuracy'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_972": {
                "msg": {
                    "value": "'{:06d}: Low Loss. Saving model with Validation Accuracy: {:.4f}'.format(i * args.eval_period, e['accuracy'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_980": {
                "msg": {
                    "value": "'Eval Loss did not decrease %i/%i times.' % (n_nondecreasing_evals, args.terminate_if_n_nondecreasing_evals)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_1006": {
                "msg": {
                    "value": "'Terminating at epoch %i because eval loss did not decrease for %i consecutive evals (%i epochs)' % (i * args.eval_period, n_nondecreasing_evals, n_nondecreasing_evals * args.eval_period)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_global_step_901": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_898": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hyperparam_gridsearch.py": {
        "sklearn": {
            "SVC_25": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "rgb_baseline.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, net_in_shape[0], net_in_shape[0], nbands]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_50": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "salt_baseline.py": {
        "sklearn": {
            "confusion_matrix_122": {
                "y_true": {
                    "value": "flat_labels[file_i * chunk_size:(file_i + 1) * chunk_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "p_label",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, net_in_shape[0], net_in_shape[0], nbands]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_46": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "salt_data.py": {
        "sklearn": {
            "train_test_split_33": {
                "variable": {
                    "value": "(bin_train, bin_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "myhist[mybin]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tsne_hsi_colors.py": {
        "sklearn": {
            "TSNE_25": {
                "variable": {
                    "value": "tsne_fitter",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/pb_format_filelist.py": {
        "sklearn": {}
    },
    "AP.py": {
        "tensorflow": {
            "conv2d_148": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 48, 5, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_151": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 48, 5, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_152": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 96, 3, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_154": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 96, 3, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 96, 3, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_157": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 96, 3, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_158": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(conv3, 1024)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(conv3, 1024)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_161": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(conv3, 1024)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_162": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_163": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_165": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1024)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc2, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_167": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "DFFN.py": {
        "tensorflow": {
            "conv2d_29": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_30": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_31": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_33": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_34": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_47": {
                "variable": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 1, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_50": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(path2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(path2, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_51": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(path2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(path2, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_52": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(path2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(path2, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_53": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(path2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(path2, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_35": {
                "x": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_55": {
                "x": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 1, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(path2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(path2, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(path2)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_70": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_71": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_74": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block2(b1, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_93": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_94": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "block2(b1, 32)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_97": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_99": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_100": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_101": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_104": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "input": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_123": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_124": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_127": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block2(b1, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_143": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_144": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "block2(b1, 32)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_147": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_149": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_150": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_151": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_155": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "input": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_169": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_170": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_171": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_174": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_178": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block2(b1, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_187": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_188": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_190": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "block2(b1, 32)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_191": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_193": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_194": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_195": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_198": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_199": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_200": {
                "input": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_213": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_214": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_215": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_218": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_219": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(b1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_221": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block2(b1, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_222": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(t2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_228": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_229": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_231": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "block2(b1, 32)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_232": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_234": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_235": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_236": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_239": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_240": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_241": {
                "input": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_255": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_256": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_257": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_260": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_262": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block2(b1, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_267": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_268": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_270": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "block2(b1, 32)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_271": {
                "variable": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_273": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t2out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(t2, 64, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t2out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_274": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_275": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_278": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_279": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_280": {
                "input": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_291": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ],
                        [
                            "x_dict['subimages']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_292": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_293": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inp, nchannels, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, 16, 3, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_296": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "block1(conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_301": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(b1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(conv1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "batch_normalization_302": {
                "variable": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_304": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block1(t2, 32))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(block2(b1, 32))",
                            "Call"
                        ],
                        [
                            "block2(b1, 32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t1out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 64, 3, 4, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(b1, 32, 3, 2, activation=None, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(t1out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_305": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_309": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_310": {
                "variable": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_311": {
                "input": {
                    "value": "fuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t1out, t2out)",
                            "Call"
                        ],
                        [
                            "tf.math.add(fuse, t3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.math.add(t2, t1out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(fuse, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fuse, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "DFFN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "DFFN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "DFFN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "DFFN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "DFFN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "DFFN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_87": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_88": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_89": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_90": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_138": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_139": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_140": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_183": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_184": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_225": {
                "features": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ],
                        [
                            "block1(tf.nn.relu(t3), 64)",
                            "Call"
                        ],
                        [
                            "block2(t2, 64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kaggle_prec.py": {
        "tensorflow": {
            "true_positives_46": {
                "variable": {
                    "value": "(true_p, true_positives_update_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "metrics_collections": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "updates_collections": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "false_positives_53": {
                "variable": {
                    "value": "(false_p, false_positives_update_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "metrics_collections": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "updates_collections": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "false_negatives_60": {
                "variable": {
                    "value": "(false_n, false_negatives_update_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "metrics_collections": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "updates_collections": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "where_69": {
                "condition": {
                    "value": "math_ops.greater(tp + fp + fn, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.div(tp, tp + fp + fn)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_70": {
                "x": {
                    "value": "tp + fp + fn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_70": {
                "x": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tp + fp + fn",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/convolutional_network.py": {
        "tensorflow": {
            "Estimator_108": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numpy_input_fn_111": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': mnist.train.images}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "mnist.train.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_119": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': mnist.test.images}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "mnist.test.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_79": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "accuracy_94": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_98": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32)))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "{'accuracy': acc_op}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_47": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 5, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_50": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 5, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_52": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 64, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_55": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 64, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_58": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_60": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_84": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_87": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.cast(labels, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_global_step_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tf_unet/layers.py": {
        "tensorflow": {
            "truncated_normal_25": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_32": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'weight_devonc'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_29": {
                "initial_value": {
                    "value": "tf.truncated_normal(shape, stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'weight_devonc'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_33": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weight'",
                            "Method Argument"
                        ],
                        [
                            "'weight_devonc'",
                            "Method Argument"
                        ],
                        [
                            "'bias'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "conv_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_38": {
                "variable": {
                    "value": "conv_2d_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_43": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_shape[0], x_shape[1] * 2, x_shape[2] * 2, x_shape[3] // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_49": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_shape[1] * 2, x_shape[2] * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_58": {
                "variable": {
                    "value": "x1_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_59": {
                "variable": {
                    "value": "x2_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "slice_63": {
                "variable": {
                    "value": "x1_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, (x1_shape[1] - x2_shape[1]) // 2, (x1_shape[2] - x2_shape[2]) // 2, 0]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, x2_shape[1], x2_shape[2], -1]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_max_68": {
                "variable": {
                    "value": "max_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output_map",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_69": {
                "variable": {
                    "value": "exponential_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_map - max_axis",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "normalize",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exponential_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(output_map - max_axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "truncated_normal_29": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_39": {
                "x": {
                    "value": "conv_2d_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv_2d, b)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_42": {
                "name": {
                    "value": "deconv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_45": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([x_shape[0], x_shape[1] * 2, x_shape[2] * 2, x_shape[3] // 2])",
                            "Call"
                        ],
                        [
                            "tf.stack([x_shape[1] * 2, x_shape[2] * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d_transpose",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_48": {
                "name": {
                    "value": "upsampleNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_51": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([x_shape[0], x_shape[1] * 2, x_shape[2] * 2, x_shape[3] // 2])",
                            "Call"
                        ],
                        [
                            "tf.stack([x_shape[1] * 2, x_shape[2] * 2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "resize_nearest_neightbor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_57": {
                "name": {
                    "value": "crop_and_concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_64": {
                "values": {
                    "value": "[x1_crop, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_67": {
                "name": {
                    "value": "pixel_wise_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "y_ * tf.log(tf.clip_by_value(output_map, 1e-10, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_74": {
                "x": {
                    "value": "tf.clip_by_value(output_map, 1e-10, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_74": {
                "t": {
                    "value": "output_map",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tf_unet/unet.py": {
        "tensorflow": {
            "cast_529": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_536": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack((img_w, img_h, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_537": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_538": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack((-1, img_w, img_h, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, nx, ny, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "output_map",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(in_node, weight, bias, tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_194": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, n_class]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_196": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_202": {
                "variable": {
                    "value": "self.gradients_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_268": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_289": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_301": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_353": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_355": {
                "variable": {
                    "value": "self.norm_gradients_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[len(self.net.gradients_node)])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "norm_gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_367": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_368": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_min_530": {
                "input_tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_531": {
                "x": {
                    "value": "tf.reduce_max(V)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "preprocessing",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "tmp_h_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(in_node, w1, b1, keep_prob)",
                            "Call"
                        ],
                        [
                            "conv2d(h_deconv_concat, w1, b1, keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_96": {
                "variable": {
                    "value": "dw_h_convs[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tmp_h_conv, w2, b2, keep_prob)",
                            "Call"
                        ],
                        [
                            "conv2d(h_conv, w2, b2, keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_118": {
                "variable": {
                    "value": "h_deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "deconv2d(in_node, wd, pool_size) + bd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "h_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(in_node, w1, b1, keep_prob)",
                            "Call"
                        ],
                        [
                            "conv2d(h_deconv_concat, w1, b1, keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_130": {
                "variable": {
                    "value": "in_node",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(tmp_h_conv, w2, b2, keep_prob)",
                            "Call"
                        ],
                        [
                            "conv2d(h_conv, w2, b2, keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_141": {
                "name": {
                    "value": "output_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_210": {
                "variable": {
                    "value": "self.correct_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.predicter, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_211": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_222": {
                "variable": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exponential_decay_333": {
                "variable": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt_kwargs.pop('learning_rate', 0.2)",
                            "Call"
                        ],
                        [
                            "self.opt_kwargs.pop('learning_rate', 0.001)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "training_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt_kwargs.pop('decay_rate', 0.95)",
                            "Call"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_339": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt_kwargs.pop('momentum', 0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_360": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.net.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_361": {
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.net.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_362": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.net.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_365": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_425": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(output_path)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_529": {
                "input_": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.combine_img_prediction(batch_x, batch_y, prediction)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "(0, 0, 0, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, -1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_531": {
                "input_tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_534": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.combine_img_prediction(batch_x, batch_y, prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_535": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.combine_img_prediction(batch_x, batch_y, prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_536": {
                "values": {
                    "value": "(img_w, img_h, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_538": {
                "values": {
                    "value": "(-1, img_w, img_h, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_65": {
                "values": {
                    "value": "[-1, nx, ny, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, nx, ny, channels]))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "'down_conv_{}'.format(str(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "'up_conv_{}'.format(str(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_144": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_149": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_204": {
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_208": {
                "name": {
                    "value": "results",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_221": {
                "name": {
                    "value": "cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_344": {
                "variable": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt_kwargs.pop('learning_rate', 0.2)",
                            "Call"
                        ],
                        [
                            "self.opt_kwargs.pop('learning_rate', 0.001)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_346": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_355": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self.net.gradients_node)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_358": {
                "name": {
                    "value": "norm_grads",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.norm_gradients_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_418": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(output_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_151": {
                "name": {
                    "value": "'summary_conv_%02d_01' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "get_image_summary(c1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_152": {
                "name": {
                    "value": "'summary_conv_%02d_02' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "get_image_summary(c2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_155": {
                "name": {
                    "value": "'summary_pool_%02d' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "get_image_summary(pools[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_158": {
                "name": {
                    "value": "'summary_deconv_concat_%02d' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "get_image_summary(deconv[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_161": {
                "name": {
                    "value": "dw_convolution_%02d % k + /activations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "dw_h_convs[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_164": {
                "name": {
                    "value": "up_convolution_%s % k + /activations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "up_h_convs[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "tensor": {
                    "value": "pixel_wise_softmax(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_210": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_211": {
                "x": {
                    "value": "self.correct_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_228": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(class_weights, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_230": {
                "variable": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.y, [-1, self.n_class])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cost_kwargs.pop('class_weights', None)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.array(class_weights, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_231": {
                "variable": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(flat_labels, class_weights)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_map, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_233": {
                "variable": {
                    "value": "loss_map",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, [-1, self.n_class])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.y, [-1, self.n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_235": {
                "variable": {
                    "value": "weighted_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=flat_logits, labels=flat_labels)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(flat_labels, class_weights)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_map, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_237": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weighted_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(loss_map, weight_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_240": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=flat_logits, labels=flat_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_245": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prediction * self.y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "write_graph_413": {
                "graph_or_graph_def": {
                    "value": "sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(output_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "graph.pb",
                    "type": "str",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_240": {
                "logits": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, [-1, self.n_class])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.y, [-1, self.n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_246": {
                "input_tensor": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_wise_softmax(logits)",
                            "Call"
                        ],
                        [
                            "sess.run(self.predicter, feed_dict={self.x: x_test, self.y: y_dummy, self.keep_prob: 1.0})",
                            "Call"
                        ],
                        [
                            "sess.run(self.net.predicter, feed_dict={self.net.x: batch_x, self.net.y: batch_y, self.net.keep_prob: 1.0})",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_254": {
                "t": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rgb_pixelNN.py": {
        "tensorflow": {
            "conv2d_43": {
                "variable": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=egbatch.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(8, 117, 117, 1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.real, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=egbatch.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(8, 117, 117, 1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.imag, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, 101 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_175": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(predictions, [bs, 101 ** 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_177": {
                "variable": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(labels, predictions)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.add(labels, predictions)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_179": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(labels, predictions), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(labels, notflat_pred_classes), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(union, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_180": {
                "variable": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(labels, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_185": {
                "variable": {
                    "value": "precisions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "TP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.true_positives_at_thresholds(mask_present_gt, iou, threshes)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(tf.add(TP, tf.add(FP, FN)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_215": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_net(features, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_216": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_net(features, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_218": {
                "variable": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 101 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(labels, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_229": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=flat_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_231": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "accuracy_236": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(labels, dtype=tf.int32), [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_iou_237": {
                "variable": {
                    "value": "iou_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(labels, dtype=tf.int32), [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_241": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_242": {
                "variable": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pred_classes, [batch_size, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(notflat_pred_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(labels, notflat_pred_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_244": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.add(labels, notflat_pred_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_245": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(labels, predictions), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(labels, notflat_pred_classes), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(union, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_246": {
                "variable": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(labels, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "true_positives_at_thresholds_248": {
                "variable": {
                    "value": "(TP, TP_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "false_positives_at_thresholds_249": {
                "variable": {
                    "value": "(FP, FP_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "false_negatives_at_thresholds_250": {
                "variable": {
                    "value": "(FN, FN_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_at_thresholds_251": {
                "variable": {
                    "value": "(prec, prec_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_263": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=flat_labels))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "myevalops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'2pxwise_accuracy': acc_op, '2pxwise_iou': iou_op}",
                            "Dict"
                        ]
                    ]
                }
            },
            "placeholder_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "egbatch.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_290": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_548": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(8, 117, 117, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_554": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Estimator_589": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ]
                    ]
                }
            },
            "Estimator_615": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ]
                    ]
                }
            },
            "numpy_input_fn_616": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:384, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_627": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[-32:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_643": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ]
                    ]
                }
            },
            "numpy_input_fn_644": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:384, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_684": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[-32:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_714": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ]
                    ]
                }
            },
            "numpy_input_fn_716": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': testX[:17984, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_71": {
                "x": {
                    "value": "tf.complex(real1, imag1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "U2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_106": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_112": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x[:, 4:-4, 4:-4, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, 1, S0.get_shape()[1], S0.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U1[:, 2:-2, 2:-2, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S0, S1, S2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "a": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d_to_2d_2layer(x, reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feat, (fs[0] * fs[1] * fs[2], fs[3]))",
                            "Call"
                        ],
                        [
                            "scat2d_to_2d_2layer(x, bs=1)",
                            "Call"
                        ],
                        [
                            "pixel_net({'images': x}, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(fs[0] * fs[1] * fs[2], fs[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dense_150": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d_to_2d_2layer(x, reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feat, (fs[0] * fs[1] * fs[2], fs[3]))",
                            "Call"
                        ],
                        [
                            "scat2d_to_2d_2layer(x, bs=1)",
                            "Call"
                        ],
                        [
                            "pixel_net({'images': x}, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_152": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(feat, 256)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_154": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(feat, 256)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_156": {
                "variable": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 128, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_158": {
                "variable": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc3, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_160": {
                "variable": {
                    "value": "fc4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc3, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_161": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc3, 32, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_194": {
                "variable": {
                    "value": "summary_components",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "metric_op",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "numpy_input_fn_593": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': trainX[:3584, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY[:3584, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_salt_labels(folder='mytrain')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_732": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': testX[-32:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "complex_71": {
                "real": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size[:2], strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.real, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size[:2], strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.imag, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scat2d_to_2d_2layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_175": {
                "tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(predictions, [bs, 101 ** 2]), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "{'mask': notflat_pred_classes}",
                            "Dict"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, 101 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_177": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(predictions, [bs, 101 ** 2]), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "{'mask': notflat_pred_classes}",
                            "Dict"
                        ]
                    ]
                }
            },
            "add_178": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(predictions, [bs, 101 ** 2]), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "{'mask': notflat_pred_classes}",
                            "Dict"
                        ]
                    ]
                }
            },
            "add_179": {
                "x": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.add(labels, predictions), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.add(labels, notflat_pred_classes), axis=1)",
                            "Call"
                        ],
                        [
                            "component1 + component2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_180": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "true_positives_at_thresholds_182": {
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "false_positives_at_thresholds_183": {
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "false_negatives_at_thresholds_184": {
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_185": {
                "x": {
                    "value": "FP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.false_positives_at_thresholds(mask_present_gt, iou, threshes)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "FN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.false_negatives_at_thresholds(mask_present_gt, iou, threshes)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_186": {
                "input_tensor": {
                    "value": "precisions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(TP, tf.add(tf.add(TP, tf.add(FP, FN)), 1))",
                            "Call"
                        ],
                        [
                            "tps / (tps + fps + fns)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_201": {
                "name": {
                    "value": "summary_components.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "metric_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_225": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(predictions, [bs, 101 ** 2]), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "{'mask': notflat_pred_classes}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_228": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_229": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_net(features, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(labels, dtype=tf.int32), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_243": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pred_classes, [batch_size, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(notflat_pred_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_244": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pred_classes, [batch_size, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(notflat_pred_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_245": {
                "x": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.add(labels, predictions), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.add(labels, notflat_pred_classes), axis=1)",
                            "Call"
                        ],
                        [
                            "component1 + component2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_246": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numpy_input_fn_603": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:384, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "valY[:384, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_salt_labels(folder='myval')",
                            "Call"
                        ],
                        [
                            "get_salt_labels(folder='myval')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_52": {
                "value": {
                    "value": "win_params.filters.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "win_params.filters.imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_196": {
                "name": {
                    "value": "'{op_name}_{i}'.format(op_name=name, i=threshes[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.squeeze(summary_component, axis=[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_global_step_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_198": {
                "input": {
                    "value": "summary_component",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "salt_UNet.py": {
        "tensorflow": {
            "stack_83": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cast(tf.equal(y, 0), dtype=tf.int32), tf.cast(tf.equal(y, 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_118": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits_test, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_128": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "square_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 104, 104]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=square_labels, logits=logits_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "accuracy_139": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "square_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 104, 104])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(logits_test, axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_iou_140": {
                "variable": {
                    "value": "iou_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "square_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 104, 104])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(logits_test, axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_142": {
                "variable": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(labels, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_143": {
                "variable": {
                    "value": "mask_pixel_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(logits_test, axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minimum_144": {
                "variable": {
                    "value": "mask_present_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_pixel_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(pred_classes, axis=(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "false_positives_145": {
                "variable": {
                    "value": "FP_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "mask_present_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(mask_pixel_count, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "false_negatives_146": {
                "variable": {
                    "value": "FN_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "mask_present_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(mask_pixel_count, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_147": {
                "variable": {
                    "value": "mask_predicted_rate_op",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_present_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(mask_pixel_count, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_148": {
                "variable": {
                    "value": "mask_volume_op",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_pixel_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(pred_classes, axis=(1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(square_labels, pred_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_161": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.add(square_labels, pred_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "divide_162": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(square_labels, pred_classes), axis=(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(union, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "EstimatorSpec_182": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(logits_test, axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=square_labels, logits=logits_train))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "myevalops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': acc_op, 'iou': iou_op, 'mask_presence/false_positives': FP_op, 'mask_presence/false_negatives': FN_op, 'mask_presence/mask_prediction_rate': mask_predicted_rate_op, 'mask_presence/avg_mask_size': mask_volume_op}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Estimator_229": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/unet2k'",
                            "str"
                        ]
                    ]
                }
            },
            "conv2d_67": {
                "variable": {
                    "value": "pcaed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pxNN.scat2d_to_2d_2layer(x, reuse, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pcadim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.cast(tf.equal(y, 0), dtype=tf.int32), tf.cast(tf.equal(y, 1), dtype=tf.int32)], -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_164": {
                "variable": {
                    "value": "hit_at_thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(iou, thresh)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "true_positives_165": {
                "variable": {
                    "value": "myevalops[true_positive/%.2f % thresh]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "hit_at_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(iou, thresh), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_166": {
                "variable": {
                    "value": "myevalops[precision/%.2f % thresh]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "hit_at_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(iou, thresh), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "numpy_input_fn_233": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': trainX[:ts, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY[:ts, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_salt_labels(folder='mytrain')",
                            "Call"
                        ],
                        [
                            "trainY[trainY.sum(axis=1) > 0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "scatU",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=flat_logits, labels=flat_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "input": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scatU(features, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "EstimatorSpec_125": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mask': pred_classes}",
                            "Dict"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_130": {
                "labels": {
                    "value": "square_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 104, 104])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scatU(features, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_160": {
                "x": {
                    "value": "square_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 104, 104])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(logits_test, axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_161": {
                "x": {
                    "value": "square_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 104, 104])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(logits_test, axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_162": {
                "x": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps + tf.reduce_sum(prediction) + tf.reduce_sum(y)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.add(square_labels, pred_classes), axis=(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_168": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "numpy_input_fn_243": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:vs, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "valY[:vs, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_salt_labels(folder='myval')",
                            "Call"
                        ],
                        [
                            "valY[valY.sum(axis=1) > 0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "tf.equal(y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prediction * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_global_step_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_164": {
                "x": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "threshes",
                            "variable"
                        ]
                    ]
                }
            },
            "image_170": {
                "name": {
                    "value": "'mask/train_true_%02d' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "unet.get_image_summary(tf.expand_dims(tf.cast(square_labels[k:k + 1, :, :], dtype=tf.float32), -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_172": {
                "name": {
                    "value": "'mask/train_pred_%02d' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "unet.get_image_summary(tf.expand_dims(tf.cast(pred_classes[k:k + 1, :, :], dtype=tf.float32), -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_174": {
                "name": {
                    "value": "'mask/train_prob_0_%02d' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "unet.get_image_summary(tf.cast(pred_probas[k:k + 1, :, :, :1], dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_176": {
                "name": {
                    "value": "'mask/train_prob_1_%02d' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "unet.get_image_summary(tf.cast(pred_probas[k:k + 1, :, :, 1:], dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_83": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.cast(tf.equal(y, 0), dtype=tf.int32), tf.cast(tf.equal(y, 1), dtype=tf.int32)], -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_88": {
                "logits": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, [-1, n_class])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unetlay.pixel_wise_softmax(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_101": {
                "t": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_171": {
                "input": {
                    "value": "tf.cast(square_labels[k:k + 1, :, :], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "input": {
                    "value": "tf.cast(pred_classes[k:k + 1, :, :], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_175": {
                "x": {
                    "value": "pred_probas[k:k + 1, :, :, :1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_177": {
                "x": {
                    "value": "pred_probas[k:k + 1, :, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_171": {
                "x": {
                    "value": "square_labels[k:k + 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_173": {
                "x": {
                    "value": "pred_classes[k:k + 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "salt_binary.py": {
        "tensorflow": {
            "conv2d_56": {
                "variable": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(8, 113, 113, 1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.real, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(8, 113, 113, 1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.imag, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "argmax_267": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_268": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_275": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "accuracy_282": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "false_positives_284": {
                "variable": {
                    "value": "FP_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "false_negatives_285": {
                "variable": {
                    "value": "FN_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "true_positives_286": {
                "variable": {
                    "value": "TP_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_287": {
                "variable": {
                    "value": "mask_predicted_rate_op",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_288": {
                "variable": {
                    "value": "prec_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_304": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32)))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "myevalops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': acc_op, 'mask_presence/false_positives': FP_op, 'mask_presence/false_negatives': FN_op, 'mask_presence/true_positives': TP_op, 'mask_presence/mask_prediction_rate': mask_predicted_rate_op, 'mask_presence/mask_rate': tf.metrics.mean(labels), 'mask_presence/precision': prec_op, 'mask_presence/kaggle': kaggle_op}",
                            "Dict"
                        ]
                    ]
                }
            },
            "placeholder_321": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(8, 113, 113, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_327": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numpy_input_fn_366": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:headsz, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_371": {
                "variable": {
                    "value": "bin_model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binary13b'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "numpy_input_fn_381": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[-batch_size:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_438": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binary13b'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_84": {
                "x": {
                    "value": "tf.complex(real1, imag1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_118": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "U2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_120": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x[:, 6:-6, 6:-6, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(x[:, 16:-16, 16:-16, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, 1, S0.get_shape()[1], S0.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U1[:, 3:-3, 3:-3, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(U1[:, 8:-8, 8:-8, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S0, S1, S2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "a": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "U2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_186": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_192": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x[:, 6:-6, 6:-6, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(x[:, 16:-16, 16:-16, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, 1, S0.get_shape()[1], S0.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U1[:, 3:-3, 3:-3, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(U1[:, 8:-8, 8:-8, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_212": {
                "variable": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S0, S1, S2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_214": {
                "a": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_227": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d_to_2d_2layer(x, reuse)",
                            "Call"
                        ],
                        [
                            "scat2d_to_2d_2layer(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_230": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(feat, 16 * mlt, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_232": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 16 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_234": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 16 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_235": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 32 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_237": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 32 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_238": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv3, 64 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv4, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_241": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv3, 64 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv4, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_244": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv4)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024 * mlt)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_246": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv4)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024 * mlt)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_248": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv4)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024 * mlt)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "250 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_251": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 250 * mlt)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numpy_input_fn_442": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': trainX[:3584, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY[:3584]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.array(train_pix_num > 0).astype(int)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_452": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:384, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "valY[:384]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.array(val_pix_num > 0).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(val_pix_num > 0).astype(int)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "complex_84": {
                "real": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size, strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.real, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size, strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.imag, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "TangNet2d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "scat2d_to_2d_2layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "EstimatorSpec_272": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_275": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.cast(labels, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_298": {
                "a": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_446": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_65": {
                "value": {
                    "value": "win_params.filters.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_79": {
                "value": {
                    "value": "win_params.filters.imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_276": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "salt_binary_baseline.py": {
        "tensorflow": {
            "argmax_91": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_99": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "accuracy_106": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "false_positives_108": {
                "variable": {
                    "value": "FP_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "false_negatives_109": {
                "variable": {
                    "value": "FN_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "true_positives_110": {
                "variable": {
                    "value": "TP_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_111": {
                "variable": {
                    "value": "mask_predicted_rate_op",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_112": {
                "variable": {
                    "value": "prec_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_125": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32)))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "myevalops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': acc_op, 'mask_presence/false_positives': FP_op, 'mask_presence/false_negatives': FN_op, 'mask_presence/true_positives': TP_op, 'mask_presence/mask_prediction_rate': mask_predicted_rate_op, 'mask_presence/mask_rate': tf.metrics.mean(labels), 'mask_presence/precision': prec_op}",
                            "Dict"
                        ]
                    ]
                }
            },
            "numpy_input_fn_156": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:headsz, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_161": {
                "variable": {
                    "value": "bin_model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binary1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binary_base1'",
                            "str"
                        ]
                    ]
                }
            },
            "numpy_input_fn_171": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[-batch_size:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_194": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binary1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binary_base1'",
                            "str"
                        ]
                    ]
                }
            },
            "conv2d_51": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 64, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_56": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 64, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 64, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_59": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 128, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 128, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_62": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv3, 256, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv4, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_65": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv3, 256, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv4, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_68": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv4)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 4096)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_70": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv4)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 4096)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_72": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv4)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 4096)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 1000)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numpy_input_fn_198": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': trainX[:3584, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY[:3584]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.array(train_pix_num > 0).astype(int)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_96": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_99": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.cast(labels, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_120": {
                "a": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_verbosity_202": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numpy_input_fn_208": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:384, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "valY[:384]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.array(val_pix_num > 0).astype(int)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_global_step_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "salt_binary_half.py": {
        "tensorflow": {
            "conv2d_54": {
                "variable": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(x, [48, 48], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.real, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "variable": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(x, [48, 48], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.imag, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "argmax_267": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_268": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_275": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "accuracy_282": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "false_positives_284": {
                "variable": {
                    "value": "FP_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "false_negatives_285": {
                "variable": {
                    "value": "FN_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "true_positives_286": {
                "variable": {
                    "value": "TP_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_287": {
                "variable": {
                    "value": "mask_predicted_rate_op",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_288": {
                "variable": {
                    "value": "prec_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_304": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32)))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "myevalops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': acc_op, 'mask_presence/false_positives': FP_op, 'mask_presence/false_negatives': FN_op, 'mask_presence/true_positives': TP_op, 'mask_presence/mask_prediction_rate': mask_predicted_rate_op, 'mask_presence/mask_rate': tf.metrics.mean(labels), 'mask_presence/precision': prec_op, 'mask_presence/kaggle': kaggle_op}",
                            "Dict"
                        ]
                    ]
                }
            },
            "numpy_input_fn_334": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:headsz, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_339": {
                "variable": {
                    "value": "bin_model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binaryhalf1'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "numpy_input_fn_349": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[-batch_size:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_402": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binaryhalf1'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_82": {
                "x": {
                    "value": "tf.complex(real1, imag1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_116": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "U2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_124": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x[:, 6:-6, 6:-6, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(x[:, 6:-6, 6:-6, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, 1, S0.get_shape()[1], S0.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U1[:, 3:-3, 3:-3, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(U1[:, 3:-3, 3:-3, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S0, S1, S2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_147": {
                "a": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_182": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "U2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_190": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ],
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x[:, 6:-6, 6:-6, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(x[:, 6:-6, 6:-6, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, 1, S0.get_shape()[1], S0.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U1[:, 3:-3, 3:-3, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(U1[:, 3:-3, 3:-3, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ],
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S0, S1, S2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_212": {
                "a": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_227": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d_to_2d_2layer(x, reuse)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_230": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(feat, 16 * mlt, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_232": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 16 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_234": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 16 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_235": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 32 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_241": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 32 * mlt, 3, activation=tf.nn.relu, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_244": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024 * mlt)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_246": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024 * mlt)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_248": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 1024 * mlt)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "250 * mlt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_251": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 250 * mlt)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numpy_input_fn_406": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': trainX[:3584, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY[:3584]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.array(train_pix_num > 0).astype(int)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_416": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:384, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "valY[:384]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.array(val_pix_num > 0).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(val_pix_num > 0).astype(int)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "complex_82": {
                "real": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size, strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.real, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size, strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.imag, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "TangNet2d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "scat2d_to_2d_2layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "EstimatorSpec_272": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_275": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(features, num_classes, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.cast(labels, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_298": {
                "a": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_verbosity_410": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_63": {
                "value": {
                    "value": "win_params.filters.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_77": {
                "value": {
                    "value": "win_params.filters.imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_276": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "salt_pixelNN.py": {
        "tensorflow": {
            "conv2d_53": {
                "variable": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=egbatch.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(8, 117, 117, 1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.real, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_67": {
                "variable": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['images']",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=egbatch.shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(8, 117, 117, 1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.imag, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, 101 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_184": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(predictions, [bs, 101 ** 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(labels, predictions)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_187": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.add(labels, predictions)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_188": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(labels, predictions), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(labels, notflat_pred_classes), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(union, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_189": {
                "variable": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(labels, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_194": {
                "variable": {
                    "value": "precisions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "TP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.true_positives_at_thresholds(mask_present_gt, iou, threshes)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(tf.add(TP, tf.add(FP, FN)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_224": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_net(features, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_225": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_net(features, dropout, reuse=True, is_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_227": {
                "variable": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 101 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(labels, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_238": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=flat_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_240": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "accuracy_245": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(labels, dtype=tf.int32), [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_iou_246": {
                "variable": {
                    "value": "iou_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(labels, dtype=tf.int32), [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_250": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_251": {
                "variable": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pred_classes, [batch_size, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(notflat_pred_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_252": {
                "variable": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(labels, notflat_pred_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.add(labels, notflat_pred_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_254": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(labels, predictions), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(labels, notflat_pred_classes), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(union, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_255": {
                "variable": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(labels, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "true_positives_at_thresholds_257": {
                "variable": {
                    "value": "(TP, TP_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "false_positives_at_thresholds_258": {
                "variable": {
                    "value": "(FP, FP_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "false_negatives_at_thresholds_259": {
                "variable": {
                    "value": "(FN, FN_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_at_thresholds_260": {
                "variable": {
                    "value": "(prec, prec_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_272": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=flat_labels))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "myevalops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'2pxwise_accuracy': acc_op, '2pxwise_iou': iou_op}",
                            "Dict"
                        ]
                    ]
                }
            },
            "placeholder_296": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "egbatch.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_299": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_318": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(8, 117, 117, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_324": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Estimator_359": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ]
                    ]
                }
            },
            "Estimator_385": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ]
                    ]
                }
            },
            "numpy_input_fn_386": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:384, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_397": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[-32:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_413": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ]
                    ]
                }
            },
            "numpy_input_fn_414": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:384, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_453": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[-32:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Estimator_483": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ],
                        [
                            "'/scratch0/ilya/locDoc/data/kaggle-seismic-dataset/models/binarypix1'",
                            "str"
                        ]
                    ]
                }
            },
            "numpy_input_fn_485": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': testX[:17984, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_81": {
                "x": {
                    "value": "tf.complex(real1, imag1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "U2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(U2s, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(U2, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U2, (bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U2.get_shape()[1], U2.get_shape()[2], U2.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_121": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psis[0], layer_params[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, (bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs * U1.get_shape()[1], U1.get_shape()[2], U1.get_shape()[3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x[:, 6:-6, 6:-6, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S0, (bs, 1, S0.get_shape()[1], S0.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, 1, S0.get_shape()[1], S0.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U1[:, 3:-3, 3:-3, :], phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S1, (bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U1os[1], S1.get_shape()[1], S1.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(U2, phi, layer_params[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(S2, (bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, U2os[1], S2.get_shape()[1], S2.get_shape()[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S0, S1, S2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "a": {
                    "value": "feat2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S0, S1, S2], 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d_to_2d_2layer(x, reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feat, (fs[0] * fs[1] * fs[2], fs[3]))",
                            "Call"
                        ],
                        [
                            "scat2d_to_2d_2layer(x, bs=1)",
                            "Call"
                        ],
                        [
                            "pixel_net({'images': x}, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(fs[0] * fs[1] * fs[2], fs[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dense_159": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d_to_2d_2layer(x, reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feat, (fs[0] * fs[1] * fs[2], fs[3]))",
                            "Call"
                        ],
                        [
                            "scat2d_to_2d_2layer(x, bs=1)",
                            "Call"
                        ],
                        [
                            "pixel_net({'images': x}, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_161": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(feat, 256)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_163": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(feat, 256)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_165": {
                "variable": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 128, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc3, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_169": {
                "variable": {
                    "value": "fc4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc2, 64)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc3, rate=dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_170": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc3, 32, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_203": {
                "variable": {
                    "value": "summary_components",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "metric_op",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "numpy_input_fn_363": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': trainX[:3584, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY[:3584, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_salt_labels(folder='mytrain')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_501": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': testX[-32:, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "complex_81": {
                "real": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size, strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.real, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size, strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.imag, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scat2d_to_2d_2layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_184": {
                "tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(predictions, [bs, 101 ** 2]), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "{'mask': notflat_pred_classes}",
                            "Dict"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, 101 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_186": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(predictions, [bs, 101 ** 2]), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "{'mask': notflat_pred_classes}",
                            "Dict"
                        ]
                    ]
                }
            },
            "add_187": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(predictions, [bs, 101 ** 2]), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "{'mask': notflat_pred_classes}",
                            "Dict"
                        ]
                    ]
                }
            },
            "add_188": {
                "x": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.add(labels, predictions), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.add(labels, notflat_pred_classes), axis=1)",
                            "Call"
                        ],
                        [
                            "component1 + component2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_189": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "true_positives_at_thresholds_191": {
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "false_positives_at_thresholds_192": {
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "false_negatives_at_thresholds_193": {
                "labels": {
                    "value": "mask_present_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(labels, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "np.any(gt > 0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "tf.divide(intx, tf.add(union, 1))",
                            "Call"
                        ],
                        [
                            "overlap.sum() / float(union.sum() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "threshes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "[0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]",
                            "List"
                        ],
                        [
                            "np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_194": {
                "x": {
                    "value": "FP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.false_positives_at_thresholds(mask_present_gt, iou, threshes)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "FN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.false_negatives_at_thresholds(mask_present_gt, iou, threshes)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_195": {
                "input_tensor": {
                    "value": "precisions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(TP, tf.add(tf.add(TP, tf.add(FP, FN)), 1))",
                            "Call"
                        ],
                        [
                            "tps / (tps + fps + fns)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_210": {
                "name": {
                    "value": "summary_components.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "metric_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_234": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(predictions, [bs, 101 ** 2]), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "{'mask': notflat_pred_classes}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_237": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_238": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_net(features, dropout, reuse=False, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(labels, dtype=tf.int32), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_252": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pred_classes, [batch_size, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(notflat_pred_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_253": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "notflat_pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pred_classes, [batch_size, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(notflat_pred_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_254": {
                "x": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.add(labels, predictions), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.add(labels, notflat_pred_classes), axis=1)",
                            "Call"
                        ],
                        [
                            "component1 + component2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_255": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [bs, 101 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numpy_input_fn_373": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'images': valX[:384, :, :, :]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "valY[:384, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_salt_labels(folder='myval')",
                            "Call"
                        ],
                        [
                            "get_salt_labels(folder='myval')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_62": {
                "value": {
                    "value": "win_params.filters.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_76": {
                "value": {
                    "value": "win_params.filters.imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_205": {
                "name": {
                    "value": "'{op_name}_{i}'.format(op_name=name, i=threshes[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.squeeze(summary_component, axis=[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_global_step_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_207": {
                "input": {
                    "value": "summary_component",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "spectrogram_NN.py": {
        "tensorflow": {
            "Estimator_139": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "args.model_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numpy_input_fn_141": {
                "variable": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'spectrograms': trainX}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "args.eval_period",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_145": {
                "variable": {
                    "value": "eval_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'spectrograms': valX}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "valY",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_39": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(U1, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(U1, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_42": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(U1, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(U1, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(U1, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_46": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(U1, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_47": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, 300)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, 300)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "squeeze_49": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=True, is_training=False, n_classes=n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_122": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([p_labels, n_labels])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_val > 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "EstimatorSpec_128": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_val > 0.5",
                            "Compare"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.float32)))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "{'accuracy': acc_op}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "wst_net_v1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_155": {
                "msg": {
                    "value": "'{:06d}: Validation Accuracy: {:.4f}'.format(i * args.eval_period, e['accuracy'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "EstimatorSpec_112": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_val > 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_115": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=False, is_training=True, n_classes=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.cast(labels, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_global_step_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_116": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([p_labels, n_labels])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tang_feat.py": {
        "tensorflow": {}
    }
}