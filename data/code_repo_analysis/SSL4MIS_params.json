{
    "code/augmentations/ctaugment.py": {
        "torch": {}
    },
    "code/dataloaders/brats2019.py": {
        "torch": {
            "from_numpy_185": {
                "ndarray": {
                    "value": "sample['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "ndarray": {
                    "value": "sample['onehot_label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "ndarray": {
                    "value": "sample['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "code/dataloaders/dataset.py": {
        "torch": {
            "from_numpy_118": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_126": {
                "variable": {
                    "value": "label_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255 * label_aug",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_163": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_188": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "image_weak",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_weak.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_189": {
                "variable": {
                    "value": "image_weak",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_96": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.rot90(image, k)",
                            "Call"
                        ],
                        [
                            "np.flip(image, axis=axis).copy()",
                            "Call"
                        ],
                        [
                            "ndimage.rotate(image, angle, order=0, reshape=False)",
                            "Call"
                        ],
                        [
                            "np_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "h5f['image'][:]",
                            "Subscript"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "self.resize(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image.astype(np.float32)).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "random_rot_flip(image, label)",
                            "Call"
                        ],
                        [
                            "zoom(image, (self.output_size[0] / x, self.output_size[1] / y), order=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image.astype(np.float32)).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "random_rotate(image, label)",
                            "Call"
                        ],
                        [
                            "sample['image']",
                            "Subscript"
                        ],
                        [
                            "self.resize(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image.astype(np.float32)).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/dataloaders/utils.py": {
        "torch": {
            "from_numpy_77": {
                "variable": {
                    "value": "rgb_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(rgb_masks).transpose([0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_128": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_130": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.from_numpy(np.array(weight)).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_156": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_157": {
                "variable": {
                    "value": "un",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "np.array(weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_180": {
                "input": {
                    "value": "pred_tmp ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_195": {
                "input": {
                    "value": "pred_tmp ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/VoxResNet.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.se_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool3d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.InstanceNorm3d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.conv_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.InstanceNorm3d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_69": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_chns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_97": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_chns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_99": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_100": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_15": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_16": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "redu_chns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / r)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_18": {
                "in_channels": {
                    "value": "redu_chns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / r)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm3d_30": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_32": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_34": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_50": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_52": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_54": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_56": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/attention.py": {
        "torch": {
            "Conv2d_28": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not use_batchnorm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.cSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.sSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_40": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_74": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_98": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_46": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_55": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_76": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_78": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_80": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_82": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/attention_unet.py": {
        "torch": {
            "MaxPool3d_24": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_27": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_30": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_33": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_56": {
                "variable": {
                    "value": "self.dsv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[64, 128, 256, 512, 1024]",
                            "List"
                        ],
                        [
                            "[int(x / self.feature_scale) for x in filters]",
                            "ListComp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_59": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.combine_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size * 2, in_size, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[dsv1, dsv2, dsv3, dsv4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_122": {
                "in_channels": {
                    "value": "in_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_123": {
                "num_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_136": {
                "tensors": {
                    "value": "[gate_1, gate_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/discriminator.py": {
        "torch": {
            "Conv3d_11": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_17": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool3d_21": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(6, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_24": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout3d_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Softmax_26": {
                "variable": {
                    "value": "self.Softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv0(map)",
                            "Call"
                        ],
                        [
                            "self.conv0(map)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "image_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(image)",
                            "Call"
                        ],
                        [
                            "self.conv1(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_72": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_75": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv0(map)",
                            "Call"
                        ],
                        [
                            "self.conv0(map)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "image_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(image)",
                            "Call"
                        ],
                        [
                            "self.conv1(feature)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/networks/efficient_encoder.py": {
        "torch": {
            "Parameter_65": {
                "variable": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.weight.detach()",
                            "Call"
                        ],
                        [
                            "weight.sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "weight[:, :2] * (3.0 / 2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(module.out_channels, module.in_channels // module.groups, *module.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_59": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/efficientunet.py": {
        "torch": {
            "interpolate_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.attention2(x)",
                            "Call"
                        ],
                        [
                            "self.center(head)",
                            "Call"
                        ],
                        [
                            "decoder_block(x, skip)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[DecoderBlock(in_ch, skip_ch, out_ch, **kwargs) for (in_ch, skip_ch, out_ch) in zip(in_channels, skip_channels, out_channels)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Conv2d_207": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "decoder_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_117": {
                "variable": {
                    "value": "self.center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/encoder_tool.py": {
        "torch": {
            "Parameter_62": {
                "variable": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.weight.detach()",
                            "Call"
                        ],
                        [
                            "weight.sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "weight[:, :2] * (3.0 / 2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(module.out_channels, module.in_channels // module.groups, *module.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/enet.py": {
        "torch": {
            "Conv2d_41": {
                "variable": {
                    "value": "self.main_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels - in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_50": {
                "variable": {
                    "value": "self.ext_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(main, ext)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.ext_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channels, internal_channels, kernel_size=1, stride=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.ext_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(internal_channels, channels, kernel_size=1, stride=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_188": {
                "variable": {
                    "value": "self.ext_regul",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_266": {
                "variable": {
                    "value": "self.main_max1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "return_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_276": {
                "variable": {
                    "value": "self.ext_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, internal_channels, kernel_size=2, stride=2, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_285": {
                "variable": {
                    "value": "self.ext_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(internal_channels, internal_channels, kernel_size=3, stride=1, padding=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_295": {
                "variable": {
                    "value": "self.ext_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(internal_channels, out_channels, kernel_size=1, stride=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_303": {
                "variable": {
                    "value": "self.ext_regul",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_324": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ext.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "ch_ext - ch_main",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ext.size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ext.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_332": {
                "variable": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(main, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "self.main_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_400": {
                "variable": {
                    "value": "self.main_unpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_407": {
                "variable": {
                    "value": "self.ext_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, internal_channels, kernel_size=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_413": {
                "variable": {
                    "value": "self.ext_tconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_419": {
                "variable": {
                    "value": "self.ext_tconv1_bnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_423": {
                "variable": {
                    "value": "self.ext_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(internal_channels, out_channels, kernel_size=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_428": {
                "variable": {
                    "value": "self.ext_regul",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_561": {
                "variable": {
                    "value": "self.transposed_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.ext_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(internal_channels, internal_channels, kernel_size=(kernel_size, 1), stride=1, padding=(padding, 0), dilation=dilation, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.ext_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(internal_channels, internal_channels, kernel_size=kernel_size, stride=1, padding=padding, dilation=dilation, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_145": {
                "num_features": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_186": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_277": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_282": {
                "num_features": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_286": {
                "in_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_292": {
                "num_features": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_296": {
                "in_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_301": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_395": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_396": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_408": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_410": {
                "num_features": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_424": {
                "in_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_426": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_167": {
                "num_features": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(n, ch_ext - ch_main, h, w)",
                            "Call"
                        ],
                        [
                            "padding.cuda()",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_177": {
                "num_features": {
                    "value": "internal_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/networks/grid_attention_layer.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.in_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_96": {
                "variable": {
                    "value": "phi_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.phi(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "theta_x_size[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x + phi_g",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_100": {
                "variable": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.psi(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_103": {
                "variable": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(self.psi(f))",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(self.psi(f))",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.softmax(f, dim=2).view(batch_size, 1, *theta_x.size()[2:])",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.softmax(psi_f.view(batch_size, 1, -1), dim=2)",
                            "Call"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "psi_f_flat / psi_f_sum",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "psi_f_flat / psi_f_sum",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "(psi_f_flat - psi_f_min) / (psi_f_max - psi_f_min).expand_as(psi_f_flat)",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(psi_f)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "upsample_121": {
                "variable": {
                    "value": "phi_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.phi(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "theta_x_size[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_122": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x + phi_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "variable": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.psi(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_128": {
                "variable": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(self.psi(f))",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(self.psi(f))",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.softmax(f, dim=2).view(batch_size, 1, *theta_x.size()[2:])",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.softmax(psi_f.view(batch_size, 1, -1), dim=2)",
                            "Call"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "psi_f_flat / psi_f_sum",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "psi_f_flat / psi_f_sum",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "(psi_f_flat - psi_f_min) / (psi_f_max - psi_f_min).expand_as(psi_f_flat)",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(psi_f)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "upsample_147": {
                "variable": {
                    "value": "phi_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.phi(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "theta_x_size[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_148": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x + phi_g",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(theta_x + phi_g, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.softplus(theta_x + phi_g)",
                            "Call"
                        ],
                        [
                            "F.relu(theta_x + phi_g, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.psi(f).view(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "theta_x + phi_g",
                            "BinOp"
                        ],
                        [
                            "self.nl1(f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_155": {
                "variable": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(self.psi(f))",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(self.psi(f))",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.softmax(f, dim=2).view(batch_size, 1, *theta_x.size()[2:])",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.softmax(psi_f.view(batch_size, 1, -1), dim=2)",
                            "Call"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "psi_f_flat / psi_f_sum",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "psi_f_flat / psi_f_sum",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "(psi_f_flat - psi_f_min) / (psi_f_max - psi_f_min).expand_as(psi_f_flat)",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(psi_f)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "upsample_308": {
                "variable": {
                    "value": "phi_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.phi(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "theta_x_size[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ],
                        [
                            "theta_x.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "upsample_352": {
                "variable": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(self.psi(f))",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(self.psi(f))",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.softmax(f, dim=2).view(batch_size, 1, *theta_x.size()[2:])",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "F.softmax(psi_f.view(batch_size, 1, -1), dim=2)",
                            "Call"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "F.upsample(sigm_psi_f, size=input_size[2:], mode=self.upsample_mode)",
                            "Call"
                        ],
                        [
                            "psi_f_flat / psi_f_sum",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "psi_f_flat / psi_f_sum",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "(psi_f_flat - psi_f_min) / (psi_f_max - psi_f_min).expand_as(psi_f_flat)",
                            "BinOp"
                        ],
                        [
                            "sigm_psi_f.view(batch_size, 1, *theta_x_size[2:])",
                            "Call"
                        ],
                        [
                            "F.sigmoid(psi_f)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_319": {
                "variable": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psi_f.view(batch_size, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.in_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_279": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_280": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_281": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_282": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_323": {
                "variable": {
                    "value": "psi_f_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psi_f_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "psi_f_flat - psi_f_min",
                            "BinOp"
                        ],
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_396": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_397": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_333": {
                "variable": {
                    "value": "psi_f_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psi_f_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "psi_f_flat - psi_f_min",
                            "BinOp"
                        ],
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_253": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_347": {
                "variable": {
                    "value": "sigm_psi_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psi_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.psi(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_340": {
                "input": {
                    "value": "psi_f_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "psi_f_flat - psi_f_min",
                            "BinOp"
                        ],
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_341": {
                "input": {
                    "value": "psi_f_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "psi_f_flat - psi_f_min",
                            "BinOp"
                        ],
                        [
                            "psi_f.view(batch_size, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/networks_other.py": {
        "torch": {
            "LambdaLR_101": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_438": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_440": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_442": {
                "variable": {
                    "value": "uprelu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_471": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_523": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normal_20": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "orthogonal_56": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_103": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_270": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_272": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_389": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_446": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_22": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "orthogonal_58": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_105": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_314": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_315": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_318": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_340": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_341": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_373": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_386": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_453": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_460": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_477": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_493": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_494": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_512": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_515": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_518": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "normal_24": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_36": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_60": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_108": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_323": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_326": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_334": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_339": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_363": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_375": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_379": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_503": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_506": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_110": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_365": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_381": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_123": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_136": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_467": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/neural_network.py": {
        "torch": {
            "zeros_561": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_621": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0], self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[maybe_to_torch(i) if not isinstance(i, torch.Tensor) else i for i in d]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(d).float()",
                            "Call"
                        ],
                        [
                            "data[:, s - extra_slices:s + extra_slices + 1]",
                            "Subscript"
                        ],
                        [
                            "d.reshape((-1, d.shape[-2], d.shape[-1]))",
                            "Call"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_369": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_395": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_400": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i.cuda(gpu_id, non_blocking=non_blocking) for i in data]",
                            "ListComp"
                        ],
                        [
                            "data.cuda(gpu_id, non_blocking=non_blocking)",
                            "Call"
                        ],
                        [
                            "pad_nd_image(x, patch_size, pad_border_mode, pad_kwargs, True, None)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "pad_nd_image(x, min_size, pad_border_mode, pad_kwargs, True, self.input_shape_must_be_divisible_by)",
                            "Call"
                        ],
                        [
                            "pad_nd_image(x, min_size, pad_border_mode, pad_kwargs, True, self.input_shape_must_be_divisible_by)",
                            "Call"
                        ],
                        [
                            "pad_nd_image(x, patch_size, pad_border_mode, pad_kwargs, True, None)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_405": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_704": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_729": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_734": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i.cuda(gpu_id, non_blocking=non_blocking) for i in data]",
                            "ListComp"
                        ],
                        [
                            "data.cuda(gpu_id, non_blocking=non_blocking)",
                            "Call"
                        ],
                        [
                            "pad_nd_image(x, patch_size, pad_border_mode, pad_kwargs, True, None)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "pad_nd_image(x, min_size, pad_border_mode, pad_kwargs, True, self.input_shape_must_be_divisible_by)",
                            "Call"
                        ],
                        [
                            "pad_nd_image(x, min_size, pad_border_mode, pad_kwargs, True, self.input_shape_must_be_divisible_by)",
                            "Call"
                        ],
                        [
                            "pad_nd_image(x, patch_size, pad_border_mode, pad_kwargs, True, None)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_739": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_390": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_724": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_581": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_585": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_589": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_593": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_597": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_601": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_606": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_641": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_645": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_649": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_580": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_584": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_588": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_592": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_596": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_600": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_605": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_640": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_644": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_648": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/nnunet.py": {
        "torch": {
            "softmax_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[d](x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[-1](x)",
                            "Call"
                        ],
                        [
                            "self.td[d](x)",
                            "Call"
                        ],
                        [
                            "self.tu[u](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skips[-(u + 1)]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_localization[u](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[basic_block(input_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs_first_conv, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs)] + [basic_block(output_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs) for _ in range(num_convs - 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_399": {
                "variable": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_401": {
                "variable": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_402": {
                "variable": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_403": {
                "variable": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_404": {
                "variable": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_182": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[d](x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[-1](x)",
                            "Call"
                        ],
                        [
                            "self.td[d](x)",
                            "Call"
                        ],
                        [
                            "self.tu[u](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skips[-(u + 1)]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_localization[u](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_406": {
                "variable": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_426": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[-(u + 1)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_334": {
                "*args": {
                    "value": "StackedConvLayers(input_features, output_features, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, first_stride, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_372": {
                "*args": {
                    "value": "StackedConvLayers(n_features_after_tu_and_concat, nfeatures_from_skip, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/pnet.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.in1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.out_chns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.out_chns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_32": {
                "variable": {
                    "value": "self.ac1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "variable": {
                    "value": "self.ac2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_54": {
                "variable": {
                    "value": "self.ac1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "variable": {
                    "value": "self.ac2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_chns // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_chns // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_74": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_75": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_76": {
                "variable": {
                    "value": "self.ac1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "conx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2, x3, x4, x5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/swin_transformer_unet_skip_expand_decoder_sys.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_91": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_92": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_94": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_108": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_110": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_113": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_322": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_391": {
                "variable": {
                    "value": "self.expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_444": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SwinTransformerBlock(dim=dim, input_resolution=input_resolution, num_heads=num_heads, window_size=window_size, shift_size=0 if i % 2 == 0 else window_size // 2, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_517": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SwinTransformerBlock(dim=dim, input_resolution=input_resolution, num_heads=num_heads, window_size=window_size, shift_size=0 if i % 2 == 0 else window_size // 2, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_573": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_660": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_667": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_687": {
                "variable": {
                    "value": "self.layers_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_688": {
                "variable": {
                    "value": "self.concat_back_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "img_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_255": {
                "variable": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "variable"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "self.expand(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "rearrange(x, 'b h w (p1 p2 c)-> b (h p1) (w p2) c', p1=2, p2=2, c=C // 4)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, C // 4)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.expand(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "rearrange(x, 'b h w (p1 p2 c)-> b (h p1) (w p2) c', p1=self.dim_scale, p2=self.dim_scale, c=C // self.dim_scale ** 2)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, self.output_dim)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.norm_up(x)",
                            "Call"
                        ],
                        [
                            "layer_up(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_downsample[3 - inx]], -1)",
                            "Call"
                        ],
                        [
                            "self.concat_back_dim[inx](x)",
                            "Call"
                        ],
                        [
                            "layer_up(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, 4 * H, 4 * W, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.output(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.forward_up_features(x, x_downsample)",
                            "Call"
                        ],
                        [
                            "self.up_x4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_278": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_656": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_723": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_93": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_363": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_767": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_downsample[3 - inx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_657": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_663": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_690": {
                "in_features": {
                    "value": "2 * int(embed_dim * 2 ** (self.num_layers - 1 - i_layer))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(embed_dim * 2 ** (self.num_layers - 1 - i_layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_691": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/unet.py": {
        "torch": {
            "dropout_273": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.dropout(x, p)",
                            "Call"
                        ],
                        [
                            "x.mul(drop_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat([x2, x1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up1(x4, x3)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x1)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x0)",
                            "Call"
                        ],
                        [
                            "self.up1(x4, x3)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x1)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x0)",
                            "Call"
                        ],
                        [
                            "self.up1(x4, x3)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x1)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x0)",
                            "Call"
                        ],
                        [
                            "self.feature_based_noise(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_278": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.dropout(x, p)",
                            "Call"
                        ],
                        [
                            "x.mul(drop_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat([x2, x1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.up1(x4, x3)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x1)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x0)",
                            "Call"
                        ],
                        [
                            "self.up1(x4, x3)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x1)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x0)",
                            "Call"
                        ],
                        [
                            "self.up1(x4, x3)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x1)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x0)",
                            "Call"
                        ],
                        [
                            "self.feature_based_noise(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_279": {
                "variable": {
                    "value": "(max_val, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "attention.view(x.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.out_conv_dp4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "variable": {
                    "value": "self.out_conv_dp3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "variable": {
                    "value": "self.out_conv_dp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.out_conv_dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_194": {
                "variable": {
                    "value": "dp3_out_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dp3_out_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_conv_dp3(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp3_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp3(Dropout(x, p=0.5))",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp3(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp3_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_198": {
                "variable": {
                    "value": "dp2_out_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dp2_out_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_conv_dp2(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp2_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp2(FeatureDropout(x))",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp2(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp2_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_202": {
                "variable": {
                    "value": "dp1_out_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dp1_out_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_conv_dp1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp1_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp1(self.feature_noise(x))",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp1_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_228": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "variable": {
                    "value": "self.out_conv_dp4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "variable": {
                    "value": "self.out_conv_dp3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "variable": {
                    "value": "self.out_conv_dp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "variable": {
                    "value": "self.out_conv_dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ft_chns[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_251": {
                "variable": {
                    "value": "dp3_out_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dp3_out_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_conv_dp3(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp3_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp3(Dropout(x, p=0.5))",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp3(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp3_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_258": {
                "variable": {
                    "value": "dp2_out_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dp2_out_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_conv_dp2(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp2_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp2(FeatureDropout(x))",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp2(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp2_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_265": {
                "variable": {
                    "value": "dp1_out_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dp1_out_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_conv_dp1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp1_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp1(self.feature_noise(x))",
                            "Call"
                        ],
                        [
                            "self.out_conv_dp1(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dp1_out_seg, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ],
                        [
                            "self.decoder(feature, shape)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Uniform_291": {
                "variable": {
                    "value": "self.uni_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-uniform_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "uniform_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_74": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_77": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_p",
                            "Method Argument"
                        ],
                        [
                            "dropout_p",
                            "Method Argument"
                        ],
                        [
                            "dropout_p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_56": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/unet_3D.py": {
        "torch": {
            "MaxPool3d_35": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_39": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_43": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_47": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_59": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/unet_3D_dv_semi.py": {
        "torch": {
            "MaxPool3d_28": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_32": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_36": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_40": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_58": {
                "variable": {
                    "value": "self.dsv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[64, 128, 256, 512, 1024]",
                            "List"
                        ],
                        [
                            "[int(x / self.feature_scale) for x in filters]",
                            "ListComp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout3d_61": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout3d_62": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout3d_63": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout3d_64": {
                "variable": {
                    "value": "self.dropout4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/utils.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.cb_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(in_channels), int(n_filters), kernel_size=k_size, padding=padding, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.dcb_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(int(in_channels), int(n_filters), kernel_size=k_size, padding=padding, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.cbr_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(in_channels), int(n_filters), kernel_size=k_size, padding=padding, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.dcbr_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(int(in_channels), int(n_filters), kernel_size=k_size, padding=padding, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_233": {
                "variable": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_256": {
                "variable": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_264": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_275": {
                "variable": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_288": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_features // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_289": {
                "variable": {
                    "value": "self.nonlin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_291": {
                "variable": {
                    "value": "self.nonlin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool3d_295": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_324": {
                "variable": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_325": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_339": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_363": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_433": {
                "variable": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "newsize[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "newsize",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_458": {
                "variable": {
                    "value": "self.dsv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, init_stride, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, init_stride, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, init_stride, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, init_stride, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, in_size // 2, (1, 1, 1), (1, 1, 1), (0, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size // 2 * self.fmap_size[0] * self.fmap_size[1] * self.fmap_size[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, in_size // 2, (1, 1, 1), (1, 1, 1), (0, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size // 2 * self.fmap_size[0] * self.fmap_size[1] * self.fmap_size[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, (1, 1, 1), (0, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, (1, 1, 1), (0, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_220": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_222": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_242": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Upsample_245": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_309": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Upsample_313": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_52": {
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_234": {
                "tensors": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_458": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_459": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_104": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "init_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_105": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_108": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_111": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "init_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_113": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_131": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "init_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_132": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_134": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_135": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_137": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_138": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_141": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "init_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_143": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_145": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_165": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_166": {
                "num_features": {
                    "value": "in_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_168": {
                "output_size": {
                    "value": "self.fmap_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_173": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_175": {
                "output_size": {
                    "value": "self.fmap_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_197": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_198": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_199": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_202": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_203": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/vision_transformer.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.PRETRAIN_CKPT",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/networks/vnet.py": {
        "torch": {
            "randn_253": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv3d_175": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout3d_177": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_126": {
                "scale_factor": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_127": {
                "in_channels": {
                    "value": "n_filters_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_16": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_in",
                            "variable"
                        ],
                        [
                            "n_filters_out",
                            "variable"
                        ],
                        [
                            "n_filters_in",
                            "variable"
                        ],
                        [
                            "n_filters_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_45": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_in",
                            "variable"
                        ],
                        [
                            "n_filters_out",
                            "variable"
                        ],
                        [
                            "n_filters_in",
                            "variable"
                        ],
                        [
                            "n_filters_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_73": {
                "in_channels": {
                    "value": "n_filters_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_83": {
                "in_channels": {
                    "value": "n_filters_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_100": {
                "in_channels": {
                    "value": "n_filters_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_110": {
                "in_channels": {
                    "value": "n_filters_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ],
                        [
                            "n_filters_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_129": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_18": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_47": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_75": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_102": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_131": {
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_20": {
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_49": {
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_77": {
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_104": {
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_133": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_22": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_51": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_79": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_106": {
                "num_features": {
                    "value": "n_filters_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ],
                        [
                            "n_filters_out",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/test_2D_fully.py": {
        "torch": {
            "from_numpy_49": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[ind, :, :]",
                            "Subscript"
                        ],
                        [
                            "zoom(slice, (256 / x, 256 / y), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(out_main, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_95": {
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(FLAGS.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_57": {
                "input": {
                    "value": "out_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input)",
                            "Call"
                        ],
                        [
                            "net(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/test_3D.py": {
        "torch": {
            "load_30": {
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(FLAGS.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/test_3D_util.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "test_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[xs:xs + patch_size[0], ys:ys + patch_size[1], zs:zs + patch_size[2]]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(test_patch, axis=0), axis=0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test_patch).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(test_patch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/test_urpc.py": {
        "torch": {
            "load_35": {
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(FLAGS.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/test_urpc_util.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "test_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[xs:xs + patch_size[0], ys:ys + patch_size[1], zs:zs + patch_size[2]]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(test_patch, axis=0), axis=0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test_patch).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "y_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(test_patch)",
                            "Call"
                        ],
                        [
                            "torch.softmax(y_main, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "y_aux1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_aux1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(test_patch)",
                            "Call"
                        ],
                        [
                            "torch.softmax(y_aux1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "y_aux2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_aux2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(test_patch)",
                            "Call"
                        ],
                        [
                            "torch.softmax(y_aux2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "y_aux3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_aux3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(test_patch)",
                            "Call"
                        ],
                        [
                            "torch.softmax(y_aux3, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/train_adversarial_network_2D.py": {
        "torch": {
            "DataLoader_114": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_123": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "DAN_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "DAN.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.DAN_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_127": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_267": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_268": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "DAN_target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * args.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_161": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "DAN_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DAN(outputs_soft[args.labeled_bs:], volume_batch[args.labeled_bs:])",
                            "Call"
                        ],
                        [
                            "DAN(outputs_soft, volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "DAN_target[:args.labeled_bs].long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_175": {
                "variable": {
                    "value": "DAN_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "DAN_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DAN(outputs_soft[args.labeled_bs:], volume_batch[args.labeled_bs:])",
                            "Call"
                        ],
                        [
                            "DAN(outputs_soft, volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "DAN_target.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_201": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_245": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_201": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_236": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_adversarial_network_3D.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BraTS2019(base_dir=train_data_path, split='train', num=None, transform=transforms.Compose([RandomRotFlip(), RandomCrop(args.patch_size), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "DAN_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "DAN.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.DAN_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_119": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_255": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_256": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "DAN_target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_140": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_152": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "DAN_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DAN(outputs_soft[args.labeled_bs:], volume_batch[args.labeled_bs:])",
                            "Call"
                        ],
                        [
                            "DAN(outputs_soft, volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "DAN_target[:args.labeled_bs].long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_166": {
                "variable": {
                    "value": "DAN_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "DAN_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DAN(outputs_soft[args.labeled_bs:], volume_batch[args.labeled_bs:])",
                            "Call"
                        ],
                        [
                            "DAN(outputs_soft, volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "DAN_target.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_233": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_219": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_220": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_cross_consistency_training_2D.py": {
        "torch": {
            "DataLoader_106": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_125": {
                "variable": {
                    "value": "kl_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_261": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_262": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "outputs_aux1_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "outputs_aux2_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "outputs_aux3_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_162": {
                "variable": {
                    "value": "consistency_loss_aux1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs_soft[args.labeled_bs:] - outputs_aux1_soft[args.labeled_bs:]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "consistency_loss_aux2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs_soft[args.labeled_bs:] - outputs_aux2_soft[args.labeled_bs:]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_166": {
                "variable": {
                    "value": "consistency_loss_aux3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs_soft[args.labeled_bs:] - outputs_aux3_soft[args.labeled_bs:]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_239": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_195": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_229": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_230": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_cross_pseudo_supervision_2D.py": {
        "torch": {
            "DataLoader_144": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_153": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_155": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_157": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_340": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_341": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "outputs_soft1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_178": {
                "variable": {
                    "value": "outputs_soft2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_186": {
                "variable": {
                    "value": "pseudo_outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_soft1[args.labeled_bs:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_187": {
                "variable": {
                    "value": "pseudo_outputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_soft2[args.labeled_bs:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_225": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs1, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_229": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_313": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_318": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_225": {
                "input": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_229": {
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_264": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_296": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_297": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_cross_pseudo_supervision_3D.py": {
        "torch": {
            "DataLoader_130": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BraTS2019(base_dir=train_data_path, split='train', num=None, transform=transforms.Compose([RandomRotFlip(), RandomCrop(args.patch_size), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_133": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_135": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_140": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_305": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_306": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "outputs_soft1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_158": {
                "variable": {
                    "value": "outputs_soft2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_168": {
                "variable": {
                    "value": "pseudo_outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_soft1[args.labeled_bs:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_169": {
                "variable": {
                    "value": "pseudo_outputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_soft2[args.labeled_bs:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_283": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_240": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_241": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_263": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_264": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_cross_teaching_between_cnn_transformer_2D.py": {
        "torch": {
            "DataLoader_192": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_198": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_201": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_203": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_205": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_390": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_391": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_223": {
                "variable": {
                    "value": "outputs_soft1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_226": {
                "variable": {
                    "value": "outputs_soft2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "variable": {
                    "value": "pseudo_outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_soft1[args.labeled_bs:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_237": {
                "variable": {
                    "value": "pseudo_outputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_soft2[args.labeled_bs:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_278": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs1, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_282": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_363": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_368": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_278": {
                "input": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_282": {
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_318": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_319": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_353": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_354": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_deep_co_training_2D.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_251": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_252": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_140": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rot90_144": {
                "variable": {
                    "value": "rotated_unlabeled_volume_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unlabeled_volume_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_batch[args.labeled_bs:]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "rot_times",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randrange(0, 4)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_147": {
                "variable": {
                    "value": "unlabeled_rot_outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unlabeled_rot_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(rotated_unlabeled_volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_185": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_229": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_157": {
                "input": {
                    "value": "(unlabeled_rot_outputs_soft - torch.rot90(outputs_soft[args.labeled_bs:].detach(), rot_times, [2, 3])) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_220": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "rot90_157": {
                "input": {
                    "value": "outputs_soft[args.labeled_bs:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "rot_times",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randrange(0, 4)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "code/train_entropy_minimization_2D.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_242": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_243": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_140": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_176": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_176": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_210": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_211": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_entropy_minimization_3D.py": {
        "torch": {
            "DataLoader_106": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BraTS2019(base_dir=train_data_path, split='train', num=None, transform=transforms.Compose([RandomRotFlip(), RandomCrop(args.patch_size), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_113": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_230": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_231": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_208": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_194": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_195": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_fixmatch_cta.py": {
        "torch": {
            "SGD_189": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_217": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transform, ops_weak=ops_weak, ops_strong=ops_strong)",
                            "Call"
                        ],
                        [
                            "db_train",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_229": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_411": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_412": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_269": {
                "variable": {
                    "value": "outputs_weak_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_weak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(weak_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "variable": {
                    "value": "outputs_strong_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_strong",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(strong_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(outputs_strong_soft, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "ema_outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_model(weak_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_276": {
                "variable": {
                    "value": "pseudo_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_outputs_soft.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_321": {
                "variable": {
                    "value": "outputs_strong",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_strong_soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(outputs_strong, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "count_nonzero_261": {
                "input": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampled_batch['label_aug']",
                            "Subscript"
                        ],
                        [
                            "label_batch.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/train_fixmatch_standard_augs.py": {
        "torch": {
            "SGD_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([WeakStrongAugment(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_245": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_250": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "il_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "strong",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strong",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(args.batch_size, args.num_classes, args.patch_size[0] * args.patch_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_170": {
                "variable": {
                    "value": "as_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "as_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_comp_loss(weak=outputs_weak_soft, strong=outputs_strong_soft)",
                            "Call"
                        ],
                        [
                            "1 - Categorical(probs=il_output).entropy() / np.log(args.patch_size[0] * args.patch_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.mean(as_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_172": {
                "variable": {
                    "value": "comp_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weak.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_408": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_409": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_279": {
                "variable": {
                    "value": "outputs_weak_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_weak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(weak_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs_weak, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "outputs_strong_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_strong",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(strong_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_286": {
                "variable": {
                    "value": "pseudo_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_weak_masked[args.labeled_bs:].detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_328": {
                "variable": {
                    "value": "outputs_weak",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs_weak, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Categorical_168": {
                "probs": {
                    "value": "il_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(strong, (args.batch_size, args.num_classes, args.patch_size[0] * args.patch_size[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_174": {
                "input": {
                    "value": "torch.negative(strong)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "negative_174": {
                "input": {
                    "value": "strong",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strong",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_328": {
                "input": {
                    "value": "outputs_weak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(weak_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs_weak, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/train_fully_supervised_2D.py": {
        "torch": {
            "DataLoader_84": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=labeled_slice, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_202": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_203": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_136": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_136": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_171": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_fully_supervised_3D.py": {
        "torch": {
            "DataLoader_74": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BraTS2019(base_dir=train_data_path, split='train', num=args.labeled_num, transform=transforms.Compose([RandomRotFlip(), RandomCrop(args.patch_size), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_188": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_189": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_152": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_153": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_interpolation_consistency_training_2D.py": {
        "torch": {
            "DataLoader_129": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_139": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_285": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_286": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "ict_mix_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ict_mix_factors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.beta(args.ict_alpha, args.ict_alpha, size=(args.labeled_bs // 2, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(ict_mix_factors, dtype=torch.float).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "input_volume_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labeled_volume_batch, batch_ux_mixed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_187": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs_soft[args.labeled_bs:] - batch_pred_mixed) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "variable": {
                    "value": "ema_output_ux0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_model(unlabeled_volume_batch_0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_176": {
                "variable": {
                    "value": "ema_output_ux1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_model(unlabeled_volume_batch_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_216": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_216": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_254": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_interpolation_consistency_training_3D.py": {
        "torch": {
            "DataLoader_119": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BraTS2019(base_dir=train_data_path, split='train', num=None, transform=transforms.Compose([RandomRotFlip(), RandomCrop(args.patch_size), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_127": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_268": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_269": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "ict_mix_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ict_mix_factors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.beta(args.ict_alpha, args.ict_alpha, size=(args.labeled_bs // 2, 1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(ict_mix_factors, dtype=torch.float).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "input_volume_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labeled_volume_batch, batch_ux_mixed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_160": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs_soft[args.labeled_bs:] - batch_pred_mixed) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_162": {
                "variable": {
                    "value": "ema_output_ux0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_model(unlabeled_volume_batch_0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_164": {
                "variable": {
                    "value": "ema_output_ux1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_model(unlabeled_volume_batch_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_232": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_233": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_mean_teacher_2D.py": {
        "torch": {
            "DataLoader_127": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_137": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_267": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_268": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_154": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn_like(unlabeled_volume_batch) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_162": {
                "variable": {
                    "value": "ema_output_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema_model(ema_inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_173": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs_soft[args.labeled_bs:] - ema_output_soft) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_201": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_245": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_154": {
                "input": {
                    "value": "unlabeled_volume_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_batch[args.labeled_bs:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_201": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_236": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_mean_teacher_3D.py": {
        "torch": {
            "DataLoader_115": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BraTS2019(base_dir=train_data_path, split='train', num=None, transform=transforms.Compose([RandomRotFlip(), RandomCrop(args.patch_size), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_123": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_249": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_250": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_140": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn_like(unlabeled_volume_batch) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_156": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs_soft[args.labeled_bs:] - ema_output_soft) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "ema_output_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema_model(ema_inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_227": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_140": {
                "input": {
                    "value": "unlabeled_volume_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_batch[args.labeled_bs:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_213": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_214": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_regularized_dropout_2D.py": {
        "torch": {
            "DataLoader_144": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_153": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_155": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_157": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_330": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_331": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "outputs_soft1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_178": {
                "variable": {
                    "value": "outputs_soft2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_221": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs1, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_225": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_303": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_308": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_221": {
                "input": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_225": {
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_260": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_292": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_293": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_regularized_dropout_3D.py": {
        "torch": {
            "DataLoader_132": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BraTS2019(base_dir=train_data_path, split='train', num=None, transform=transforms.Compose([RandomRotFlip(), RandomCrop(args.patch_size), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_135": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_137": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_142": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_303": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_304": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "outputs_soft1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_160": {
                "variable": {
                    "value": "outputs_soft2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model2(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_276": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_281": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_238": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_239": {
                "obj": {
                    "value": "model1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_261": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'model1_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance1, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model1_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'model2_iter_{}_dice_{}.pth'.format(iter_num, round(best_performance2, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_262": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model1.pth'.format(args.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, '{}_best_model2.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_uncertainty_aware_mean_teacher_2D.py": {
        "torch": {
            "DataLoader_126": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_285": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_286": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_153": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn_like(unlabeled_volume_batch) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_158": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[stride * T, num_classes, w, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([stride * T, num_classes, w, h]).cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "preds.reshape(T, stride, num_classes, w, h)",
                            "Call"
                        ],
                        [
                            "torch.mean(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([stride * T, num_classes, w, h]).cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "preds.reshape(T, stride, num_classes, w, h)",
                            "Call"
                        ],
                        [
                            "torch.mean(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_219": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_177": {
                "input": {
                    "value": "preds * torch.log(preds + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_190": {
                "input": {
                    "value": "mask * consistency_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_153": {
                "input": {
                    "value": "unlabeled_volume_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_batch[args.labeled_bs:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_168": {
                "input": {
                    "value": "torch.randn_like(volume_batch_r) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_219": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_254": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_177": {
                "input": {
                    "value": "preds + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_191": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(uncertainty < threshold).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_168": {
                "input": {
                    "value": "volume_batch_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unlabeled_volume_batch.repeat(2, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_uncertainty_aware_mean_teacher_3D.py": {
        "torch": {
            "DataLoader_116": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BraTS2019(base_dir=train_data_path, split='train', num=None, transform=transforms.Compose([RandomRotFlip(), RandomCrop(args.patch_size), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_124": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_272": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_273": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_141": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn_like(unlabeled_volume_batch) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_146": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[stride * T, 2, d, w, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([stride * T, 2, d, w, h]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.softmax(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "preds.reshape(T, stride, 2, d, w, h)",
                            "Call"
                        ],
                        [
                            "torch.mean(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_163": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([stride * T, 2, d, w, h]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.softmax(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "preds.reshape(T, stride, 2, d, w, h)",
                            "Call"
                        ],
                        [
                            "torch.mean(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_165": {
                "input": {
                    "value": "preds * torch.log(preds + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_178": {
                "input": {
                    "value": "mask * consistency_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_250": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_141": {
                "input": {
                    "value": "unlabeled_volume_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_batch[args.labeled_bs:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_156": {
                "input": {
                    "value": "torch.randn_like(volume_batch_r) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_237": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_165": {
                "input": {
                    "value": "preds + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_179": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(uncertainty < threshold).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_156": {
                "input": {
                    "value": "volume_batch_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unlabeled_volume_batch.repeat(2, 1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_uncertainty_rectified_pyramid_consistency_2D.py": {
        "torch": {
            "DataLoader_106": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='train', num=None, transform=transforms.Compose([RandomGenerator(args.patch_size)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSets(base_dir=args.root_path, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_125": {
                "variable": {
                    "value": "kl_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_295": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_296": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "outputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "outputs_aux1_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "outputs_aux2_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "outputs_aux3_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "variance_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_distance(torch.log(outputs_soft[args.labeled_bs:]), preds[args.labeled_bs:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_166": {
                "variable": {
                    "value": "exp_variance_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance_main",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_168": {
                "variable": {
                    "value": "variance_aux1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_distance(torch.log(outputs_aux1_soft[args.labeled_bs:]), preds[args.labeled_bs:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_170": {
                "variable": {
                    "value": "exp_variance_aux1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance_aux1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "variance_aux2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_distance(torch.log(outputs_aux2_soft[args.labeled_bs:]), preds[args.labeled_bs:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_174": {
                "variable": {
                    "value": "exp_variance_aux2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance_aux2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_176": {
                "variable": {
                    "value": "variance_aux3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_distance(torch.log(outputs_aux3_soft[args.labeled_bs:]), preds[args.labeled_bs:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_178": {
                "variable": {
                    "value": "exp_variance_aux3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance_aux3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_229": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_185": {
                "input": {
                    "value": "exp_variance_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-variance_main)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_190": {
                "input": {
                    "value": "exp_variance_aux1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-variance_aux1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_195": {
                "input": {
                    "value": "exp_variance_aux2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-variance_aux2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_200": {
                "input": {
                    "value": "exp_variance_aux3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-variance_aux3)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_273": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_165": {
                "input": {
                    "value": "outputs_soft[args.labeled_bs:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_169": {
                "input": {
                    "value": "outputs_aux1_soft[args.labeled_bs:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_173": {
                "input": {
                    "value": "outputs_aux2_soft[args.labeled_bs:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_177": {
                "input": {
                    "value": "outputs_aux3_soft[args.labeled_bs:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_184": {
                "input": {
                    "value": "consistency_dist_main * exp_variance_main",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_189": {
                "input": {
                    "value": "consistency_dist_aux1 * exp_variance_aux1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_194": {
                "input": {
                    "value": "consistency_dist_aux2 * exp_variance_aux2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_199": {
                "input": {
                    "value": "consistency_dist_aux3 * exp_variance_aux3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_229": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ],
                        [
                            "torch.argmax(torch.softmax(outputs, dim=1), dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_264": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_uncertainty_rectified_pyramid_consistency_3D.py": {
        "torch": {
            "DataLoader_107": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BraTS2019(base_dir=train_data_path, split='train', num=None, transform=transforms.Compose([RandomRotFlip(), RandomCrop(args.patch_size), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, batch_size, batch_size - args.labeled_bs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.base_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_114": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_124": {
                "variable": {
                    "value": "kl_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_297": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_298": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "outputs_aux1_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "outputs_aux2_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "outputs_aux3_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "outputs_aux4_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_aux4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(volume_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_163": {
                "variable": {
                    "value": "variance_aux1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_distance(torch.log(outputs_aux1_soft[args.labeled_bs:]), preds[args.labeled_bs:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_165": {
                "variable": {
                    "value": "exp_variance_aux1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance_aux1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_167": {
                "variable": {
                    "value": "variance_aux2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_distance(torch.log(outputs_aux2_soft[args.labeled_bs:]), preds[args.labeled_bs:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_169": {
                "variable": {
                    "value": "exp_variance_aux2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance_aux2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_171": {
                "variable": {
                    "value": "variance_aux3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_distance(torch.log(outputs_aux3_soft[args.labeled_bs:]), preds[args.labeled_bs:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_173": {
                "variable": {
                    "value": "exp_variance_aux3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance_aux3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_175": {
                "variable": {
                    "value": "variance_aux4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_distance(torch.log(outputs_aux4_soft[args.labeled_bs:]), preds[args.labeled_bs:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_177": {
                "variable": {
                    "value": "exp_variance_aux4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance_aux4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_184": {
                "input": {
                    "value": "exp_variance_aux1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-variance_aux1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_189": {
                "input": {
                    "value": "exp_variance_aux2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-variance_aux2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_194": {
                "input": {
                    "value": "exp_variance_aux3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-variance_aux3)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_199": {
                "input": {
                    "value": "exp_variance_aux4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-variance_aux4)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_275": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_164": {
                "input": {
                    "value": "outputs_aux1_soft[args.labeled_bs:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_168": {
                "input": {
                    "value": "outputs_aux2_soft[args.labeled_bs:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_172": {
                "input": {
                    "value": "outputs_aux3_soft[args.labeled_bs:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_176": {
                "input": {
                    "value": "outputs_aux4_soft[args.labeled_bs:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_183": {
                "input": {
                    "value": "consistency_dist_aux1 * exp_variance_aux1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_188": {
                "input": {
                    "value": "consistency_dist_aux2 * exp_variance_aux2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_193": {
                "input": {
                    "value": "consistency_dist_aux3 * exp_variance_aux3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_198": {
                "input": {
                    "value": "consistency_dist_aux4 * exp_variance_aux4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_232": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_256": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, 'iter_{}_dice_{}.pth'.format(iter_num, round(best_performance, 4)))",
                            "Call"
                        ],
                        [
                            "os.path.join(snapshot_path, 'iter_' + str(iter_num) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_257": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_path, '{}_best_model.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_232": {
                "input": {
                    "value": "outputs_aux1_soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(outputs_aux1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils/losses.py": {
        "torch": {
            "sum_11": {
                "variable": {
                    "value": "intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_12": {
                "variable": {
                    "value": "y_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_13": {
                "variable": {
                    "value": "z_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score * score",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_22": {
                "variable": {
                    "value": "intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "y_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "self._one_hot_encoder(target)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_24": {
                "variable": {
                    "value": "z_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score",
                            "Method Argument"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_34": {
                "variable": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * torch.sum(p * torch.log(p + 1e-06), dim=1) / torch.tensor(np.log(C)).cuda()",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sum(p * torch.log(p + 1e-06), dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "input_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_102": {
                "variable": {
                    "value": "kl_div",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_log_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.sigmoid(input_logits))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(input_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(target_logits)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(target_logits)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_197": {
                "variable": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * torch.sum(p * torch.log(p + 1e-06), dim=1) / torch.tensor(np.log(C)).cuda()",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sum(p * torch.log(p + 1e-06), dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "kl_div_209": {
                "variable": {
                    "value": "p_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(p, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(q, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_211": {
                "variable": {
                    "value": "q_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(q, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(p, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "input_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_76": {
                "variable": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "input_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_95": {
                "variable": {
                    "value": "input_log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(input_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_98": {
                "variable": {
                    "value": "input_log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "variable": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_116": {
                "input": {
                    "value": "(input1 - input2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_138": {
                "variable": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, input.size(2))",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_173": {
                "variable": {
                    "value": "y_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_174": {
                "variable": {
                    "value": "z_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score * score",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "np.log(C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "np.log(C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_127": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_196": {
                "input": {
                    "value": "p * torch.log(p + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_203": {
                "input": {
                    "value": "p * torch.log(p + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_209": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_210": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_211": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_212": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "p * torch.log(p + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_60": {
                "input": {
                    "value": "p * torch.log(p + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_196": {
                "input": {
                    "value": "p + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_203": {
                "input": {
                    "value": "p + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_32": {
                "input": {
                    "value": "p + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_60": {
                "input": {
                    "value": "p + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/utils/util.py": {
        "torch": {
            "load_68": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_24": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_119": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/val_2D.py": {
        "torch": {
            "from_numpy_26": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[ind, :, :]",
                            "Subscript"
                        ],
                        [
                            "zoom(slice, (patch_size[0] / x, patch_size[1] / y), order=0)",
                            "Call"
                        ],
                        [
                            "image[ind, :, :]",
                            "Subscript"
                        ],
                        [
                            "zoom(slice, (patch_size[0] / x, patch_size[1] / y), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_26": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[ind, :, :]",
                            "Subscript"
                        ],
                        [
                            "zoom(slice, (patch_size[0] / x, patch_size[1] / y), order=0)",
                            "Call"
                        ],
                        [
                            "image[ind, :, :]",
                            "Subscript"
                        ],
                        [
                            "zoom(slice, (patch_size[0] / x, patch_size[1] / y), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(net(input), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(output_main, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_30": {
                "input": {
                    "value": "net(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "input": {
                    "value": "output_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/val_3D.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "test_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[xs:xs + patch_size[0], ys:ys + patch_size[1], zs:zs + patch_size[2]]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(test_patch, axis=0), axis=0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test_patch).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(test_patch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/val_urpc_util.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "test_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[xs:xs + patch_size[0], ys:ys + patch_size[1], zs:zs + patch_size[2]]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(test_patch, axis=0), axis=0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test_patch).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(test_patch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}