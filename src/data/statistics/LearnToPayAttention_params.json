{
    "CUB_finetune/checkpoint_to_npy.py": {
        "tensorflow": {
            "NewCheckpointReader_10": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "CUB_finetune/cifar100_test.py": {
        "tensorflow": {}
    },
    "CUB_finetune/dataset_to_tfrecords.py": {
        "tensorflow": {
            "TFRecordOptions_120": {
                "variable": {
                    "value": "options_zlib",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.ZLIB",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordOptions_121": {
                "variable": {
                    "value": "options_gzip",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.GZIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_122": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "train.tfrecords",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordOptions_142": {
                "variable": {
                    "value": "options_zlib",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.ZLIB",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordOptions_143": {
                "variable": {
                    "value": "options_gzip",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.GZIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_144": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "val.tfrecords",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordOptions_169": {
                "variable": {
                    "value": "options_zlib",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.ZLIB",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordOptions_170": {
                "variable": {
                    "value": "options_gzip",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.GZIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_171": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "test.tfrecords",
                    "type": "str",
                    "possible_values": []
                }
            },
            "string_input_producer_211": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordOptions_212": {
                "variable": {
                    "value": "options_zlib",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.ZLIB",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordOptions_213": {
                "variable": {
                    "value": "options_gzip",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.GZIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordReader_214": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "options": {
                    "value": "options_zlib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.ZLIB)",
                            "Call"
                        ],
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.ZLIB)",
                            "Call"
                        ],
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.ZLIB)",
                            "Call"
                        ],
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.ZLIB)",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_216": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'label': tf.FixedLenFeature([], tf.int64), 'img_raw': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_222": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['img_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [200, 200, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255) - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[200, 200, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_225": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_128": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[train_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[train_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_152": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[val_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[val_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_176": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[test_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[test_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_batch_239": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[train_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[train_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))}))",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[val_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[val_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))}))",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[test_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[test_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))}))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "20 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_246": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[train_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[train_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))}))",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[val_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[val_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))}))",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[test_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[test_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))}))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "20 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_224": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [200, 200, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255) - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Features_128": {
                "feature": {
                    "value": "{'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[train_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[train_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_152": {
                "feature": {
                    "value": "{'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[val_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[val_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_176": {
                "feature": {
                    "value": "{'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[test_labels])), 'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[test_image_raw])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[width])), 'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[height]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_218": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_219": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_129": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[train_labels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_130": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[train_image_raw])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_131": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_132": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[height])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_153": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[val_labels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_154": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[val_image_raw])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_155": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_156": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[height])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_177": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[test_labels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_178": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[test_image_raw])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_179": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_180": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[height])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_129": {
                "value": {
                    "value": "[train_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_130": {
                "value": {
                    "value": "[train_image_raw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_131": {
                "value": {
                    "value": "[width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_132": {
                "value": {
                    "value": "[height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_153": {
                "value": {
                    "value": "[val_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_154": {
                "value": {
                    "value": "[val_image_raw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_155": {
                "value": {
                    "value": "[width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_156": {
                "value": {
                    "value": "[height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_177": {
                "value": {
                    "value": "[test_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_178": {
                "value": {
                    "value": "[test_image_raw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_179": {
                "value": {
                    "value": "[width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_180": {
                "value": {
                    "value": "[height]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CUB_finetune/main.py": {
        "tensorflow": {
            "placeholder_49": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "kp_07",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "kp_05",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_203": {
                "variable": {
                    "value": "X_input",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : train_images",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : test_images",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_204": {
                "variable": {
                    "value": "Y_input",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : train_labels",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : test_labels",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "dropout_56": {
                "variable": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(rgb, w_shape=[3, 3, 3, 64], b_shape=[64], axis=-1, phase=phase, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1_1, keep_prob=kp_07)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_07",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_61": {
                "variable": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv1_2, w_shape=[3, 3, 64, 128], b_shape=[128], axis=-1, phase=phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv2_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv2_2, w_shape=[3, 3, 128, 256], b_shape=[256], axis=-1, phase=phase, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_68": {
                "variable": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv3_1, w_shape=[3, 3, 256, 256], b_shape=[256], axis=-1, phase=phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3_2, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(pool3, w_shape=[3, 3, 256, 512], b_shape=[512], axis=-1, phase=phase, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv4_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv4_1, w_shape=[3, 3, 512, 512], b_shape=[512], axis=-1, phase=phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv4_2, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "conv5_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(pool4, w_shape=[3, 3, 512, 512], b_shape=[512], axis=-1, phase=phase, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv5_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_82": {
                "variable": {
                    "value": "conv5_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv5_1, w_shape=[3, 3, 512, 512], b_shape=[512], axis=-1, phase=phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv5_2, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "pool7_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool(conv7_1, 'pool7')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3 * 3 * 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "relu6",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(pool7_flatten, 'fc6', w_shape=[pool7_flatten.shape[1], 1024], b_shape=[1024])",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(fc6, axis=-1, phase=phase, name='fc6/bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "relu6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(fc6)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(relu6, keep_prob=kp_05)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_05",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_121": {
                "variable": {
                    "value": "ga_total",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ga_1, ga_2, ga_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(ga_total, 'cls', w_shape=[ga_total.shape[1], FLAGS.num_classes], b_shape=[FLAGS.num_classes])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_126": {
                "variable": {
                    "value": "y_oh",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "FLAGS.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "variable": {
                    "value": "lossXent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y_oh, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_128": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.argmax(softmax, 1), tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_133": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_138": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_141": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "FLAGS.learning_rate_per_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_147": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.learning_rate_start, global_step, FLAGS.learning_rate_per_epoch, FLAGS.learning_rate_decay, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_149": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_163": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_182": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "FLAGS.checkpoint_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "FileWriter_211": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs/",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_213": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "write_version": {
                    "value": "saver_pb2.SaverDef.V1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_216": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_217": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_151": {
                "variable": {
                    "value": "train_op1",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_152": {
                "variable": {
                    "value": "train_op2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_153": {
                "variable": {
                    "value": "train_op3",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_154": {
                "variable": {
                    "value": "train_op4",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.learning_rate_start, global_step, FLAGS.learning_rate_per_epoch, FLAGS.learning_rate_decay, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_157": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossXent + lossL2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_158": {
                "name": {
                    "value": "lossXent",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lossXent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_oh, logits=logit))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_159": {
                "name": {
                    "value": "lossL2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lossL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n([tf.nn.l2_loss(v) for v in var_list if 'bias' not in v.name]) * 0.0005",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_160": {
                "name": {
                    "value": "train_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_161": {
                "name": {
                    "value": "learning rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.learning_rate_start, global_step, FLAGS.learning_rate_per_epoch, FLAGS.learning_rate_decay, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_191": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_219": {
                "seed": {
                    "value": "np.random.randint(1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_127": {
                "labels": {
                    "value": "y_oh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(y, depth=FLAGS.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(ga_total, 'cls', w_shape=[ga_total.shape[1], FLAGS.num_classes], b_shape=[FLAGS.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_128": {
                "x": {
                    "value": "tf.argmax(softmax, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_130": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.cast(tf.argmax(softmax, 1), tf.int64), y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_134": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in var_list if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "control_dependencies_150": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_128": {
                "input": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logit, name='prob')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_134": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "CUB_finetune/pretrained_utils.py": {
        "tensorflow": {
            "string_input_producer_173": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordOptions_174": {
                "variable": {
                    "value": "options_zlib",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.ZLIB",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordOptions_175": {
                "variable": {
                    "value": "options_gzip",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.GZIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordReader_176": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_178": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'label': tf.FixedLenFeature([], tf.int64), 'img_raw': tf.FixedLenFeature([], tf.string), 'width': tf.FixedLenFeature([], tf.int64), 'height': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_186": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_187": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_203": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size * size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_259": {
                "variable": {
                    "value": "g_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_260": {
                "variable": {
                    "value": "g_vectorT",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "g_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(g, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_261": {
                "variable": {
                    "value": "score_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(l, [size * size, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "g_vectorT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(g_vector, (1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_262": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(L_vector, g_vectorT)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "score_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(L_vector, g_vectorT)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_264": {
                "variable": {
                    "value": "a_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_265": {
                "variable": {
                    "value": "L_vectorT",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(l, [size * size, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_266": {
                "variable": {
                    "value": "gas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "L_vectorT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(L_vector, (1, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_273": {
                "variable": {
                    "value": "(gas, images)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda x: compatibility_func(x[0], x[1])",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(L, G)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(tf.float32, tf.float32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_274": {
                "variable": {
                    "value": "ga",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(L_vectorT, a_vector)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_13": {
                "name": {
                    "value": "params.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_14": {
                "name": {
                    "value": "params.op.name + '/row_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_sum(tf.pow(tf.norm(params, axis=(0, 1)), 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_15": {
                "name": {
                    "value": "params.op.name + '/spartisty'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_18": {
                "name": {
                    "value": "params.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_19": {
                "name": {
                    "value": "params.op.name + '/row_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.pow(tf.norm(params, axis=1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_20": {
                "name": {
                    "value": "params.op.name + '/spartisty'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_23": {
                "name": {
                    "value": "outputs.op.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_24": {
                "name": {
                    "value": "outputs.op.name + '/outputs_sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool_29": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_33": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_37": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_conv_filter(name, w_shape, init=init_w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_47": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_bias(name, b_shape, init=init_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_65": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_116": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fcbias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fcbias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_125": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_130": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_135": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_150": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_166": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fcbias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fcbias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_191": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['img_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score_vector, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([height, width, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_crop_194": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score_vector, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[80, 80, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_195": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score_vector, [size, size])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_198": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['img_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score_vector, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([height, width, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_batch_215": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "20 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_222": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "10 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_14": {
                "input_tensor": {
                    "value": "tf.pow(tf.norm(params, axis=(0, 1)), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zero_fraction_15": {
                "value": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_19": {
                "x": {
                    "value": "tf.norm(params, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zero_fraction_20": {
                "value": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zero_fraction_25": {
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_14": {
                "x": {
                    "value": "tf.norm(params, axis=(0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_19": {
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fc_weight(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fc_weight(name, w_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_126": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_131": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_136": {
                "value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_initializer_141": {
                "value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_initializer_146": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_151": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fc_weight(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fc_weight(name, w_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_192": {
                "values": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_196": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score_vector, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_199": {
                "values": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_201": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score_vector, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_14": {
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "FixedLenFeature_180": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_181": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_182": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_183": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CUB_finetune/test.py": {
        "tensorflow": {
            "constant_5": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]]], [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_8": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]]], [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_11": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 4], [2, 5], [3, 6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_12": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_14": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4, 5, 6], [7, 8, 9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_17": {
                "variable": {
                    "value": "ee",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(e[0, :], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_20": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1.0, 2.0, 3.0]",
                            "List"
                        ]
                    ]
                }
            },
            "Session_23": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_17": {
                "input": {
                    "value": "e[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CUB_finetune/test_dataset.py": {
        "tensorflow": {
            "random_flip_left_right_84": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "string_input_producer_88": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordOptions_89": {
                "variable": {
                    "value": "options_zlib",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.ZLIB",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordOptions_90": {
                "variable": {
                    "value": "options_gzip",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.GZIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordReader_91": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_93": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'label': tf.FixedLenFeature([], tf.int64), 'img_raw': tf.FixedLenFeature([], tf.string), 'width': tf.FixedLenFeature([], tf.int64), 'height': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_118": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_169": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_170": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "start_queue_runners_177": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_100": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['img_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_102": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_104": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[80, 80, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_105": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "decode_raw_111": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['img_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_112": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_113": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_batch_131": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "20 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_138": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "20 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_117": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_95": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_96": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_97": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_98": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CUB_finetune/utils.py": {
        "tensorflow": {
            "string_input_producer_170": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordOptions_171": {
                "variable": {
                    "value": "options_zlib",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.ZLIB",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordOptions_172": {
                "variable": {
                    "value": "options_gzip",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.GZIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordReader_173": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_175": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'label': tf.FixedLenFeature([], tf.int64), 'img_raw': tf.FixedLenFeature([], tf.string), 'width': tf.FixedLenFeature([], tf.int64), 'height': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_183": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_184": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_200": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_263": {
                "variable": {
                    "value": "ga",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "'gas%d' % size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_264": {
                "variable": {
                    "value": "ga",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ga",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('gas%d' % size)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(ga)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(ga, [2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_265": {
                "variable": {
                    "value": "ga",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ga",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('gas%d' % size)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(ga)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(ga, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Coordinator_274": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_275": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "start_queue_runners_282": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_13": {
                "name": {
                    "value": "params.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_14": {
                "name": {
                    "value": "params.op.name + '/row_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_sum(tf.pow(tf.norm(params, axis=(0, 1)), 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_15": {
                "name": {
                    "value": "params.op.name + '/spartisty'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_18": {
                "name": {
                    "value": "params.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_19": {
                "name": {
                    "value": "params.op.name + '/row_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.pow(tf.norm(params, axis=1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_20": {
                "name": {
                    "value": "params.op.name + '/spartisty'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_23": {
                "name": {
                    "value": "outputs.op.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_24": {
                "name": {
                    "value": "outputs.op.name + '/outputs_sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool_29": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_33": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_37": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_conv_filter(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_conv_filter(name, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_47": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_bias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_bias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_65": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_conv_filter(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_conv_filter(name, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_90": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_bias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_bias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_92": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_113": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fcbias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fcbias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_122": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_127": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_137": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_163": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fcbias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fcbias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_188": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['img_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([height, width, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_crop_191": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[80, 80, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_192": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [size, size])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_195": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['img_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([height, width, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_batch_212": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "20 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_219": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "10 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_251": {
                "variable": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "L[i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size * size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_252": {
                "variable": {
                    "value": "g_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_253": {
                "variable": {
                    "value": "g_vectorT",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "g_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(g[i, :], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_254": {
                "variable": {
                    "value": "score_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(L[i, :, :, :], [size * size, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "g_vectorT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(g_vector, (1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_255": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(L_vector, g_vectorT)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_257": {
                "variable": {
                    "value": "a_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_258": {
                "variable": {
                    "value": "L_vectorT",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(L[i, :, :, :], [size * size, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_259": {
                "variable": {
                    "value": "gas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "L_vectorT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(L_vector, (1, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_14": {
                "input_tensor": {
                    "value": "tf.pow(tf.norm(params, axis=(0, 1)), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zero_fraction_15": {
                "value": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_19": {
                "x": {
                    "value": "tf.norm(params, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zero_fraction_20": {
                "value": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zero_fraction_25": {
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_260": {
                "name": {
                    "value": "'gas%d' % size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "gas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(L_vectorT, a_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_14": {
                "x": {
                    "value": "tf.norm(params, axis=(0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_19": {
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fc_weight(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fc_weight(name, w_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_123": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_128": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_133": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_138": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_143": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_148": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fc_weight(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fc_weight(name, w_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_189": {
                "values": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_193": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_196": {
                "values": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_198": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.random_crop(img, [80, 80, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(features['img_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, tf.stack([height, width, 3]))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(img, 80, 80)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_14": {
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "FixedLenFeature_177": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_178": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_179": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_180": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100_attention/att_model.py": {
        "tensorflow": {
            "dropout_7": {
                "variable": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(rgb, w_shape=[3, 3, 3, 64], b_shape=[64], axis=-1, phase=phase, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1_1, keep_prob=kp_07)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_07",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_12": {
                "variable": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv1_2, w_shape=[3, 3, 64, 128], b_shape=[128], axis=-1, phase=phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv2_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_17": {
                "variable": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv2_2, w_shape=[3, 3, 128, 256], b_shape=[256], axis=-1, phase=phase, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_19": {
                "variable": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv3_1, w_shape=[3, 3, 256, 256], b_shape=[256], axis=-1, phase=phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3_2, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_24": {
                "variable": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(pool3, w_shape=[3, 3, 256, 512], b_shape=[512], axis=-1, phase=phase, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv4_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_26": {
                "variable": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv4_1, w_shape=[3, 3, 512, 512], b_shape=[512], axis=-1, phase=phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv4_2, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "conv5_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(pool4, w_shape=[3, 3, 512, 512], b_shape=[512], axis=-1, phase=phase, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv5_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_33": {
                "variable": {
                    "value": "conv5_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv5_1, w_shape=[3, 3, 512, 512], b_shape=[512], axis=-1, phase=phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv5_2, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "relu6",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(pool7, 'fc6', w_shape=[512, 512], b_shape=[512])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_69": {
                "variable": {
                    "value": "ga_total",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ga_2, ga_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(ga_total, 'cls', w_shape=[ga_total.shape[1], 10], b_shape=[10])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_74": {
                "variable": {
                    "value": "y_oh",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "lossXent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y_oh, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "in_top_k_77": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(ga_total, 'cls', w_shape=[ga_total.shape[1], 10], b_shape=[10])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_80": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_95": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_101": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(1.0, global_step, 10000, 0.5, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_103": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_107": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_86": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossXent + lossL2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_87": {
                "name": {
                    "value": "lossXent",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lossXent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_oh, logits=logit))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_88": {
                "name": {
                    "value": "lossL2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lossL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n([tf.nn.l2_loss(v) for v in var_list if 'bias' not in v.name]) * 0.0005",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_89": {
                "name": {
                    "value": "train_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_105": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(1.0, global_step, 10000, 0.5, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_75": {
                "labels": {
                    "value": "y_oh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(y, depth=10)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(ga_total, 'cls', w_shape=[ga_total.shape[1], 10], b_shape=[10])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_78": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.in_top_k(logit, y, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_82": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in var_list if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "control_dependencies_104": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_82": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100_attention/cifar100_test.py": {
        "tensorflow": {}
    },
    "cifar100_attention/train.py": {
        "tensorflow": {
            "placeholder_22": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "kp_07",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "kp_05",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_57": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs/",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_58": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_64": {
                "seed": {
                    "value": "np.random.randint(1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cifar100_attention/utils.py": {
        "tensorflow": {
            "reshape_209": {
                "variable": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, size * size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "L_vector_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(L, [batch, size * size, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_211": {
                "variable": {
                    "value": "g_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_212": {
                "variable": {
                    "value": "score_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(L_vector_T, g_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_213": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(L_vector_T, g_vector), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_215": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_216": {
                "variable": {
                    "value": "a_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_217": {
                "variable": {
                    "value": "gas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "L_vector_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(L_vector, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_218": {
                "variable": {
                    "value": "ga",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(L_vector_T, a_score)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_7": {
                "name": {
                    "value": "params.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_8": {
                "name": {
                    "value": "params.op.name + '/row_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_sum(tf.pow(tf.norm(params, axis=(0, 1)), 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_9": {
                "name": {
                    "value": "params.op.name + '/spartisty'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_12": {
                "name": {
                    "value": "params.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_13": {
                "name": {
                    "value": "params.op.name + '/row_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.pow(tf.norm(params, axis=1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_14": {
                "name": {
                    "value": "params.op.name + '/spartisty'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_17": {
                "name": {
                    "value": "outputs.op.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_18": {
                "name": {
                    "value": "outputs.op.name + '/outputs_sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool_23": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_27": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_31": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_conv_filter(name, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_41": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_bias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_50": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_59": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_91": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fcbias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fcbias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_100": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_141": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fcbias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fcbias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_8": {
                "input_tensor": {
                    "value": "tf.pow(tf.norm(params, axis=(0, 1)), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zero_fraction_9": {
                "value": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_13": {
                "x": {
                    "value": "tf.norm(params, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zero_fraction_14": {
                "value": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zero_fraction_19": {
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name + 'conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "name + 'BN'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "name + 'ReLU'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_212": {
                "x": {
                    "value": "L_vector_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(L_vector, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "g_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(g, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_8": {
                "x": {
                    "value": "tf.norm(params, axis=(0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_13": {
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fc_weight(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fc_weight(name, w_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_101": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_106": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_111": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_116": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_121": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_126": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fc_weight(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fc_weight(name, w_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_8": {
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_attention/att_model.py": {
        "tensorflow": {
            "dropout_7": {
                "variable": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(rgb, w_shape=[3, 3, 3, 64], b_shape=[64], axis=-1, phase=phase, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1_1, keep_prob=kp_07)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_07",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_12": {
                "variable": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv1_2, w_shape=[3, 3, 64, 128], b_shape=[128], axis=-1, phase=phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv2_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_17": {
                "variable": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv2_2, w_shape=[3, 3, 128, 256], b_shape=[256], axis=-1, phase=phase, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_19": {
                "variable": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv3_1, w_shape=[3, 3, 256, 256], b_shape=[256], axis=-1, phase=phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3_2, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_24": {
                "variable": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(pool3, w_shape=[3, 3, 256, 512], b_shape=[512], axis=-1, phase=phase, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv4_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_26": {
                "variable": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv4_1, w_shape=[3, 3, 512, 512], b_shape=[512], axis=-1, phase=phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv4_2, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "conv5_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(pool4, w_shape=[3, 3, 512, 512], b_shape=[512], axis=-1, phase=phase, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv5_1, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_33": {
                "variable": {
                    "value": "conv5_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConvBNReLU(conv5_1, w_shape=[3, 3, 512, 512], b_shape=[512], axis=-1, phase=phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv5_2, keep_prob=kp_06)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "relu6",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(pool7, 'fc6', w_shape=[512, 512], b_shape=[512])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_69": {
                "variable": {
                    "value": "ga_total",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ga_2, ga_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(ga_total, 'cls', w_shape=[ga_total.shape[1], 10], b_shape=[10])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_74": {
                "variable": {
                    "value": "y_oh",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "lossXent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y_oh, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "in_top_k_77": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(ga_total, 'cls', w_shape=[ga_total.shape[1], 10], b_shape=[10])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_80": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_95": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_101": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(1.0, global_step, 10000, 0.5, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_103": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_107": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_86": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossXent + lossL2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_87": {
                "name": {
                    "value": "lossXent",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lossXent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_oh, logits=logit))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_88": {
                "name": {
                    "value": "lossL2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lossL2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n([tf.nn.l2_loss(v) for v in var_list if 'bias' not in v.name]) * 0.0005",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_89": {
                "name": {
                    "value": "train_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_105": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(1.0, global_step, 10000, 0.5, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_75": {
                "labels": {
                    "value": "y_oh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(y, depth=10)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(ga_total, 'cls', w_shape=[ga_total.shape[1], 10], b_shape=[10])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_78": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.in_top_k(logit, y, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_82": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in var_list if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "control_dependencies_104": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_82": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_attention/cifar10_tfrecords.py": {
        "tensorflow": {
            "shuffle_batch_87": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "20 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_94": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "20 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "string_input_producer_33": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % ii) for ii in np.arange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "FixedLengthRecordReader_35": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "label_bytes + image_bytes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "decode_raw_39": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_41": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [0], [label_bytes])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label)",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [0], [label_bytes])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_43": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [0], [label_bytes])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label)",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [0], [label_bytes])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_45": {
                "variable": {
                    "value": "image_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "image_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_raw, [img_depth, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_raw, [img_depth, img_height, img_width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[img_depth, img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_47": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_raw, [img_depth, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_raw, [img_depth, img_height, img_width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "random_crop_50": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(image_raw, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(image_raw, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_51": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(image_raw, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(image_raw, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "string_input_producer_56": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % ii) for ii in np.arange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "FixedLengthRecordReader_58": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "label_bytes + image_bytes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "decode_raw_62": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_64": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [0], [label_bytes])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label)",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [0], [label_bytes])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_66": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [0], [label_bytes])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label)",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [0], [label_bytes])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_68": {
                "variable": {
                    "value": "image_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "image_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_raw, [img_depth, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_raw, [img_depth, img_height, img_width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[img_depth, img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_raw, [img_depth, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image_raw, [img_depth, img_height, img_width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_52": {
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(image_raw, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(image_raw, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(image_raw, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(image_raw, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (1.0 / 255)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_attention/train.py": {
        "tensorflow": {
            "placeholder_22": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "kp_07",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "kp_06",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "kp_05",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_54": {
                "variable": {
                    "value": "X_input",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : train_images",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : test_images",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_55": {
                "variable": {
                    "value": "Y_input",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : train_labels",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : test_labels",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "FileWriter_62": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs/",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_63": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_67": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_68": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_71": {
                "seed": {
                    "value": "np.random.randint(1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cifar10_attention/utils.py": {
        "tensorflow": {
            "reshape_209": {
                "variable": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, size * size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "L_vector_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(L, [batch, size * size, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_211": {
                "variable": {
                    "value": "g_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_212": {
                "variable": {
                    "value": "score_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(L_vector_T, g_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_213": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(L_vector_T, g_vector), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_215": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_216": {
                "variable": {
                    "value": "a_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_217": {
                "variable": {
                    "value": "gas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "L_vector_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(L_vector, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_218": {
                "variable": {
                    "value": "ga",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(L_vector_T, a_score)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_7": {
                "name": {
                    "value": "params.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_8": {
                "name": {
                    "value": "params.op.name + '/row_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_sum(tf.pow(tf.norm(params, axis=(0, 1)), 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_9": {
                "name": {
                    "value": "params.op.name + '/spartisty'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_12": {
                "name": {
                    "value": "params.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_13": {
                "name": {
                    "value": "params.op.name + '/row_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.pow(tf.norm(params, axis=1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_14": {
                "name": {
                    "value": "params.op.name + '/spartisty'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_17": {
                "name": {
                    "value": "outputs.op.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_18": {
                "name": {
                    "value": "outputs.op.name + '/outputs_sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool_23": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_27": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_31": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_conv_filter(name, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_41": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_bias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_50": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_59": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_91": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fcbias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fcbias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_100": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "bottom.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_141": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fcbias(name, b_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fcbias(name, b_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_8": {
                "input_tensor": {
                    "value": "tf.pow(tf.norm(params, axis=(0, 1)), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zero_fraction_9": {
                "value": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_13": {
                "x": {
                    "value": "tf.norm(params, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zero_fraction_14": {
                "value": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zero_fraction_19": {
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name + 'conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "name + 'BN'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "name + 'ReLU'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_212": {
                "x": {
                    "value": "L_vector_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(L_vector, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "g_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(g, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_8": {
                "x": {
                    "value": "tf.norm(params, axis=(0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_13": {
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fc_weight(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fc_weight(name, w_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_101": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_106": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_111": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_116": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_121": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_126": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_fc_weight(name, w_shape)",
                            "Call"
                        ],
                        [
                            "get_trans_fc_weight(name, w_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_8": {
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}