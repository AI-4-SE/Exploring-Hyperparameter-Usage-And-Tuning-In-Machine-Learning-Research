{
    "main.py": {
        "sklearn": {
            "PCA_72": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((vocab_size, args.emb_size))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(embeddings).to(device)",
                            "Call"
                        ],
                        [
                            "model.rho.weight",
                            "Attribute"
                        ],
                        [
                            "model.rho",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_204": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "args.num_docs_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_205": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(args.num_docs_train)",
                            "Call"
                        ],
                        [
                            "torch.split(indices, args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.split(torch.tensor(range(args.num_docs_valid)), args.eval_batch_size)",
                            "Call"
                        ],
                        [
                            "torch.split(torch.tensor(range(args.num_docs_test)), args.eval_batch_size)",
                            "Call"
                        ],
                        [
                            "torch.split(torch.tensor(range(args.num_docs_test)), args.eval_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "etas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "model.num_times",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "model.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "inp_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[0], torch.zeros(model.num_topics).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_174": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adagrad_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "inp_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[t], etas[t - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bows, eta]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_331": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.mu_q_theta(q_theta)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_466": {
                "variable": {
                    "value": "TC_all",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "TC_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(TC_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_497": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_515": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adadelta_185": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_223": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data_batch, normalized_data_batch, times_batch, train_rnn_inp, args.num_docs_train)",
                            "Call"
                        ],
                        [
                            "nll / sums.squeeze()",
                            "BinOp"
                        ],
                        [
                            "loss.mean().item()",
                            "Call"
                        ],
                        [
                            "nll / sums_2.squeeze()",
                            "BinOp"
                        ],
                        [
                            "loss.mean().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_224": {
                "input": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data_batch, normalized_data_batch, times_batch, train_rnn_inp, args.num_docs_train)",
                            "Call"
                        ],
                        [
                            "-loglik * data_batch",
                            "BinOp"
                        ],
                        [
                            "nll.sum(-1)",
                            "Call"
                        ],
                        [
                            "-loglik * data_batch_2",
                            "BinOp"
                        ],
                        [
                            "nll.sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_225": {
                "input": {
                    "value": "kl_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data_batch, normalized_data_batch, times_batch, train_rnn_inp, args.num_docs_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_226": {
                "input": {
                    "value": "kl_eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data_batch, normalized_data_batch, times_batch, train_rnn_inp, args.num_docs_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_227": {
                "input": {
                    "value": "kl_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data_batch, normalized_data_batch, times_batch, train_rnn_inp, args.num_docs_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_341": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(range(args.num_docs_valid))",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_379": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(range(args.num_docs_test))",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_390": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(range(args.num_docs_test))",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSprop_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__220": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "*size": {
                    "value": "model.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_365": {
                "variable": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.unsqueeze(2) * beta",
                            "BinOp"
                        ],
                        [
                            "loglik.sum(1)",
                            "Call"
                        ],
                        [
                            "torch.log(loglik)",
                            "Call"
                        ],
                        [
                            "theta.unsqueeze(2) * beta",
                            "BinOp"
                        ],
                        [
                            "loglik.sum(1)",
                            "Call"
                        ],
                        [
                            "torch.log(loglik)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_411": {
                "variable": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.unsqueeze(2) * beta",
                            "BinOp"
                        ],
                        [
                            "loglik.sum(1)",
                            "Call"
                        ],
                        [
                            "torch.log(loglik)",
                            "Call"
                        ],
                        [
                            "theta.unsqueeze(2) * beta",
                            "BinOp"
                        ],
                        [
                            "loglik.sum(1)",
                            "Call"
                        ],
                        [
                            "torch.log(loglik)",
                            "Call"
                        ]
                    ]
                }
            },
            "ASGD_189": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_192": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "data": {
                    "value": "range(args.num_docs_valid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_379": {
                "data": {
                    "value": "range(args.num_docs_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "data": {
                    "value": "range(args.num_docs_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_487": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DETM(args, embeddings)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/data_acl.py": {
        "sklearn": {
            "CountVectorizer_68": {
                "variable": {
                    "value": "cvectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "min_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "max_df": {
                    "value": "max_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.7",
                            "float"
                        ]
                    ]
                },
                "stop_words": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/data_undebates.py": {
        "sklearn": {
            "CountVectorizer_69": {
                "variable": {
                    "value": "cvectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "min_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "max_df": {
                    "value": "max_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.7",
                            "float"
                        ]
                    ]
                },
                "stop_words": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "TSNE_134": {
                "variable": {
                    "value": "tsne_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "angle": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "exp_15": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_17": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvar.size()",
                            "Call"
                        ],
                        [
                            "z.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "zdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvar.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvar.size()",
                            "Call"
                        ],
                        [
                            "z.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.size(2)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvar.size()",
                            "Call"
                        ],
                        [
                            "z.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.size(2)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_103": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_105": {
                "input": {
                    "value": "torch.exp(x - d).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "torch.exp(x - d.unsqueeze(dim).expand_as(x)).sum(dim) + tiny",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "x - d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_107": {
                "input": {
                    "value": "x - d.unsqueeze(dim).expand_as(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_107": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, vocab_size))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data_batch).float().to(device)",
                            "Call"
                        ],
                        [
                            "get_batch(tokens, counts, ind, vocab_size, temporal=True, times=times)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_109": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_docs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_110": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(num_docs)",
                            "Call"
                        ],
                        [
                            "torch.split(indices, 1000)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_times",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_times",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_times",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_times",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "times_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "times_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size,))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(times_batch).to(device)",
                            "Call"
                        ],
                        [
                            "get_batch(tokens, counts, ind, vocab_size, temporal=True, times=times)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detm.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.t_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.enc_drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.mu_q_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(args.num_topics, args.num_times, args.rho_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.logsigma_q_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(args.num_topics, args.num_times, args.rho_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.q_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.vocab_size + args.num_topics, args.t_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.mu_q_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.t_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.logsigma_q_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.t_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.q_eta_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.eta_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_58": {
                "variable": {
                    "value": "self.q_eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.eta_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.eta_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.mu_q_eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.eta_hidden_size + args.num_topics",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.logsigma_q_eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.eta_hidden_size + args.num_topics",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_times",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.rho_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "p_mu_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rho_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "logsigma_p_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rho_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "kl_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "kl_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(kl_alpha).sum()",
                            "Call"
                        ],
                        [
                            "self.get_alpha()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_124": {
                "variable": {
                    "value": "kl_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "etas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_times",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "inp_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[0], torch.zeros(self.num_topics).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "p_mu_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "logsigma_p_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_155": {
                "variable": {
                    "value": "kl_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "kl_eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(kl_eta).sum()",
                            "Call"
                        ],
                        [
                            "self.get_eta(rnn_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_155": {
                "variable": {
                    "value": "kl_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bows, eta_td]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_169": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reparameterize(mu_theta, logsigma_theta)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rho(alpha.view(alpha.size(0) * alpha.size(1), self.rho_size))",
                            "Call"
                        ],
                        [
                            "torch.mm(tmp, self.rho.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "logit.view(alpha.size(0), alpha.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_187": {
                "variable": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(z, dim=-1)",
                            "Call"
                        ],
                        [
                            "theta.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.get_theta(eta, normalized_bows, times)",
                            "Call"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logit, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.get_beta(alpha)",
                            "Call"
                        ],
                        [
                            "beta[times.type('torch.LongTensor')]",
                            "Subscript"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_187": {
                "variable": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_189": {
                "variable": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loglik + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.rho_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_38": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings.size()",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_64": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_88": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_89": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_98": {
                "variable": {
                    "value": "sigma_q_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_logsigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_logsigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_99": {
                "variable": {
                    "value": "sigma_p_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_logsigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_121": {
                "variable": {
                    "value": "logsigma_p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.delta * torch.ones(self.num_topics, self.rho_size).to(device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "inp_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[t], etas[t - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_152": {
                "variable": {
                    "value": "logsigma_p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.delta * torch.ones(self.num_topics).to(device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_180": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha.view(alpha.size(0) * alpha.size(1), self.rho_size)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.rho.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "args.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.num_times",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.rho_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "args.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.num_times",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.rho_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "args.vocab_size + args.num_topics",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.t_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "args.t_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.t_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_68": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sigma_q_sq + (q_mu - p_mu) ** 2) / (sigma_p_sq + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "kl - 1 + p_logsigma - q_logsigma",
                            "BinOp"
                        ],
                        [
                            "0.5 * torch.sum(kl, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * torch.sum(1 + q_logsigma - q_mu.pow(2) - q_logsigma.exp(), dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "1 + q_logsigma - q_mu.pow(2) - q_logsigma.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RReLU_70": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rho_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_152": {
                "*size": {
                    "value": "self.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_74": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SELU_76": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_78": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_81": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}