{
    "test/nnUNetV1/network_training/network_trainer.py": {
        "sklearn": {
            "KFold_131": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_276": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cuda', torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_245": {
                "obj": {
                    "value": "{'epoch': self.epoch + 1, 'state_dict': state_dict, 'optimizer_state_dict': optimizer_state_dict, 'lr_scheduler_state_dict': lr_sched_state_dct, 'plot_stuff': (self.all_tr_losses, self.all_val_losses, self.all_val_losses_tr_mode, self.all_val_eval_metrics)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_511": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(data).float()",
                            "Call"
                        ],
                        [
                            "data.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_513": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['target']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(target).float()",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_276": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "losses_pytorch/ND_Crossentropy.py": {
        "torch": {
            "topk_46": {
                "variable": {
                    "value": "(res, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res.view((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(num_voxels * self.k / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_74": {
                "variable": {
                    "value": "wce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_edts_forPenalizedLoss(target.cpu().numpy() > 0.5) + 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(dist)",
                            "Call"
                        ],
                        [
                            "dist.to(inp.device).type(torch.float32)",
                            "Call"
                        ],
                        [
                            "dist.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_199": {
                "variable": {
                    "value": "log_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_125": {
                "input": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.transpose(i0, i1)",
                            "Call"
                        ],
                        [
                            "net_output.contiguous()",
                            "Call"
                        ],
                        [
                            "net_output.view(-1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.long()",
                            "Call"
                        ],
                        [
                            "gt.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "losses_pytorch/boundary_loss.py": {
        "torch": {
            "exp_14": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_103": {
                "variable": {
                    "value": "multipled",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcxyz,bcxyz->bcxyz",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output[:, 1:, ...].type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_edts_forPenalizedLoss(gt_temp.cpu().numpy() > 0.5) + 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(dist)",
                            "Call"
                        ],
                        [
                            "dist.to(net_output.device).type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_233": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tp[:, 1, ...] * dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "net_output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_235": {
                "input": {
                    "value": "y_onehot[:, 1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unbind_66": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.sum(tp[:, 1, ...] * dist, (1, 2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_67": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_68": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "losses_pytorch/dice_loss.py": {
        "torch": {
            "exp_17": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_386": {
                "variable": {
                    "value": "focal_tversky",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tversky_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + self.tversky(net_output, target)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "einsum_121": {
                "equation": {
                    "value": "bcxyz, bcxyz->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_nonlin(net_output)",
                            "Call"
                        ],
                        [
                            "self.apply_nonlin(net_output)",
                            "Call"
                        ],
                        [
                            "self.apply_nonlin(net_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "einsum_122": {
                "equation": {
                    "value": "bcxyz->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_123": {
                "equation": {
                    "value": "bc->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w * einsum('bcxyz, bcxyz->bc', net_output, y_onehot)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_500": {
                "input": {
                    "value": "-torch.log(torch.clamp(dc_loss, 1e-06))",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_120": {
                "equation": {
                    "value": "bcxyz->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_68": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_69": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_70": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_500": {
                "input": {
                    "value": "torch.clamp(dc_loss, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_500": {
                "input": {
                    "value": "dc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dc(net_output, target)",
                            "Call"
                        ],
                        [
                            "self.dc(net_output, target)",
                            "Call"
                        ],
                        [
                            "-self.dc(net_output, target)",
                            "UnaryOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "losses_pytorch/focal_loss.py": {
        "torch": {
            "squeeze_45": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "torch.ones(num_class, 1)",
                            "Call"
                        ],
                        [
                            "alpha.to(logit.device)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(alpha).view(num_class, 1)",
                            "Call"
                        ],
                        [
                            "alpha / alpha.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.ones(num_class, 1)",
                            "Call"
                        ],
                        [
                            "alpha * (1 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "alpha[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(alpha)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_52": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "one_hot_key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(target.size(0), num_class).zero_()",
                            "Call"
                        ],
                        [
                            "one_hot_key.scatter_(1, idx, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_key.to(logit.device)",
                            "Call"
                        ],
                        [
                            "torch.clamp(one_hot_key, self.smooth / (num_class - 1), 1.0 - self.smooth)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.smooth / (num_class - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - self.smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_85": {
                "input": {
                    "value": "1 - pt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma",
                            "Attribute"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "losses_pytorch/hausdorff.py": {
        "torch": {
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "pred_dt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.distance_field(pred.cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "target_dt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.distance_field(target.cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "eroted",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.perform_erosion(pred.cpu().numpy(), target.cpu().numpy(), debug)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "losses_pytorch/lovasz_loss.py": {
        "torch": {
            "stack_52": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(losses)",
                            "Call"
                        ],
                        [
                            "self.lovasz_softmax_flat(inputs, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_49": {
                "variable": {
                    "value": "(loss_c_sorted, loss_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.autograd.Variable(target_c) - input_c).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_51": {
                "input": {
                    "value": "loss_c_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.autograd.Variable(lovasz_grad(target_c_sorted))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test/nnUNetV1/loss_functions/ND_Crossentropy.py": {
        "torch": {
            "cross_entropy_181": {
                "input": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.transpose(i0, i1)",
                            "Call"
                        ],
                        [
                            "net_output.contiguous()",
                            "Call"
                        ],
                        [
                            "net_output.view(-1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.long()",
                            "Call"
                        ],
                        [
                            "gt.view(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/nnUNetV1/loss_functions/TopK_loss.py": {
        "torch": {
            "topk_32": {
                "variable": {
                    "value": "(res, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res.view((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(num_voxels * self.k / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "test/nnUNetV1/loss_functions/boundary_loss.py": {
        "torch": {
            "stack_48": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_sdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(out_shape)",
                            "Call"
                        ],
                        [
                            "compute_sdf(y_onehot.cpu().numpy(), net_output.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_169": {
                "variable": {
                    "value": "multipled",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcxyz,bcxyz->bcxyz",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "net_output[:, 1:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_275": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc_dist ** 2 + gt_dist ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(dist)",
                            "Call"
                        ],
                        [
                            "dist.to(pred_error.device).type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_279": {
                "variable": {
                    "value": "multipled",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcxyz,bcxyz->bcxyz",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pred_error[:, 1:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "net_output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "net_output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbind_48": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_49": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_50": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/nnUNetV1/loss_functions/dice_loss.py": {
        "torch": {
            "stack_62": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_452": {
                "variable": {
                    "value": "focal_tversky",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tversky_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + self.tversky(net_output, target)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_312": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "einsum_115": {
                "equation": {
                    "value": "bcxyz, bcxyz->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "softmax_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_nonlin(net_output)",
                            "Call"
                        ],
                        [
                            "self.apply_nonlin(net_output)",
                            "Call"
                        ],
                        [
                            "self.apply_nonlin(net_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "einsum_116": {
                "equation": {
                    "value": "bcxyz->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_566": {
                "input": {
                    "value": "-torch.log(torch.clamp(dc_loss, 1e-06))",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_114": {
                "equation": {
                    "value": "bcxyz->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Name"
                        ],
                        [
                            "torch.zeros(shp_x)",
                            "Call"
                        ],
                        [
                            "y_onehot.cuda(net_output.device.index)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_117": {
                "equation": {
                    "value": "bc->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w * einsum('bcxyz, bcxyz->bc', softmax_output, y_onehot)",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(net_output * gt_onehot, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_62": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_63": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_64": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_566": {
                "input": {
                    "value": "torch.clamp(dc_loss, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_566": {
                "input": {
                    "value": "dc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dc(net_output, target)",
                            "Call"
                        ],
                        [
                            "self.dc(net_output, target)",
                            "Call"
                        ],
                        [
                            "-self.dc(net_output, target)",
                            "UnaryOp"
                        ],
                        [
                            "self.dc(net_output, target)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "test/nnUNetV1/loss_functions/focal_loss.py": {
        "torch": {
            "squeeze_45": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "torch.ones(num_class, 1)",
                            "Call"
                        ],
                        [
                            "alpha.to(logit.device)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(alpha).view(num_class, 1)",
                            "Call"
                        ],
                        [
                            "alpha / alpha.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.ones(num_class, 1)",
                            "Call"
                        ],
                        [
                            "alpha * (1 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "alpha[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(alpha)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_52": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "one_hot_key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(target.size(0), num_class).zero_()",
                            "Call"
                        ],
                        [
                            "one_hot_key.scatter_(1, idx, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_key.to(logit.device)",
                            "Call"
                        ],
                        [
                            "torch.clamp(one_hot_key, self.smooth / (num_class - 1), 1.0 - self.smooth)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.smooth / (num_class - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - self.smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_85": {
                "input": {
                    "value": "1 - pt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma",
                            "Attribute"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "test/nnUNetV1/loss_functions/lovasz_loss.py": {
        "torch": {
            "stack_52": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(losses)",
                            "Call"
                        ],
                        [
                            "self.lovasz_softmax_flat(inputs, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_49": {
                "variable": {
                    "value": "(loss_c_sorted, loss_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.autograd.Variable(target_c) - input_c).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_51": {
                "input": {
                    "value": "loss_c_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.autograd.Variable(lovasz_grad(target_c_sorted))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test/nnUNetV1/network_training/nnUNetTrainer.py": {
        "torch": {
            "Adam_234": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_236": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_541": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_542": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_543": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_535": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/nnUNetV1/network_training/nnUNetTrainerEDT.py": {
        "torch": {
            "from_numpy_203": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[selected_channels]",
                            "Subscript"
                        ],
                        [
                            "data_dict['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(data).float()",
                            "Call"
                        ],
                        [
                            "data.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['target']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(target).float()",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['bound']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(bound).float()",
                            "Call"
                        ],
                        [
                            "bound.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/nnUNetV1/network_training/nnUNetTrainerWCE.py": {
        "torch": {}
    },
    "test/nnUNetV1/network_training/nnUNetTrainerWCET0.py": {
        "torch": {}
    },
    "test/nnUNetV1/network_training/nnUNetTrainerWCET1.py": {
        "torch": {}
    },
    "test/nnUNetV1/network_training/nnUNetTrainerWCET2.py": {
        "torch": {}
    },
    "test/nnUNetV1/network_training/nnUNetTrainerWCET4.py": {
        "torch": {}
    },
    "test/nnUNetV1/network_training/nnUNetTrainer_ExpLog.py": {
        "torch": {}
    },
    "test/nnUNetV1/network_training/nnUNetTrainer_ExpLogT0.py": {
        "torch": {}
    },
    "test/nnUNetV1/network_training/nnUNetTrainer_ExpLogT1.py": {
        "torch": {}
    },
    "test/nnUNetV1/network_training/nnUNetTrainer_ExpLogT2.py": {
        "torch": {}
    },
    "test/nnUNetV1/network_training/nnUNetTrainer_ExpLogT4.py": {
        "torch": {}
    },
    "test/nnUNetV2/loss_functions/TopK_loss.py": {
        "torch": {
            "topk_32": {
                "variable": {
                    "value": "(res, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res.view((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(num_voxels * self.k / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "test/nnUNetV2/loss_functions/crossentropy.py": {
        "torch": {}
    },
    "test/nnUNetV2/loss_functions/dice_loss.py": {
        "torch": {
            "stack_139": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_418": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_319": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_391": {
                "input": {
                    "value": "-dc_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_139": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / volumes",
                            "BinOp"
                        ],
                        [
                            "tp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_140": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / volumes",
                            "BinOp"
                        ],
                        [
                            "fp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_141": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / volumes",
                            "BinOp"
                        ],
                        [
                            "fn.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_142": {
                "input": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/nnUNetV2/loss_functions/focal_loss.py": {
        "torch": {
            "squeeze_45": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "torch.ones(num_class, 1)",
                            "Call"
                        ],
                        [
                            "alpha.to(logit.device)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(alpha).view(num_class, 1)",
                            "Call"
                        ],
                        [
                            "alpha / alpha.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.ones(num_class, 1)",
                            "Call"
                        ],
                        [
                            "alpha * (1 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "alpha[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(alpha)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_52": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "one_hot_key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(target.size(0), num_class).zero_()",
                            "Call"
                        ],
                        [
                            "one_hot_key.scatter_(1, idx, 1)",
                            "Call"
                        ],
                        [
                            "one_hot_key.to(logit.device)",
                            "Call"
                        ],
                        [
                            "torch.clamp(one_hot_key, self.smooth / (num_class - 1), 1.0 - self.smooth)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.smooth / (num_class - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - self.smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_85": {
                "input": {
                    "value": "1 - pt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma",
                            "Attribute"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}