{
    "graph_ter_cls/runner/classifier_runner.py": {
        "sklearn": {
            "accuracy_score_196": {
                "variable": {
                    "value": "overall_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(true_scores)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_197": {
                "variable": {
                    "value": "avg_class_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(true_scores)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_206": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(true_scores)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred_scores)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "self.shape_names",
                    "type": "Attribute",
                    "possible_values": []
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_22": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "feeder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='train')",
                            "Call"
                        ],
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "feeder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='train')",
                            "Call"
                        ],
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_cls/runner/eval_runner.py": {
        "sklearn": {
            "accuracy_score_102": {
                "variable": {
                    "value": "overall_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(true_scores)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_103": {
                "variable": {
                    "value": "avg_class_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(true_scores)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_112": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(true_scores)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred_scores)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "self.shape_names",
                    "type": "Attribute",
                    "possible_values": []
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_19": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "feeder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_cls/runner/svm_classifier_runner.py": {
        "sklearn": {
            "OneVsRestClassifier_59": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LinearSVC(C=200.0, max_iter=10240, dual=False, intercept_scaling=12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_172": {
                "variable": {
                    "value": "overall_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(true_scores)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_173": {
                "variable": {
                    "value": "avg_class_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(true_scores)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_181": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(true_scores)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred_scores)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "self.shape_names",
                    "type": "Attribute",
                    "possible_values": []
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_61": {
                "C": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10240",
                    "type": "int",
                    "possible_values": []
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_feeder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "feeder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_cls/dataset/modelnet40.py": {
        "torch": {}
    },
    "graph_ter_cls/models/backbone.py": {
        "torch": {
            "rand_76": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_77": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv1d(in_features, 512, kernel_size=1, bias=False)), ('bn0', nn.BatchNorm1d(512)), ('relu0', nn.LeakyReLU(negative_slope=0.2)), ('conv1', EdgeConvolution(k, in_features=512, out_features=256)), ('conv2', EdgeConvolution(k, in_features=256, out_features=128))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', EdgeConvolution(k, in_features=256, out_features=128)), ('conv1', EdgeConvolution(k, in_features=128, out_features=64)), ('conv2', nn.Conv1d(64, out_features, kernel_size=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_53": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_cls/models/classifier.py": {
        "torch": {
            "rand_45": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv1d(in_features, 1024, kernel_size=1, bias=False)), ('bn0', nn.BatchNorm1d(1024)), ('relu0', nn.LeakyReLU(negative_slope=0.2)), ('conv1', nn.Conv1d(1024, 768, kernel_size=1, bias=False)), ('bn1', nn.BatchNorm1d(768)), ('relu1', nn.LeakyReLU(negative_slope=0.2)), ('conv2', nn.Conv1d(768, 512, kernel_size=1, bias=False)), ('bn2', nn.BatchNorm1d(512)), ('relu2', nn.LeakyReLU(negative_slope=0.2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc1', nn.Linear(1024, 512, bias=False)), ('bn1', nn.BatchNorm1d(512)), ('relu1', nn.LeakyReLU(negative_slope=0.2)), ('drop1', nn.Dropout(p=dropout)), ('fc2', nn.Linear(512, 256)), ('bn2', nn.BatchNorm1d(256)), ('relu2', nn.LeakyReLU(negative_slope=0.2)), ('drop2', nn.Dropout(p=dropout)), ('fc3', nn.Linear(256, num_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_14": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_15": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_16": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_17": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "in_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_28": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_32": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "graph_ter_cls/models/layers.py": {
        "torch": {
            "rand_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_27": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_28": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_cls/runner/backbone_runner.py": {
        "torch": {
            "MSELoss_19": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "self.dataset[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "feeder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=self.transform, phase='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_83": {
                "variable": {
                    "value": "t_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model['train'](x, y)",
                            "Call"
                        ],
                        [
                            "torch.gather(t_hat, dim=-1, index=m)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.long().to(self.output_dev)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graph_ter_cls/runner/runner.py": {
        "torch": {
            "CosineAnnealingLR_156": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.args.num_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.args.lr / 100.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_166": {
                "variable": {
                    "value": "check_points",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_184": {
                "variable": {
                    "value": "check_points",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "check_points",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_225": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model': model_weights, 'optimizer': optim_weights, 'scheduler': sched_weights}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_67": {
                "variable": {
                    "value": "self.model[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.output_dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_129": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "paras",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model['train'].parameters()",
                            "Call"
                        ],
                        [
                            "self.model['train'].parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_all_45": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "paras",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model['train'].parameters()",
                            "Call"
                        ],
                        [
                            "self.model['train'].parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_cls/tools/utils.py": {
        "torch": {
            "sum_41": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_63": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_feats).repeat(1, 1, k, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_54": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_seg/dataset/shapenet_part.py": {
        "torch": {}
    },
    "graph_ter_seg/models/backbone.py": {
        "torch": {
            "rand_74": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_75": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv1d(in_features, 128, kernel_size=1, bias=False)), ('bn0', nn.BatchNorm1d(128)), ('relu0', nn.LeakyReLU(negative_slope=0.2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', EdgeConvolution(k, in_features=256, out_features=128)), ('conv1', EdgeConvolution(k, in_features=128, out_features=64)), ('conv2', nn.Conv1d(64, out_features, kernel_size=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_51": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_seg/models/classifier.py": {
        "torch": {
            "rand_56": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_57": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv1d(in_features, 1024, kernel_size=1, bias=False)), ('bn0', nn.BatchNorm1d(1024)), ('relu0', nn.LeakyReLU(negative_slope=0.2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_21": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv1d(num_classes, 64, kernel_size=1, bias=False)), ('bn0', nn.BatchNorm1d(64)), ('relu0', nn.LeakyReLU(negative_slope=0.2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv1d(in_features + 1088, 256, kernel_size=1, bias=False)), ('bn0', nn.BatchNorm1d(256)), ('relu0', nn.LeakyReLU(negative_slope=0.2)), ('drop0', nn.Dropout(p=0.4)), ('conv1', nn.Conv1d(256, 256, kernel_size=1, bias=False)), ('bn1', nn.BatchNorm1d(256)), ('relu1', nn.LeakyReLU(negative_slope=0.2)), ('drop1', nn.Dropout(p=0.4)), ('conv2', nn.Conv1d(256, 128, kernel_size=1, bias=False)), ('bn2', nn.BatchNorm1d(128)), ('relu2', nn.LeakyReLU(negative_slope=0.2)), ('conv3', nn.Conv1d(128, num_parts, kernel_size=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_51": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(4, 256, 2048)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.max_pool(features)",
                            "Call"
                        ],
                        [
                            "torch.cat((features, labels), dim=1)",
                            "Call"
                        ],
                        [
                            "features.repeat(1, 1, self.num_points)",
                            "Call"
                        ],
                        [
                            "torch.cat((features, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(features, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_17": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_23": {
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_28": {
                "in_channels": {
                    "value": "in_features + 1088",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_34": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_36": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_37": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_38": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_39": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_seg/models/layers.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_16": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv%d' % index, nn.Conv2d(in_features * 2, feature, kernel_size=1, bias=False)), ('bn%d' % index, nn.BatchNorm2d(feature)), ('relu%d' % index, nn.LeakyReLU(negative_slope=0.2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv%d' % index, nn.Conv2d(mlp[index - 1], feature, kernel_size=1, bias=False)), ('bn%d' % index, nn.BatchNorm2d(feature)), ('relu%d' % index, nn.LeakyReLU(negative_slope=0.2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "mlp[index - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_45": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_seg/runner/backbone_runner.py": {
        "torch": {
            "MSELoss_19": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "self.dataset[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "feeder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=self.transform, phase='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_83": {
                "variable": {
                    "value": "t_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model['train'](x, y)",
                            "Call"
                        ],
                        [
                            "torch.gather(t_hat, dim=-1, index=m)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.long().to(self.output_dev)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graph_ter_seg/runner/classifier_runner.py": {
        "torch": {
            "NLLLoss_21": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "feeder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='train')",
                            "Call"
                        ],
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "feeder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='train')",
                            "Call"
                        ],
                        [
                            "feeder_class(self.args.data_path, num_points=self.args.num_points, transform=None, phase='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_seg/runner/eval_runner.py": {
        "torch": {
            "NLLLoss_20": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.feeder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_seg/runner/runner.py": {
        "torch": {
            "CosineAnnealingLR_150": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.args.num_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.args.lr / 100.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_160": {
                "variable": {
                    "value": "check_points",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_178": {
                "variable": {
                    "value": "check_points",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_187": {
                "variable": {
                    "value": "check_points",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SGD_131": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model['train'].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model': model_weights, 'optimizer': optim_weights, 'scheduler': sched_weights}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_68": {
                "variable": {
                    "value": "self.model[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.output_dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model['train'].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_all_46": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graph_ter_seg/tools/utils.py": {
        "torch": {
            "sum_42": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_64": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_feats).repeat(1, 1, k, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_55": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}