{
    "examples/script_run_example.py": {
        "torch": {
            "tensor_101": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.hstack((np.hstack((np.random.normal(loc=0.1, scale=0.1, size=n_nodes), np.random.normal(loc=0.1, scale=0.1, size=n_edges))), np.hstack((np.log(np.clip(np.random.normal(loc=0.2, scale=0.1, size=n_nodes), 0.1, 2.0)), np.log(np.clip(np.random.normal(loc=0.2, scale=0.1, size=n_edges), 0.1, 2.0))))))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "prior_args[C]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_args['C']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_50": {
                "variable": {
                    "value": "x_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.last_coeffs - xt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_50": {
                "variable": {
                    "value": "x_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "events_i",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "varhawkes/excitation_kernels.py": {
        "torch": {
            "stack_129": {
                "tensors": {
                    "value": "[GaussianF.call(t) for GaussianF in self.GaussianFs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_135": {
                "tensors": {
                    "value": "[GaussianF.callIntegral(t) for GaussianF in self.GaussianFs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "exp_54": {
                "input": {
                    "value": "-self.decay * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_60": {
                "input": {
                    "value": "-self.decay * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "erf_81": {
                "input": {
                    "value": "self.t_m / (sigma * math.sqrt(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_91": {
                "input": {
                    "value": "-(t - self.t_m) ** 2 / (2 * self.sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_121": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "erf_100": {
                "input": {
                    "value": "(t - self.t_m) / (self.sigma * math.sqrt(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "varhawkes/hawkes_model.py": {
        "torch": {
            "zeros_81": {
                "variable": {
                    "value": "self._cache_integral",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.dim, self.excitation.M)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_105": {
                "variable": {
                    "value": "intens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu[i] + (W[i].unsqueeze(2) * self._cache[i]).sum(0).sum(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "(self.dim, self.excitation.M, len(events_i))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "varhawkes/learners.py": {
        "torch": {
            "ExponentialLR_112": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_82": {
                "input": {
                    "value": "self.coeffs - self.coeffs_prev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_125": {
                "input": {
                    "value": "self.coeffs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_200": {
                "input": {
                    "value": "self.coeffs - self.coeffs_prev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_245": {
                "input": {
                    "value": "self.coeffs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "varhawkes/models.py": {
        "torch": {
            "zeros_128": {
                "variable": {
                    "value": "log_w_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "opt_C_now",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.n_weights, self.n_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "log_w_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_196": {
                "variable": {
                    "value": "opt_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_tilde.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "opt_C_now",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.n_weights, self.n_params), dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_196": {
                "variable": {
                    "value": "opt_C",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "log_w_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_230": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "varhawkes/posteriors.py": {
        "torch": {
            "Normal_41": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "eps_err",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "self.bounds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Normal_170": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_213": {
                "variable": {
                    "value": "bound_cdf_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bounds_cdf[:, 1] - bounds_cdf[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "100000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_217": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(eps, alpha, beta)",
                            "Call"
                        ],
                        [
                            "alpha + sigma * self.norm.icdf(torch.clamp(bounds_cdf[:, 0] + eps * bound_cdf_diff, 1e-05, 1.0 - 1e-05))",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z, self.bounds[0], self.bounds[1])",
                            "Call"
                        ],
                        [
                            "self.g(eps, alpha, beta, True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "self.bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "alpha + eps * beta.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "log_phi - sigma.log() - z.log()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "alpha - beta.exp() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_109": {
                "input": {
                    "value": "alpha + 0.5 * beta.exp() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "eps_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(low=0.0, high=1.0, size=size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_271": {
                "input": {
                    "value": "alpha.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "self.bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "self.bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_136": {
                "input": {
                    "value": "2 * alpha + sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_152": {
                "input": {
                    "value": "-(torch.log(x) - alpha) ** 2 / (2 * sigma2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_152": {
                "input": {
                    "value": "sigma2 * 2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_215": {
                "input": {
                    "value": "bounds_cdf[:, 0] + eps * bound_cdf_diff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_152": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "varhawkes/priors.py": {
        "torch": {
            "zeros_like_67": {
                "variable": {
                    "value": "opt_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "z ** 2 / self.C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "z[self.dim:] / self.C[self.dim:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_60": {
                "input": {
                    "value": "z[:self.dim] ** 2 / self.C[:self.dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "varhawkes/utils/util.py": {
        "torch": {
            "exp_10": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x.max()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}