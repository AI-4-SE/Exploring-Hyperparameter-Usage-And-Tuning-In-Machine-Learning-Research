{
    "data/data.py": {
        "torch": {}
    },
    "data/dataset.py": {
        "torch": {}
    },
    "model/base_net.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_196": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.act(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.padding(out)",
                            "Call"
                        ],
                        [
                            "self.bn(self.conv(out))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.padding(out)",
                            "Call"
                        ],
                        [
                            "self.bn(self.conv(out))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "out * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "out * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_231": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.act(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.padding(out)",
                            "Call"
                        ],
                        [
                            "self.bn(self.conv(out))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.padding(out)",
                            "Call"
                        ],
                        [
                            "self.bn(self.conv(out))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "out * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "out * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.add(out, residual)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_122": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "variable": {
                    "value": "self.normlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_181": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_204": {
                "variable": {
                    "value": "self.normlayer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "middle_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_205": {
                "variable": {
                    "value": "self.normlayer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "middle_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "middle_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PReLU_40": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_61": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_82": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PReLU_88": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(self.padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(self.padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_125": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_161": {
                "variable": {
                    "value": "self.normlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PReLU_169": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_186": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_207": {
                "variable": {
                    "value": "self.normlayer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "middle_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_208": {
                "variable": {
                    "value": "self.normlayer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(self.padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "middle_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "middle_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PixelShuffle_24": {
                "upscale_factor": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_42": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_62": {},
            "LeakyReLU_90": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_171": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_30": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_44": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_92": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_99": {
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_124": {
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_173": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_184": {
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_218": {
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_46": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_94": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_175": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/hmb.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "x_compress",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.max(x, 1)[0].unsqueeze(1), torch.mean(x, 1).unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial(x_compress)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.res_block_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*res_block_s1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.res_block_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*res_block_s2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.res_block_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*res_block_s3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.res_block_s4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*res_block_s4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.res_block_s4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*res_block_s4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_104": {
                "variable": {
                    "value": "lr_pan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pan",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "rm_s2_pan",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rm_s2_0, rm_s2_1, rm_s2_2, rm_s2_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "rm_s4_pan",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rm_s4_0, rm_s4_1, rm_s4_2, rm_s4_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_103": {
                "input": {
                    "value": "x_pan",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "input": {
                    "value": "lr_pan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x_pan, scale_factor=1 / 2, mode='bicubic')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "input": {
                    "value": "l_ms",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "[s1, lr_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "[s3, x_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_119": {
                "input": {
                    "value": "l_ms",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "[torch.unsqueeze(s2[:, 0, :, :], 1), lr_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "[torch.unsqueeze(s2[:, 1, :, :], 1), lr_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "[torch.unsqueeze(s2[:, 2, :, :], 1), lr_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "[torch.unsqueeze(s2[:, 3, :, :], 1), lr_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "[torch.unsqueeze(s4[:, 0, :, :], 1), x_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "[torch.unsqueeze(s4[:, 1, :, :], 1), x_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "tensors": {
                    "value": "[torch.unsqueeze(s4[:, 2, :, :], 1), x_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[torch.unsqueeze(s4[:, 3, :, :], 1), x_pan]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_113": {
                "input": {
                    "value": "s2[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "input": {
                    "value": "s2[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_115": {
                "input": {
                    "value": "s2[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "input": {
                    "value": "s2[:, 3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_126": {
                "input": {
                    "value": "s4[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "input": {
                    "value": "s4[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "input": {
                    "value": "s4[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "input": {
                    "value": "s4[:, 3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/nonlocal_block.py": {
        "torch": {
            "Upsample_95": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x)",
                            "Call"
                        ],
                        [
                            "self.up(theta_x)",
                            "Call"
                        ],
                        [
                            "theta_x.view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x)",
                            "Call"
                        ],
                        [
                            "self.up(phi_x)",
                            "Call"
                        ],
                        [
                            "phi_x.view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_142": {
                "variable": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(f, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "f_pan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x)",
                            "Call"
                        ],
                        [
                            "self.up(theta_x)",
                            "Call"
                        ],
                        [
                            "theta_x.view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_pan_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi_pan(x1)",
                            "Call"
                        ],
                        [
                            "self.up(phi_pan_x)",
                            "Call"
                        ],
                        [
                            "phi_pan_x.view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_160": {
                "variable": {
                    "value": "f_pan_div_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_pan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_pan_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "y_pan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_pan_div_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(f_pan, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_pan_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_pan(x1).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_pan_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_166": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[W_y, W_pan_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.W_pan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.g_pan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g_pan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.phi_pan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi_pan",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "solver/basesolver.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg['data']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.val_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg['data']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "solver/solver.py": {
        "torch": {
            "manual_seed_141": {
                "seed": {
                    "value": "self.cfg['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_159": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "self.ckp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.cfg['checkpoint'] + '/' + str(self.log_name), 'latest.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_145": {
                "seed": {
                    "value": "self.cfg['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_device_155": {
                "device": {
                    "value": "self.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "y_vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y[:, 3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "y_vgg_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_vgg, y_vgg, y_vgg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "pan_image_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pan_image, pan_image, pan_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_165": {
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.cfg['pretrain']['pre_folder'], self.cfg['pretrain']['pre_sr'])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "clip_grad_norm__82": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.cfg['schedule']['gclip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_164": {
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.cfg['pretrain']['pre_folder'], self.cfg['pretrain']['pre_sr'])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "solver/testsolver.py": {
        "torch": {
            "manual_seed_35": {
                "seed": {
                    "value": "self.cfg['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg['threads']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "self.cfg['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_device_48": {
                "device": {
                    "value": "self.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg['threads']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "Adam_20": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['schedule']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(cfg['schedule']['beta1'], cfg['schedule']['beta2'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg['schedule']['epsilon']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MSELoss_32": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_22": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['schedule']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg['schedule']['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "L1Loss_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSprop_24": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['schedule']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "cfg['schedule']['alpha']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/vgg.py": {
        "torch": {
            "mse_loss_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vgg_sr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_forward(sr)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "vgg_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_forward(hr.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules[:8]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules[:35]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}