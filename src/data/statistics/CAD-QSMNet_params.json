{
    "constants.py": {
        "torch": {
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_79": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils.py": {
        "torch": {
            "from_numpy_67": {
                "variable": {
                    "value": "complex_dipole",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack([dipole_kernel, np.zeros_like(dipole_kernel)], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "field",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "field",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(field).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(field).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "(field - self.X_mean) / self.X_std",
                            "BinOp"
                        ],
                        [
                            "(field - self.X_mean) / self.X_std",
                            "BinOp"
                        ],
                        [
                            "(field - self.X_mean) / self.X_std",
                            "BinOp"
                        ],
                        [
                            "(field - self.X_mean) / self.X_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_22": {
                "variable": {
                    "value": "field",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "suscep",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "suscep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(suscep).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(suscep).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "(suscep - self.Y_mean) / self.Y_std",
                            "BinOp"
                        ],
                        [
                            "(suscep - self.Y_mean) / self.Y_std",
                            "BinOp"
                        ],
                        [
                            "(suscep - self.Y_mean) / self.Y_std",
                            "BinOp"
                        ],
                        [
                            "(suscep - self.Y_mean) / self.Y_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_23": {
                "variable": {
                    "value": "suscep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "permute_24": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "field",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "field",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(field).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(field).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "(field - self.X_mean) / self.X_std",
                            "BinOp"
                        ],
                        [
                            "(field - self.X_mean) / self.X_std",
                            "BinOp"
                        ],
                        [
                            "(field - self.X_mean) / self.X_std",
                            "BinOp"
                        ],
                        [
                            "(field - self.X_mean) / self.X_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_45": {
                "variable": {
                    "value": "field",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "suscep",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "suscep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(suscep).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(suscep).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "(suscep - self.Y_mean) / self.Y_std",
                            "BinOp"
                        ],
                        [
                            "(suscep - self.Y_mean) / self.Y_std",
                            "BinOp"
                        ],
                        [
                            "(suscep - self.Y_mean) / self.Y_std",
                            "BinOp"
                        ],
                        [
                            "(suscep - self.Y_mean) / self.Y_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_46": {
                "variable": {
                    "value": "suscep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "permute_47": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "roi_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "roi_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(roi_mask).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(roi_mask).permute(3, 0, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_29": {
                "variable": {
                    "value": "roi_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "roi_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "roi_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(roi_mask).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.empty(size, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(roi_mask).permute(3, 0, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_53": {
                "variable": {
                    "value": "roi_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_313": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "QSMDataset('test', get_statistics=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(base_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_372": {
                "variable": {
                    "value": "label_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "y * y_std + y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "std_373": {
                "variable": {
                    "value": "label_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "y * y_std + y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(input_data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(f[key].__array__())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.asanyarray(nifti.dataobj))",
                            "Call"
                        ],
                        [
                            "input_data.squeeze().unsqueeze(0).unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "(input_data.to(device) - b_mean) / b_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_281": {
                "variable": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty((160, 192, 192, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rm).squeeze().byte()",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rm).squeeze().unsqueeze(0).unsqueeze(0).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_398": {
                "variable": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty((160, 192, 192, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rm).squeeze().byte()",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rm).squeeze().unsqueeze(0).unsqueeze(0).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_398": {
                "variable": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_398": {
                "variable": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_417": {
                "variable": {
                    "value": "label_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_418": {
                "variable": {
                    "value": "label_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f[key].__array__()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asanyarray(nifti.dataobj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_254": {
                "variable": {
                    "value": "sim_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network(input_data) * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "chi.numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "network(b)",
                            "Call"
                        ],
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "network(b)",
                            "Call"
                        ],
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "std_255": {
                "variable": {
                    "value": "sim_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network(input_data) * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "chi.numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "network(b)",
                            "Call"
                        ],
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "network(b)",
                            "Call"
                        ],
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_259": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "np.clip(recon, -0.1, 0.1) * 5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_260": {
                "variable": {
                    "value": "sim_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "np.clip(recon, -0.1, 0.1) * 5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_261": {
                "variable": {
                    "value": "sim_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "np.clip(recon, -0.1, 0.1) * 5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_355": {
                "variable": {
                    "value": "sim_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network(input_data) * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "chi.numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "network(b)",
                            "Call"
                        ],
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "network(b)",
                            "Call"
                        ],
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "std_356": {
                "variable": {
                    "value": "sim_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network(input_data) * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "chi.numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "network(b)",
                            "Call"
                        ],
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "network(b)",
                            "Call"
                        ],
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_363": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "np.clip(recon, -0.1, 0.1) * 5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_363": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_363": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_364": {
                "variable": {
                    "value": "sim_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "np.clip(recon, -0.1, 0.1) * 5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_365": {
                "variable": {
                    "value": "sim_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "np.clip(recon, -0.1, 0.1) * 5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_235": {
                "ndarray": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f['temp'].__array__()",
                            "Call"
                        ],
                        [
                            "(torch.from_numpy(b) - b_mean) / b_std",
                            "BinOp"
                        ],
                        [
                            "b.unsqueeze(0).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "b.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_284": {
                "variable": {
                    "value": "recon_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi.squeeze()[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_285": {
                "variable": {
                    "value": "recon_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi.squeeze()[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_289": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "np.clip(recon, -0.1, 0.1) * 5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_290": {
                "variable": {
                    "value": "recon_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_291": {
                "variable": {
                    "value": "recon_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_401": {
                "variable": {
                    "value": "recon_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_402": {
                "variable": {
                    "value": "recon_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_409": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "loadmat(checkpoint)[f'chi{sim_number}']",
                            "Subscript"
                        ],
                        [
                            "np.clip(recon, -0.1, 0.1) * 5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "np.empty((176, 176, 160, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon).permute(3, 0, 1, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_409": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_409": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_410": {
                "variable": {
                    "value": "recon_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_411": {
                "variable": {
                    "value": "recon_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "inference_lite.py": {
        "torch": {
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_45": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(base_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fliplr(y).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "ndarray": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f['temp'].__array__()",
                            "Call"
                        ],
                        [
                            "(torch.from_numpy(b) - b_mean) / b_std",
                            "BinOp"
                        ],
                        [
                            "b.unsqueeze(0).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "b * b_std + b_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_103": {
                "input": {
                    "value": "b[0, 0, :, :, ::20].permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.05",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_104": {
                "input": {
                    "value": "chi[0, 0, :, :, ::20].permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "input": {
                    "value": "y[:, :, ::20].permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "inference_res.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_108": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(base_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(input_data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(f[key].__array__())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.asanyarray(nifti.dataobj))",
                            "Call"
                        ],
                        [
                            "input_data.squeeze().unsqueeze(0).unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "(input_data.to(device) - b_mean) / b_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f[f'Sus_ilsqr'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty((160, 192, 192, 1), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rm).squeeze().byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_184": {
                "variable": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f[key].__array__()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asanyarray(nifti.dataobj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_157": {
                "variable": {
                    "value": "sim_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network(input_data) * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "chi.numpy()",
                            "Call"
                        ],
                        [
                            "chi_res.cpu() + recon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "std_158": {
                "variable": {
                    "value": "sim_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network(input_data) * y_std + y_mean",
                            "BinOp"
                        ],
                        [
                            "chi.cpu()",
                            "Call"
                        ],
                        [
                            "chi.numpy()",
                            "Call"
                        ],
                        [
                            "chi_res.cpu() + recon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f[f'Sus_ilsqr'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_163": {
                "variable": {
                    "value": "sim_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f[f'Sus_ilsqr'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_164": {
                "variable": {
                    "value": "sim_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f[f'Sus_ilsqr'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f['temp'].__array__()",
                            "Call"
                        ],
                        [
                            "(torch.from_numpy(b) - b_mean) / b_std",
                            "BinOp"
                        ],
                        [
                            "b.unsqueeze(0).unsqueeze(0).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_187": {
                "variable": {
                    "value": "recon_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi.squeeze()[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_188": {
                "variable": {
                    "value": "recon_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi.squeeze()[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f[f'Sus_ilsqr'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ],
                        [
                            "f[f'Sus_{method.lower()}'].__array__()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(recon)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_193": {
                "variable": {
                    "value": "recon_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_194": {
                "variable": {
                    "value": "recon_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon[rm]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "rfft_29": {
                "variable": {
                    "value": "chi_fourier",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ]
                    ]
                },
                "signal_ndim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "irfft_31": {
                "variable": {
                    "value": "b_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_hat_fourier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "chi_fourier * d",
                            "BinOp"
                        ]
                    ]
                },
                "signal_ndim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "ss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sx, sy, sz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "ss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_68": {
                "variable": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_97": {
                "variable": {
                    "value": "difference",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b - b_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "sobel",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_143": {
                "variable": {
                    "value": "mu1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255 * img1 / max_img",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "loss_ssim.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_144": {
                "variable": {
                    "value": "mu2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255 * img2 / max_img",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "loss_ssim.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_183": {
                "variable": {
                    "value": "img1_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255 * img1 / max_img",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "loss_hfen.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_184": {
                "variable": {
                    "value": "img2_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255 * img2 / max_img",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "loss_hfen.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_12": {
                "input": {
                    "value": "torch.abs(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "(x1 - x2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "torch.sum(x ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "torch.abs(difference)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "F.mse_loss(chi, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_112": {
                "variable": {
                    "value": "chi_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_113": {
                "variable": {
                    "value": "y_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ],
                        [
                            "torch.arange(-size, size + 1).reshape(1, filter_size, 1)",
                            "Call"
                        ],
                        [
                            "y.repeat(filter_size, 1, filter_size).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_118": {
                "variable": {
                    "value": "chi_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_119": {
                "variable": {
                    "value": "y_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ],
                        [
                            "torch.arange(-size, size + 1).reshape(1, filter_size, 1)",
                            "Call"
                        ],
                        [
                            "y.repeat(filter_size, 1, filter_size).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_123": {
                "input": {
                    "value": "torch.mean((b * chi - y + a) ** 2 * 2 / (b ** 2 + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_158": {
                "input": {
                    "value": "ssim_map[img1 != 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_167": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-size",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_169": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-size",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_171": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-size",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_174": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(x ** 2 / (2 * sigma ** 2) + y ** 2 / (2 * sigma ** 2) + z ** 2 / (2 * sigma ** 2))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_12": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(5, 5, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_98": {
                "input": {
                    "value": "difference",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv3d(b - b_hat, sobel, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_106": {
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ],
                        [
                            "torch.arange(-size, size + 1).reshape(1, filter_size, 1)",
                            "Call"
                        ],
                        [
                            "y.repeat(filter_size, 1, filter_size).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_123": {
                "input": {
                    "value": "(b * chi - y + a) ** 2 * 2 / (b ** 2 + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_132": {
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255 * img2 / max_img",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_137": {
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255 * img2 / max_img",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv3d_150": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "loss_ssim.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_151": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "loss_ssim.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_152": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "loss_ssim.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_190": {
                "input": {
                    "value": "(torch.max(y) - torch.min(y)) ** 2 / F.mse_loss(chi, y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "(chi - chi_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_115": {
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_120": {
                "input": {
                    "value": "(chi - chi_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_121": {
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_175": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-(x ** 2 / (2 * sigma ** 2) + y ** 2 / (2 * sigma ** 2) + z ** 2 / (2 * sigma ** 2)))",
                            "Call"
                        ],
                        [
                            "h / torch.sum(h)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_180": {
                "input": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arg * h",
                            "BinOp"
                        ],
                        [
                            "H - torch.sum(H) / (2 * 1.5 ** 2 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_190": {
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "chi * y_std + y_mean",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ],
                        [
                            "torch.arange(-size, size + 1).reshape(1, filter_size, 1)",
                            "Call"
                        ],
                        [
                            "y.repeat(filter_size, 1, filter_size).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_190": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ],
                        [
                            "torch.arange(-size, size + 1).reshape(1, filter_size, 1)",
                            "Call"
                        ],
                        [
                            "y.repeat(filter_size, 1, filter_size).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_190": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ],
                        [
                            "torch.arange(-size, size + 1).reshape(1, filter_size, 1)",
                            "Call"
                        ],
                        [
                            "y.repeat(filter_size, 1, filter_size).double()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_ch, out_ch, 5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_36": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_48": {
                "variable": {
                    "value": "self.upconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_conv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_77": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_92": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_13": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_14": {
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_16": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_17": {
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_95": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "QSMDataset('train')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "QSMDataset('val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_117": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "comment": {
                    "value": "'_' + identifier + '_' + exp_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_cache_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_109": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "{'epoch': last_epoch, 'model': network, 'optimizer': optimizer}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_path, '{}-epoch{:02d}.ckpt'.format(identifier, last_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_49": {
                "input": {
                    "value": "b[0, 0, :, :, ::20].permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.05",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_50": {
                "input": {
                    "value": "chi[0, 0, :, :, ::20].permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "input": {
                    "value": "y[0, 0, :, :, ::20].permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_res.py": {
        "torch": {
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "QSMDataset('res_train')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "QSMDataset('res_val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_113": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "comment": {
                    "value": "'_' + identifier + '_' + exp_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_cache_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_105": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "{'epoch': last_epoch, 'model': network, 'optimizer': optimizer}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_path, '{}-epoch{:02d}.ckpt'.format(identifier, last_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_53": {
                "input": {
                    "value": "b[0, 0, :, :, ::20].permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.05",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_54": {
                "input": {
                    "value": "chi[0, 0, :, :, ::20].permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_55": {
                "input": {
                    "value": "y[0, 0, :, :, ::20].permute(2, 0, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}