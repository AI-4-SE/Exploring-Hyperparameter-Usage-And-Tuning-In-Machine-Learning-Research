{
    "demos/community_detection/utils.py": {
        "sklearn": {
            "DBSCAN_203": {
                "variable": {
                    "value": "db",
                    "possible_values": []
                },
                "eps": {
                    "value": "e",
                    "possible_values": [
                        [
                            "np.arange(e_lower, e_upper, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "m",
                    "possible_values": [
                        [
                            "np.arange(m_lower, m_upper, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "stellargraph/calibration.py": {
        "sklearn": {
            "LogisticRegression_266": {
                "variable": {
                    "value": "self.lr",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "IsotonicRegression_417": {
                "out_of_bounds": {
                    "value": "clip",
                    "possible_values": []
                }
            },
            "IsotonicRegression_423": {
                "out_of_bounds": {
                    "value": "clip",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Variable_218": {
                "variable": {
                    "value": "T",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones(shape=(1,))",
                    "possible_values": []
                },
                "name": {
                    "value": "T",
                    "possible_values": []
                }
            },
            "Adam_237": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "multiply_222": {
                "variable": {
                    "value": "scaled_logits",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / T",
                    "possible_values": []
                }
            },
            "reduce_mean_224": {
                "variable": {
                    "value": "cost_value",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=scaled_logits, labels=y)",
                    "possible_values": []
                }
            },
            "ones_218": {
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_225": {
                "logits": {
                    "value": "scaled_logits",
                    "possible_values": [
                        [
                            "tf.multiply(name='z', x=x, y=1.0 / T)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "possible_values": []
                }
            },
            "GradientTape_232": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/datasets/datasets.py": {
        "sklearn": {
            "OneHotEncoder_443": {
                "variable": {
                    "value": "feature_encoding",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "scale_445": {
                "variable": {
                    "value": "scaled_age",
                    "possible_values": []
                },
                "X": {
                    "value": "users['age']",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/ensemble.py": {
        "tensorflow": {
            "clone_model_105": {
                "model": {
                    "value": "model",
                    "possible_values": [
                        [
                            "self.models",
                            "Attribute"
                        ],
                        [
                            "self.models",
                            "Attribute"
                        ],
                        [
                            "self.models",
                            "Attribute"
                        ],
                        [
                            "predict_models",
                            "Name"
                        ],
                        [
                            "self.models",
                            "Attribute"
                        ]
                    ]
                }
            },
            "EarlyStopping_276": {
                "monitor": {
                    "value": "early_stopping_monitor",
                    "possible_values": [
                        [
                            "'val_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'val_loss'",
                            "MethodArgument"
                        ]
                    ]
                },
                "patience": {
                    "value": "self.early_stoppping_patience",
                    "possible_values": []
                },
                "restore_best_weights": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Model_500": {
                "inputs": {
                    "value": "model.input",
                    "possible_values": []
                },
                "outputs": {
                    "value": "model.layers[output_layer].output",
                    "possible_values": []
                }
            },
            "EarlyStopping_701": {
                "monitor": {
                    "value": "early_stopping_monitor",
                    "possible_values": [
                        [
                            "'val_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'val_loss'",
                            "MethodArgument"
                        ]
                    ]
                },
                "patience": {
                    "value": "self.early_stoppping_patience",
                    "possible_values": []
                },
                "restore_best_weights": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/interpretability/saliency_maps/integrated_gradients.py": {
        "tensorflow": {
            "convert_to_tensor_224": {
                "variable": {
                    "value": "class_of_interest",
                    "possible_values": []
                },
                "value": {
                    "value": "class_of_interest",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(class_of_interest)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_232": {
                "variable": {
                    "value": "cost_value",
                    "possible_values": []
                },
                "params": {
                    "value": "output[0, 0]",
                    "possible_values": []
                },
                "indices": {
                    "value": "class_of_interest",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(class_of_interest)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_226": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "convert_to_tensor_120": {
                "value": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "convert_to_tensor_180": {
                "value": {
                    "value": "x",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/interpretability/saliency_maps/integrated_gradients_gat.py": {
        "tensorflow": {}
    },
    "stellargraph/interpretability/saliency_maps/saliency_gat.py": {
        "tensorflow": {
            "gather_79": {
                "variable": {
                    "value": "cost_value",
                    "possible_values": []
                },
                "params": {
                    "value": "output[0, 0]",
                    "possible_values": []
                },
                "indices": {
                    "value": "class_of_interest",
                    "possible_values": []
                }
            },
            "convert_to_tensor_70": {
                "variable": {
                    "value": "node_mask_tensors[i]",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "GradientTape_75": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "convert_to_tensor_88": {
                "variable": {
                    "value": "link_mask_tensors[i]",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "GradientTape_93": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gather_102": {
                "variable": {
                    "value": "cost_value",
                    "possible_values": []
                },
                "params": {
                    "value": "output[0, 0]",
                    "possible_values": []
                },
                "indices": {
                    "value": "class_of_interest",
                    "possible_values": []
                }
            },
            "gather_98": {
                "params": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.model.output",
                            "Attribute"
                        ],
                        [
                            "self.model(model_input)",
                            "Call"
                        ],
                        [
                            "self.model(model_input)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "out_indices",
                    "possible_values": [
                        [
                            "np.array([[node_id]])",
                            "Call"
                        ],
                        [
                            "np.array([[node_id]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "stellargraph/layer/appnp.py": {
        "tensorflow": {
            "Input_370": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_features)",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "propagated_features",
                    "possible_values": []
                },
                "input": {
                    "value": "propagated_features",
                    "possible_values": [
                        [
                            "K.squeeze(propagated_features, 0)",
                            "Call"
                        ],
                        [
                            "K.dot(A, propagated_features)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(propagated_features, 0)",
                            "Call"
                        ],
                        [
                            "K.batch_dot(A, propagated_features)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "dot_145": {
                "variable": {
                    "value": "propagated_features",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "possible_values": [
                        [
                            "As[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "propagated_features",
                    "possible_values": [
                        [
                            "K.squeeze(propagated_features, 0)",
                            "Call"
                        ],
                        [
                            "K.dot(A, propagated_features)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(propagated_features, 0)",
                            "Call"
                        ],
                        [
                            "K.batch_dot(A, propagated_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_146": {
                "variable": {
                    "value": "propagated_features",
                    "possible_values": []
                },
                "input": {
                    "value": "propagated_features",
                    "possible_values": [
                        [
                            "K.squeeze(propagated_features, 0)",
                            "Call"
                        ],
                        [
                            "K.dot(A, propagated_features)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(propagated_features, 0)",
                            "Call"
                        ],
                        [
                            "K.batch_dot(A, propagated_features)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Input_378": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Input_380": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, multiplicity)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Input_385": {
                "variable": {
                    "value": "A_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_386": {
                "variable": {
                    "value": "A_values_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Input_391": {
                "variable": {
                    "value": "A_m",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_nodes)",
                    "possible_values": []
                }
            },
            "Dropout_281": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Dense_283": {
                "units": {
                    "value": "l",
                    "possible_values": [
                        [
                            "self.layer_sizes[ii]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "a",
                    "possible_values": [
                        [
                            "self.activations[ii]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "Dropout_294": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Lambda_414": {
                "function": {
                    "value": "lambda x: K.squeeze(x, 0)",
                    "possible_values": []
                }
            },
            "squeeze_414": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/attri2vec.py": {
        "tensorflow": {
            "Input_193": {
                "variable": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.input_feature_size,)",
                    "possible_values": []
                }
            },
            "Input_213": {
                "variable": {
                    "value": "x_inp_dst",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "Lambda_101": {
                "variable": {
                    "value": "self._normalization",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: K.l2_normalize(x, axis=-1)",
                    "possible_values": []
                }
            },
            "Embedding_137": {
                "variable": {
                    "value": "self._output_embedding",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.input_node_num",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "layer_sizes[-1]",
                    "possible_values": []
                },
                "input_length": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "output_embedding",
                    "possible_values": []
                }
            },
            "Lambda_104": {
                "variable": {
                    "value": "self._normalization",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: x",
                    "possible_values": []
                }
            },
            "Dense_130": {
                "units": {
                    "value": "layer_size",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "self.bias",
                    "possible_values": []
                }
            },
            "Reshape_217": {
                "target_shape": {
                    "value": "(self.dims[self.n_layers],)",
                    "possible_values": []
                }
            },
            "l2_normalize_101": {
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/cluster_gcn.py": {
        "tensorflow": {}
    },
    "stellargraph/layer/deep_graph_infomax.py": {
        "tensorflow": {
            "matvec_68": {
                "a": {
                    "value": "self.kernel",
                    "possible_values": []
                },
                "b": {
                    "value": "summary",
                    "possible_values": [
                        [
                            "tf.reduce_mean(node_feats, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.math.sigmoid(summary)",
                            "Call"
                        ],
                        [
                            "DGIReadout()(node_feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "node_feats",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "x": {
                    "value": "summary",
                    "possible_values": [
                        [
                            "tf.reduce_mean(node_feats, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.math.sigmoid(summary)",
                            "Call"
                        ],
                        [
                            "DGIReadout()(node_feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_192": {
                "variable": {
                    "value": "x_out",
                    "possible_values": []
                },
                "values": {
                    "value": "[scores, scores_corrupted]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Lambda_213": {
                "variable": {
                    "value": "squeeze_layer",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: K.squeeze(x, axis=0)",
                    "possible_values": []
                },
                "name": {
                    "value": "squeeze",
                    "possible_values": []
                }
            },
            "Input_177": {
                "batch_shape": {
                    "value": "x_inp[i].shape",
                    "possible_values": []
                }
            },
            "squeeze_213": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/gcn.py": {
        "tensorflow": {
            "get_87": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_94": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_95": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_96": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_97": {
                "variable": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_98": {
                "variable": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_99": {
                "variable": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dot_213": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "a": {
                    "value": "h_graph",
                    "possible_values": [
                        [
                            "K.batch_dot(A, features)",
                            "Call"
                        ],
                        [
                            "K.dot(A, features_sq)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(h_graph, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "possible_values": []
                }
            },
            "Input_452": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_features)",
                    "possible_values": []
                }
            },
            "squeeze_208": {
                "variable": {
                    "value": "features_sq",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "dot_209": {
                "variable": {
                    "value": "h_graph",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "possible_values": [
                        [
                            "As[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "features_sq",
                    "possible_values": [
                        [
                            "K.squeeze(features, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_210": {
                "variable": {
                    "value": "h_graph",
                    "possible_values": []
                },
                "input": {
                    "value": "h_graph",
                    "possible_values": [
                        [
                            "K.batch_dot(A, features)",
                            "Call"
                        ],
                        [
                            "K.dot(A, features_sq)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(h_graph, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Input_460": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Input_462": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, multiplicity)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Input_467": {
                "variable": {
                    "value": "A_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_468": {
                "variable": {
                    "value": "A_values_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Input_473": {
                "variable": {
                    "value": "A_m",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_nodes)",
                    "possible_values": []
                }
            },
            "serialize_115": {
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "serialize_116": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_117": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_118": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                }
            },
            "serialize_119": {
                "activation": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                }
            },
            "serialize_120": {
                "activation": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                }
            },
            "serialize_121": {
                "activation": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                }
            },
            "Dropout_366": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Lambda_483": {
                "function": {
                    "value": "lambda x: K.squeeze(x, 0)",
                    "possible_values": []
                }
            },
            "squeeze_483": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/gcn_lstm.py": {
        "tensorflow": {
            "get_74": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_77": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_78": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_79": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_80": {
                "variable": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_81": {
                "variable": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_82": {
                "variable": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_184": {
                "variable": {
                    "value": "nodes_last",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "dot_185": {
                "variable": {
                    "value": "neighbours",
                    "possible_values": []
                },
                "a": {
                    "value": "nodes_last",
                    "possible_values": [
                        [
                            "tf.transpose(features, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.A",
                    "possible_values": []
                }
            },
            "transpose_188": {
                "variable": {
                    "value": "h_graph",
                    "possible_values": []
                },
                "a": {
                    "value": "neighbours",
                    "possible_values": [
                        [
                            "K.dot(nodes_last, self.A)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "dot_190": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "a": {
                    "value": "h_graph",
                    "possible_values": [
                        [
                            "tf.transpose(neighbours, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "possible_values": []
                }
            },
            "get_298": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_299": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_300": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_301": {
                "variable": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_302": {
                "variable": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_303": {
                "variable": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_354": {
                "variable": {
                    "value": "self._decoder_layer",
                    "possible_values": []
                },
                "units": {
                    "value": "self.outputs",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                }
            },
            "Input_409": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "(None, self.n_nodes, self.n_features, self.variates)",
                            "Tuple"
                        ],
                        [
                            "(None, self.n_nodes, self.n_features)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Input_412": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(None, self.n_nodes)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "constant_141": {
                "variable": {
                    "value": "adj_init",
                    "possible_values": []
                },
                "value": {
                    "value": "self.adj",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "adj_init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "expand_dims_364": {
                "variable": {
                    "value": "h_layer",
                    "possible_values": []
                },
                "input": {
                    "value": "h_layer",
                    "possible_values": [
                        [
                            "x_in",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(h_layer, axis=-1)",
                            "Call"
                        ],
                        [
                            "Reshape((self.n_nodes, self.seq_len * self.variates))(h_layer)",
                            "Call"
                        ],
                        [
                            "layer(h_layer)",
                            "Call"
                        ],
                        [
                            "Reshape((self.n_nodes, -1, self.variates))(h_layer)",
                            "Call"
                        ],
                        [
                            "Permute((2, 1, 3))(h_layer)",
                            "Call"
                        ],
                        [
                            "Reshape((-1, self.n_nodes * self.variates))(h_layer)",
                            "Call"
                        ],
                        [
                            "layer(h_layer)",
                            "Call"
                        ],
                        [
                            "Dropout(self.dropout)(h_layer)",
                            "Call"
                        ],
                        [
                            "self._decoder_layer(h_layer)",
                            "Call"
                        ],
                        [
                            "Reshape((self.n_nodes, self.variates))(h_layer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "serialize_98": {
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "serialize_99": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_100": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_101": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                }
            },
            "serialize_102": {
                "activation": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                }
            },
            "serialize_103": {
                "activation": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                }
            },
            "serialize_104": {
                "activation": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                }
            },
            "LSTM_342": {
                "units": {
                    "value": "layer_size",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LSTM_348": {
                "units": {
                    "value": "self.lstm_layer_sizes[-1]",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.lstm_activations[-1]",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Reshape_368": {
                "target_shape": {
                    "value": "(self.n_nodes, self.seq_len * self.variates)",
                    "possible_values": []
                }
            },
            "Reshape_375": {
                "target_shape": {
                    "value": "(self.n_nodes, -1, self.variates)",
                    "possible_values": []
                }
            },
            "Permute_378": {
                "dims": {
                    "value": "(2, 1, 3)",
                    "possible_values": []
                }
            },
            "Reshape_380": {
                "target_shape": {
                    "value": "(-1, self.n_nodes * self.variates)",
                    "possible_values": []
                }
            },
            "Dropout_385": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Reshape_391": {
                "target_shape": {
                    "value": "(self.n_nodes, self.variates)",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/graph_attention.py": {
        "tensorflow": {
            "get_111": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_131": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_132": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_133": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_134": {
                "variable": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_135": {
                "variable": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_136": {
                "variable": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_137": {
                "variable": {
                    "value": "self.attn_kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "attn_kernel_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_138": {
                "variable": {
                    "value": "self.attn_kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "attn_kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_139": {
                "variable": {
                    "value": "self.attn_kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "attn_kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Input_902": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_features)",
                    "possible_values": []
                }
            },
            "squeeze_292": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.squeeze(X, 0)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.squeeze(X, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "squeeze_293": {
                "variable": {
                    "value": "A",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "K.squeeze(A, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "dot_303": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.squeeze(X, 0)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.squeeze(X, 0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "self.add_weight(shape=(input_dim, self.units), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, name='kernel_{}'.format(head))",
                            "Call"
                        ],
                        [
                            "self.kernels[head]",
                            "Subscript"
                        ],
                        [
                            "self.kernels[head]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dot_307": {
                "variable": {
                    "value": "attn_for_self",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "possible_values": [
                        [
                            "K.dot(X, kernel)",
                            "Call"
                        ],
                        [
                            "K.dot(X, kernel)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_kernel[0]",
                    "possible_values": []
                }
            },
            "dot_310": {
                "variable": {
                    "value": "attn_for_neighs",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "possible_values": [
                        [
                            "K.dot(X, kernel)",
                            "Call"
                        ],
                        [
                            "K.dot(X, kernel)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_kernel[1]",
                    "possible_values": []
                }
            },
            "dot_348": {
                "variable": {
                    "value": "node_features",
                    "possible_values": []
                },
                "a": {
                    "value": "dropout_attn",
                    "possible_values": [
                        [
                            "Dropout(self.attn_dropout_rate)(dense)",
                            "Call"
                        ],
                        [
                            "Dropout(self.attn_dropout_rate)(attn_values)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "dropout_feat",
                    "possible_values": [
                        [
                            "Dropout(self.in_dropout_rate)(features)",
                            "Call"
                        ],
                        [
                            "Dropout(self.in_dropout_rate)(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "concatenate_358": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "arys": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_360": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "a": {
                    "value": "K.stack(outputs)",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_367": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "K.concatenate(outputs)",
                            "Call"
                        ],
                        [
                            "K.mean(K.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(output, 0)",
                            "Call"
                        ],
                        [
                            "K.concatenate(outputs)",
                            "Call"
                        ],
                        [
                            "K.mean(K.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "squeeze_447": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.squeeze(X, 0)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.squeeze(X, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "dot_457": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.squeeze(X, 0)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "K.squeeze(X, 0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "self.add_weight(shape=(input_dim, self.units), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, name='kernel_{}'.format(head))",
                            "Call"
                        ],
                        [
                            "self.kernels[head]",
                            "Subscript"
                        ],
                        [
                            "self.kernels[head]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dot_461": {
                "variable": {
                    "value": "attn_for_self",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "possible_values": [
                        [
                            "K.dot(X, kernel)",
                            "Call"
                        ],
                        [
                            "K.dot(X, kernel)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_kernel[0]",
                    "possible_values": []
                }
            },
            "dot_464": {
                "variable": {
                    "value": "attn_for_neighs",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "possible_values": [
                        [
                            "K.dot(X, kernel)",
                            "Call"
                        ],
                        [
                            "K.dot(X, kernel)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_kernel[1]",
                    "possible_values": []
                }
            },
            "gather_469": {
                "variable": {
                    "value": "sparse_attn_self",
                    "possible_values": []
                },
                "params": {
                    "value": "K.reshape(attn_for_self, [-1])",
                    "possible_values": []
                },
                "indices": {
                    "value": "A_indices[:, 0]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "gather_472": {
                "variable": {
                    "value": "sparse_attn_neighs",
                    "possible_values": []
                },
                "params": {
                    "value": "K.reshape(attn_for_neighs, [-1])",
                    "possible_values": []
                },
                "indices": {
                    "value": "A_indices[:, 1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "SparseTensor_485": {
                "variable": {
                    "value": "sparse_attn",
                    "possible_values": []
                },
                "indices": {
                    "value": "A_indices",
                    "possible_values": [
                        [
                            "A_sparse.indices",
                            "Attribute"
                        ]
                    ]
                },
                "values": {
                    "value": "dropout_attn",
                    "possible_values": [
                        [
                            "Dropout(self.attn_dropout_rate)(dense)",
                            "Call"
                        ],
                        [
                            "Dropout(self.attn_dropout_rate)(attn_values)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[n_nodes, n_nodes]",
                    "possible_values": []
                }
            },
            "softmax_490": {
                "variable": {
                    "value": "sparse_attn",
                    "possible_values": []
                },
                "logits": {
                    "value": "sparse_attn",
                    "possible_values": [
                        [
                            "tf.sparse.SparseTensor(A_indices, values=dropout_attn, dense_shape=[n_nodes, n_nodes])",
                            "Call"
                        ],
                        [
                            "tf.sparse.softmax(sparse_attn)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_dense_matmul_493": {
                "variable": {
                    "value": "node_features",
                    "possible_values": []
                },
                "sp_a": {
                    "value": "sparse_attn",
                    "possible_values": [
                        [
                            "tf.sparse.SparseTensor(A_indices, values=dropout_attn, dense_shape=[n_nodes, n_nodes])",
                            "Call"
                        ],
                        [
                            "tf.sparse.softmax(sparse_attn)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "dropout_feat",
                    "possible_values": [
                        [
                            "Dropout(self.in_dropout_rate)(features)",
                            "Call"
                        ],
                        [
                            "Dropout(self.in_dropout_rate)(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "concatenate_505": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "arys": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_507": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "a": {
                    "value": "K.stack(outputs)",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_513": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "K.concatenate(outputs)",
                            "Call"
                        ],
                        [
                            "K.mean(K.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(output, 0)",
                            "Call"
                        ],
                        [
                            "K.concatenate(outputs)",
                            "Call"
                        ],
                        [
                            "K.mean(K.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Lambda_784": {
                "variable": {
                    "value": "self._normalization",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: K.l2_normalize(x, axis=2)",
                    "possible_values": []
                }
            },
            "Input_910": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Input_912": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, multiplicity)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Input_917": {
                "variable": {
                    "value": "A_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_918": {
                "variable": {
                    "value": "A_values_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Input_923": {
                "variable": {
                    "value": "A_m",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_nodes)",
                    "possible_values": []
                }
            },
            "serialize_154": {
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "serialize_157": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_158": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_159": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                }
            },
            "serialize_160": {
                "activation": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                }
            },
            "serialize_161": {
                "activation": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                }
            },
            "serialize_162": {
                "activation": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                }
            },
            "serialize_163": {
                "activation": {
                    "value": "self.attn_kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_166": {
                "activation": {
                    "value": "self.attn_kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_169": {
                "activation": {
                    "value": "self.attn_kernel_constraint",
                    "possible_values": []
                }
            },
            "softmax_329": {
                "variable": {
                    "value": "dense",
                    "possible_values": []
                },
                "logits": {
                    "value": "dense",
                    "possible_values": [
                        [
                            "attn_for_self + K.transpose(attn_for_neighs)",
                            "BinOp"
                        ],
                        [
                            "LeakyReLU(alpha=0.2)(dense)",
                            "Call"
                        ],
                        [
                            "dense + mask",
                            "BinOp"
                        ],
                        [
                            "K.softmax(dense)",
                            "Call"
                        ],
                        [
                            "W / K.sum(W, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bias_add_351": {
                "variable": {
                    "value": "node_features",
                    "possible_values": []
                },
                "value": {
                    "value": "node_features",
                    "possible_values": [
                        [
                            "K.dot(dropout_attn, dropout_feat)",
                            "Call"
                        ],
                        [
                            "K.bias_add(node_features, self.biases[head])",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(sparse_attn, dropout_feat)",
                            "Call"
                        ],
                        [
                            "K.bias_add(node_features, self.biases[head])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.biases[head]",
                    "possible_values": []
                }
            },
            "bias_add_498": {
                "variable": {
                    "value": "node_features",
                    "possible_values": []
                },
                "value": {
                    "value": "node_features",
                    "possible_values": [
                        [
                            "K.dot(dropout_attn, dropout_feat)",
                            "Call"
                        ],
                        [
                            "K.bias_add(node_features, self.biases[head])",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(sparse_attn, dropout_feat)",
                            "Call"
                        ],
                        [
                            "K.bias_add(node_features, self.biases[head])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.biases[head]",
                    "possible_values": []
                }
            },
            "Lambda_787": {
                "variable": {
                    "value": "self._normalization",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: x",
                    "possible_values": []
                }
            },
            "ones_208": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "transpose_315": {
                "a": {
                    "value": "attn_for_neighs",
                    "possible_values": [
                        [
                            "K.dot(features, attention_kernel[1])",
                            "Call"
                        ],
                        [
                            "K.dot(features, attention_kernel[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_320": {
                "alpha": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Dropout_344": {
                "rate": {
                    "value": "self.in_dropout_rate",
                    "possible_values": []
                }
            },
            "Dropout_345": {
                "rate": {
                    "value": "self.attn_dropout_rate",
                    "possible_values": []
                }
            },
            "stack_360": {
                "values": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_470": {
                "tensor": {
                    "value": "attn_for_self",
                    "possible_values": [
                        [
                            "K.dot(features, attention_kernel[0])",
                            "Call"
                        ],
                        [
                            "K.dot(features, attention_kernel[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_473": {
                "tensor": {
                    "value": "attn_for_neighs",
                    "possible_values": [
                        [
                            "K.dot(features, attention_kernel[1])",
                            "Call"
                        ],
                        [
                            "K.dot(features, attention_kernel[1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "LeakyReLU_478": {
                "alpha": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Dropout_481": {
                "rate": {
                    "value": "self.in_dropout_rate",
                    "possible_values": []
                }
            },
            "Dropout_482": {
                "rate": {
                    "value": "self.attn_dropout_rate",
                    "possible_values": []
                }
            },
            "stack_507": {
                "values": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Dropout_807": {
                "rate": {
                    "value": "self.in_dropout",
                    "possible_values": []
                }
            },
            "Lambda_932": {
                "function": {
                    "value": "lambda x: K.squeeze(x, 0)",
                    "possible_values": []
                }
            },
            "sum_341": {
                "a": {
                    "value": "W",
                    "possible_values": [
                        [
                            "self.delta * A * K.exp(dense - K.max(dense, axis=1, keepdims=True)) * (1 - self.non_exist_edge) + self.non_exist_edge * (A + self.delta * (tf.ones((N, N)) - A) + tf.eye(N)) * K.exp(dense - K.max(dense, axis=1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "l2_normalize_784": {
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "exp_338": {
                "x": {
                    "value": "dense - K.max(dense, axis=1, keepdims=True)",
                    "possible_values": []
                }
            },
            "squeeze_932": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "exp_334": {
                "x": {
                    "value": "dense - K.max(dense, axis=1, keepdims=True)",
                    "possible_values": []
                }
            },
            "eye_337": {
                "num_rows": {
                    "value": "N",
                    "possible_values": [
                        [
                            "K.int_shape(A)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_339": {
                "a": {
                    "value": "dense",
                    "possible_values": [
                        [
                            "attn_for_self + K.transpose(attn_for_neighs)",
                            "BinOp"
                        ],
                        [
                            "LeakyReLU(alpha=0.2)(dense)",
                            "Call"
                        ],
                        [
                            "dense + mask",
                            "BinOp"
                        ],
                        [
                            "K.softmax(dense)",
                            "Call"
                        ],
                        [
                            "W / K.sum(W, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_335": {
                "a": {
                    "value": "dense",
                    "possible_values": [
                        [
                            "attn_for_self + K.transpose(attn_for_neighs)",
                            "BinOp"
                        ],
                        [
                            "LeakyReLU(alpha=0.2)(dense)",
                            "Call"
                        ],
                        [
                            "dense + mask",
                            "BinOp"
                        ],
                        [
                            "K.softmax(dense)",
                            "Call"
                        ],
                        [
                            "W / K.sum(W, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ones_337": {
                "shape": {
                    "value": "(N, N)",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/graph_classification.py": {
        "tensorflow": {
            "Input_218": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.generator.node_features_size)",
                    "possible_values": []
                }
            },
            "Input_219": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                }
            },
            "Input_220": {
                "variable": {
                    "value": "A_m",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling1D_146": {
                "variable": {
                    "value": "self.pooling",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "h_layer",
                    "possible_values": []
                },
                "values": {
                    "value": "gcn_layers",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/graphsage.py": {
        "tensorflow": {
            "get_89": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "identifier": {
                    "value": "act",
                    "possible_values": []
                }
            },
            "get_92": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_93": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_94": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_95": {
                "variable": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_96": {
                "variable": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_97": {
                "variable": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concatenate_267": {
                "variable": {
                    "value": "h_out",
                    "possible_values": []
                },
                "arys": {
                    "value": "sources",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "get_358": {
                "variable": {
                    "value": "self.hidden_act",
                    "possible_values": []
                },
                "identifier": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "get_455": {
                "variable": {
                    "value": "self.hidden_act",
                    "possible_values": []
                },
                "identifier": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "LeakyReLU_552": {
                "variable": {
                    "value": "self.attn_act",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "concatenate_708": {
                "variable": {
                    "value": "h_out",
                    "possible_values": []
                },
                "arys": {
                    "value": "group_sources",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[K.dot(x_self, self.w_group[0])]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mean_334": {
                "variable": {
                    "value": "x_agg",
                    "possible_values": []
                },
                "a": {
                    "value": "x_group",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dot_336": {
                "a": {
                    "value": "x_agg",
                    "possible_values": [
                        [
                            "self.group_aggregate(x, group_idx=ii)",
                            "Call"
                        ],
                        [
                            "x_group",
                            "Name"
                        ],
                        [
                            "K.mean(x_group, axis=2)",
                            "Call"
                        ],
                        [
                            "K.dot(x_group, self.w_group[0])",
                            "Call"
                        ],
                        [
                            "K.max(xw_neigh, axis=2)",
                            "Call"
                        ],
                        [
                            "K.dot(x_agg, w_g)",
                            "Call"
                        ],
                        [
                            "K.dot(x_group, self.w_group[0])",
                            "Call"
                        ],
                        [
                            "K.mean(xw_neigh, axis=2)",
                            "Call"
                        ],
                        [
                            "K.dot(x_agg, w_g)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.w_group[group_idx]",
                    "possible_values": []
                }
            },
            "dot_420": {
                "variable": {
                    "value": "x_agg",
                    "possible_values": []
                },
                "a": {
                    "value": "x_group",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w_group[0]",
                    "possible_values": []
                }
            },
            "max_429": {
                "variable": {
                    "value": "x_agg",
                    "possible_values": []
                },
                "a": {
                    "value": "xw_neigh",
                    "possible_values": [
                        [
                            "self.hidden_act(K.dot(x_group, w_pool) + b_pool)",
                            "Call"
                        ],
                        [
                            "self.hidden_act(K.dot(x_group, w_pool) + b_pool)",
                            "Call"
                        ],
                        [
                            "K.dot(x_g, w_g)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dot_432": {
                "variable": {
                    "value": "x_agg",
                    "possible_values": []
                },
                "a": {
                    "value": "x_agg",
                    "possible_values": [
                        [
                            "self.group_aggregate(x, group_idx=ii)",
                            "Call"
                        ],
                        [
                            "x_group",
                            "Name"
                        ],
                        [
                            "K.mean(x_group, axis=2)",
                            "Call"
                        ],
                        [
                            "K.dot(x_group, self.w_group[0])",
                            "Call"
                        ],
                        [
                            "K.max(xw_neigh, axis=2)",
                            "Call"
                        ],
                        [
                            "K.dot(x_agg, w_g)",
                            "Call"
                        ],
                        [
                            "K.dot(x_group, self.w_group[0])",
                            "Call"
                        ],
                        [
                            "K.mean(xw_neigh, axis=2)",
                            "Call"
                        ],
                        [
                            "K.dot(x_agg, w_g)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "possible_values": [
                        [
                            "self.add_weight(name=f'w_g{group_idx}', shape=(int(in_shape[-1]), out_size), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_517": {
                "variable": {
                    "value": "x_agg",
                    "possible_values": []
                },
                "a": {
                    "value": "x_group",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w_group[0]",
                    "possible_values": []
                }
            },
            "mean_526": {
                "variable": {
                    "value": "x_agg",
                    "possible_values": []
                },
                "a": {
                    "value": "xw_neigh",
                    "possible_values": [
                        [
                            "self.hidden_act(K.dot(x_group, w_pool) + b_pool)",
                            "Call"
                        ],
                        [
                            "self.hidden_act(K.dot(x_group, w_pool) + b_pool)",
                            "Call"
                        ],
                        [
                            "K.dot(x_g, w_g)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dot_529": {
                "variable": {
                    "value": "x_agg",
                    "possible_values": []
                },
                "a": {
                    "value": "x_agg",
                    "possible_values": [
                        [
                            "self.group_aggregate(x, group_idx=ii)",
                            "Call"
                        ],
                        [
                            "x_group",
                            "Name"
                        ],
                        [
                            "K.mean(x_group, axis=2)",
                            "Call"
                        ],
                        [
                            "K.dot(x_group, self.w_group[0])",
                            "Call"
                        ],
                        [
                            "K.max(xw_neigh, axis=2)",
                            "Call"
                        ],
                        [
                            "K.dot(x_agg, w_g)",
                            "Call"
                        ],
                        [
                            "K.dot(x_group, self.w_group[0])",
                            "Call"
                        ],
                        [
                            "K.mean(xw_neigh, axis=2)",
                            "Call"
                        ],
                        [
                            "K.dot(x_agg, w_g)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "possible_values": [
                        [
                            "self.add_weight(name=f'w_g{group_idx}', shape=(int(in_shape[-1]), out_size), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_681": {
                "variable": {
                    "value": "xw_self",
                    "possible_values": []
                },
                "input": {
                    "value": "K.dot(x_self, w_g)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dot_682": {
                "variable": {
                    "value": "xw_neigh",
                    "possible_values": []
                },
                "a": {
                    "value": "x_g",
                    "possible_values": []
                },
                "b": {
                    "value": "w_g",
                    "possible_values": [
                        [
                            "self.add_weight(name=f'w_g{group_idx}', shape=(int(in_shape[-1]), out_size), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "concatenate_686": {
                "variable": {
                    "value": "xw_all",
                    "possible_values": []
                },
                "arys": {
                    "value": "[xw_self, xw_neigh]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dot_689": {
                "variable": {
                    "value": "attn_self",
                    "possible_values": []
                },
                "a": {
                    "value": "xw_self",
                    "possible_values": [
                        [
                            "K.expand_dims(K.dot(x_self, w_g), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_attn_s",
                    "possible_values": [
                        [
                            "self.add_weight(name=f'w_attn_s{group_idx}', shape=(out_size, 1), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_690": {
                "variable": {
                    "value": "attn_neigh",
                    "possible_values": []
                },
                "a": {
                    "value": "xw_all",
                    "possible_values": [
                        [
                            "K.concatenate([xw_self, xw_neigh], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_attn_g",
                    "possible_values": [
                        [
                            "self.add_weight(name=f'w_attn_g{group_idx}', shape=(out_size, 1), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_697": {
                "variable": {
                    "value": "attn",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_u",
                    "possible_values": [
                        [
                            "self.attn_act(attn_self + attn_neigh)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_700": {
                "variable": {
                    "value": "h_out",
                    "possible_values": []
                },
                "a": {
                    "value": "attn * xw_all",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Lambda_836": {
                "variable": {
                    "value": "self._normalization",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: K.l2_normalize(x, axis=-1)",
                    "possible_values": []
                }
            },
            "serialize_114": {
                "activation": {
                    "value": "self.act",
                    "possible_values": []
                }
            },
            "serialize_115": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_116": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_117": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                }
            },
            "serialize_118": {
                "activation": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                }
            },
            "serialize_119": {
                "activation": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                }
            },
            "serialize_120": {
                "activation": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                }
            },
            "Lambda_839": {
                "variable": {
                    "value": "self._normalization",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: x",
                    "possible_values": []
                }
            },
            "Input_1032": {
                "shape": {
                    "value": "(s, self.input_feature_size)",
                    "possible_values": []
                }
            },
            "dot_681": {
                "a": {
                    "value": "x_self",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "possible_values": [
                        [
                            "self.add_weight(name=f'w_g{group_idx}', shape=(int(in_shape[-1]), out_size), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_705": {
                "a": {
                    "value": "x_self",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "self.w_group[0]",
                    "possible_values": []
                }
            },
            "Reshape_1312": {
                "target_shape": {
                    "value": "K.int_shape(out_layer)[2:]",
                    "possible_values": []
                }
            },
            "dot_426": {
                "a": {
                    "value": "x_group",
                    "possible_values": []
                },
                "b": {
                    "value": "w_pool",
                    "possible_values": [
                        [
                            "self.add_weight(name=f'w_pool_g{group_idx}', shape=(int(in_shape[-1]), self.hidden_dim), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(name=f'w_pool_g{group_idx}', shape=(int(in_shape[-1]), self.hidden_dim), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_523": {
                "a": {
                    "value": "x_group",
                    "possible_values": []
                },
                "b": {
                    "value": "w_pool",
                    "possible_values": [
                        [
                            "self.add_weight(name=f'w_pool_g{group_idx}', shape=(int(in_shape[-1]), self.hidden_dim), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ],
                        [
                            "self.add_weight(name=f'w_pool_g{group_idx}', shape=(int(in_shape[-1]), self.hidden_dim), initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_836": {
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Dropout_981": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Reshape_1010": {
                "target_shape": {
                    "value": "K.int_shape(x)[2:]",
                    "possible_values": []
                }
            },
            "Dropout_1271": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Dropout_1279": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Dropout_1289": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Reshape_982": {
                "target_shape": {
                    "value": "(head_shape, self.n_samples[i], self.dims[num_hops])",
                    "possible_values": []
                }
            },
            "Reshape_1280": {
                "target_shape": {
                    "value": "(num_head_nodes, size, self.dims[stage])",
                    "possible_values": []
                }
            },
            "Reshape_1290": {
                "target_shape": {
                    "value": "(num_head_nodes, size, self.dims[stage])",
                    "possible_values": []
                }
            },
            "Dropout_989": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/hinsage.py": {
        "tensorflow": {
            "get_75": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "identifier": {
                    "value": "act",
                    "possible_values": []
                }
            },
            "get_81": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_82": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_83": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_84": {
                "variable": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_85": {
                "variable": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_86": {
                "variable": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dot_191": {
                "variable": {
                    "value": "from_self",
                    "possible_values": []
                },
                "a": {
                    "value": "x[0]",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w_self",
                    "possible_values": []
                }
            },
            "concatenate_197": {
                "variable": {
                    "value": "total",
                    "possible_values": []
                },
                "arys": {
                    "value": "[from_self, from_neigh]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Lambda_358": {
                "variable": {
                    "value": "self._normalization",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: K.l2_normalize(x, axis=-1)",
                    "possible_values": []
                }
            },
            "serialize_98": {
                "activation": {
                    "value": "self.act",
                    "possible_values": []
                }
            },
            "serialize_99": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_100": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_101": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                }
            },
            "serialize_102": {
                "activation": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                }
            },
            "serialize_103": {
                "activation": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                }
            },
            "serialize_104": {
                "activation": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                }
            },
            "dot_180": {
                "variable": {
                    "value": "z_agg",
                    "possible_values": []
                },
                "a": {
                    "value": "K.mean(z, axis=2)",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w_neigh[r]",
                    "possible_values": []
                }
            },
            "shape_184": {
                "variable": {
                    "value": "z_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "x[1 + r]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "z_agg",
                    "possible_values": []
                },
                "shape": {
                    "value": "(z_shape[0], z_shape[1], w_shape)",
                    "possible_values": []
                }
            },
            "Lambda_361": {
                "variable": {
                    "value": "self._normalization",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: x",
                    "possible_values": []
                }
            },
            "Input_602": {
                "shape": {
                    "value": "s",
                    "possible_values": []
                }
            },
            "Reshape_542": {
                "target_shape": {
                    "value": "K.int_shape(x)[2:]",
                    "possible_values": []
                }
            },
            "mean_180": {
                "a": {
                    "value": "z",
                    "possible_values": [
                        [
                            "x[1 + r]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "l2_normalize_358": {
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Dropout_525": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Dropout_512": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Reshape_513": {
                "target_shape": {
                    "value": "(head_shape, self.n_samples[self._depths[i]], self.dims[layer][self.subtree_schema[neigh_index][0]])",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/knowledge_graph.py": {
        "tensorflow": {
            "Input_157": {
                "variable": {
                    "value": "s_iloc",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Input_158": {
                "variable": {
                    "value": "r_iloc",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Input_159": {
                "variable": {
                    "value": "o_iloc",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_546": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_e1 * m_r * y_e2",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cos_652": {
                "variable": {
                    "value": "r_re",
                    "possible_values": []
                },
                "x": {
                    "value": "r_phase",
                    "possible_values": []
                }
            },
            "sin_653": {
                "variable": {
                    "value": "r_im",
                    "possible_values": []
                },
                "x": {
                    "value": "r_phase",
                    "possible_values": []
                }
            },
            "maximum_750": {
                "variable": {
                    "value": "shape",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(theta)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(emb)",
                    "possible_values": []
                }
            },
            "cos_752": {
                "variable": {
                    "value": "cos",
                    "possible_values": []
                },
                "x": {
                    "value": "theta",
                    "possible_values": []
                }
            },
            "sin_753": {
                "variable": {
                    "value": "sin",
                    "possible_values": []
                },
                "x": {
                    "value": "theta",
                    "possible_values": []
                }
            },
            "squeeze_763": {
                "variable": {
                    "value": "b_s",
                    "possible_values": []
                },
                "input": {
                    "value": "b_s",
                    "possible_values": [
                        [
                            "tf.squeeze(b_s, axis=-1)",
                            "Call"
                        ],
                        [
                            "b_s[None, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_764": {
                "variable": {
                    "value": "b_o",
                    "possible_values": []
                },
                "input": {
                    "value": "b_o",
                    "possible_values": [
                        [
                            "tf.squeeze(b_o, axis=-1)",
                            "Call"
                        ],
                        [
                            "b_o[None, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softplus_747": {
                "features": {
                    "value": "self.curvature_prime",
                    "possible_values": []
                }
            },
            "reshape_756": {
                "tensor": {
                    "value": "tf.stack([evens, odds], axis=-1)",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "tf.maximum(tf.shape(theta), tf.shape(emb))",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_377": {
                "input_dim": {
                    "value": "count",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "dimension",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "initializer",
                    "possible_values": []
                },
                "embeddings_regularizer": {
                    "value": "regularizer",
                    "possible_values": []
                }
            },
            "reduce_sum_429": {
                "input_tensor": {
                    "value": "r * s * o",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Embedding_506": {
                "input_dim": {
                    "value": "count",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "dimension",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "initializer",
                    "possible_values": []
                },
                "embeddings_regularizer": {
                    "value": "regularizer",
                    "possible_values": []
                }
            },
            "Embedding_602": {
                "input_dim": {
                    "value": "count",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "dimension",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "initializer",
                    "possible_values": []
                },
                "embeddings_regularizer": {
                    "value": "reg",
                    "possible_values": [
                        [
                            "regularizer",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_659": {
                "tensor": {
                    "value": "tf.sqrt(re * re + im * im)",
                    "possible_values": []
                },
                "ord": {
                    "value": "self._norm_order",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Embedding_723": {
                "input_dim": {
                    "value": "count",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "dimension",
                            "MethodArgument"
                        ]
                    ]
                },
                "embeddings_initializer": {
                    "value": "initializer",
                    "possible_values": []
                },
                "embeddings_regularizer": {
                    "value": "regularizer",
                    "possible_values": []
                }
            },
            "constant_745": {
                "value": {
                    "value": "[0.0]",
                    "possible_values": []
                }
            },
            "shape_750": {
                "input": {
                    "value": "emb",
                    "possible_values": [
                        [
                            "1j * arrays[1]",
                            "BinOp"
                        ],
                        [
                            "emb + arrays[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_756": {
                "values": {
                    "value": "[evens, odds]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_660": {
                "x": {
                    "value": "re * re + im * im",
                    "possible_values": []
                }
            },
            "square_702": {
                "x": {
                    "value": "poincare_ball_distance(c, v, w)",
                    "possible_values": []
                }
            },
            "reduce_sum_708": {
                "input_tensor": {
                    "value": "tf.math.squared_difference(v, w)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squared_difference_709": {
                "x": {
                    "value": "v",
                    "possible_values": []
                },
                "y": {
                    "value": "w",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/link_inference.py": {
        "tensorflow": {
            "relu_58": {
                "variable": {
                    "value": "x_lo",
                    "possible_values": []
                },
                "features": {
                    "value": "self.lo - x",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x_hi",
                    "possible_values": []
                },
                "features": {
                    "value": "x - self.hi",
                    "possible_values": []
                }
            },
            "get_135": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "possible_values": []
                }
            },
            "reduce_sum_175": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x0 * x1",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "serialize_139": {
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "unstack_169": {
                "variable": {
                    "value": "(x0, x1)",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.axis",
                    "possible_values": []
                }
            },
            "abs_179": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "x": {
                    "value": "x0 - x1",
                    "possible_values": []
                }
            },
            "Reshape_272": {
                "target_shape": {
                    "value": "(output_dim,)",
                    "possible_values": []
                }
            },
            "square_183": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "x": {
                    "value": "x0 - x1",
                    "possible_values": []
                }
            },
            "Activation_267": {
                "activation": {
                    "value": "output_act",
                    "possible_values": []
                }
            },
            "Dense_269": {
                "units": {
                    "value": "output_dim",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_act",
                    "possible_values": []
                }
            },
            "multiply_186": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "possible_values": []
                },
                "y": {
                    "value": "x1",
                    "possible_values": []
                }
            },
            "Concatenate_189": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Average_192": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/misc.py": {
        "tensorflow": {
            "SparseTensor_94": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "K.squeeze(inputs[0], self.axis)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "possible_values": [
                        [
                            "K.squeeze(inputs[1], self.axis)",
                            "Call"
                        ],
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "K.cast(values, self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "self.matrix_shape",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[0]",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.axis",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.axis",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "possible_values": [
                        [
                            "K.squeeze(inputs[1], self.axis)",
                            "Call"
                        ],
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "K.cast(values, self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                }
            },
            "gather_136": {
                "params": {
                    "value": "data",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "K.squeeze(inputs[0], self.axis)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "self._batch_dims",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/node2vec.py": {
        "tensorflow": {
            "RandomUniform_85": {
                "variable": {
                    "value": "target_embedding_initializer",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "Embedding_88": {
                "variable": {
                    "value": "self.target_embedding",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.input_node_num",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.emb_size",
                    "possible_values": []
                },
                "input_length": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "target_embedding",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "target_embedding_initializer",
                    "possible_values": [
                        [
                            "keras.initializers.RandomUniform(minval=-1.0, maxval=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "TruncatedNormal_97": {
                "variable": {
                    "value": "context_embedding_initializer",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(self.emb_size * 1.0)",
                    "possible_values": []
                }
            },
            "Embedding_100": {
                "variable": {
                    "value": "self.context_embedding",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.input_node_num",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.emb_size",
                    "possible_values": []
                },
                "input_length": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "context_embedding",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "context_embedding_initializer",
                    "possible_values": [
                        [
                            "keras.initializers.TruncatedNormal(stddev=1.0 / math.sqrt(self.emb_size * 1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_166": {
                "variable": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "Reshape_148": {
                "target_shape": {
                    "value": "(self.emb_size,)",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/ppnp.py": {
        "tensorflow": {
            "squeeze_131": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "possible_values": [
                        [
                            "K.squeeze(features, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "dot_135": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "possible_values": [
                        [
                            "As[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "features",
                    "possible_values": [
                        [
                            "K.squeeze(features, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_315": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_features)",
                    "possible_values": []
                }
            },
            "expand_dims_139": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "K.dot(A, features)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Input_323": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Input_325": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, multiplicity)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Input_330": {
                "variable": {
                    "value": "A_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_331": {
                "variable": {
                    "value": "A_values_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Input_336": {
                "variable": {
                    "value": "A_m",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_nodes)",
                    "possible_values": []
                }
            },
            "Dropout_244": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Dropout_234": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Dense_236": {
                "units": {
                    "value": "l",
                    "possible_values": [
                        [
                            "self.layer_sizes[ii]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "a",
                    "possible_values": [
                        [
                            "self.activations[ii]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "Lambda_346": {
                "function": {
                    "value": "lambda x: K.squeeze(x, 0)",
                    "possible_values": []
                }
            },
            "Lambda_286": {
                "function": {
                    "value": "lambda A: K.squeeze(A, 0)",
                    "possible_values": []
                }
            },
            "squeeze_346": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "squeeze_286": {
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "As[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/preprocessing_layer.py": {
        "tensorflow": {
            "transpose_60": {
                "variable": {
                    "value": "adj_T",
                    "possible_values": []
                },
                "a": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "rowsum",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "diag_74": {
                "variable": {
                    "value": "d_mat_inv_sqrt",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.rsqrt(rowsum)",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "d_mat_inv_sqrt",
                    "possible_values": [
                        [
                            "tf.diag(tf.rsqrt(rowsum))",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.rsqrt(rowsum))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "rowsum",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "diag_119": {
                "variable": {
                    "value": "d_mat_inv_sqrt",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.math.rsqrt(rowsum)",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "a": {
                    "value": "d_mat_inv_sqrt",
                    "possible_values": [
                        [
                            "tf.diag(tf.rsqrt(rowsum))",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.rsqrt(rowsum))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_66": {
                "x": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))",
                    "possible_values": []
                }
            },
            "diag_71": {
                "diagonal": {
                    "value": "tf.ones(adj.shape[0]) - tf.diag_part(adj)",
                    "possible_values": []
                }
            },
            "rsqrt_74": {
                "x": {
                    "value": "rowsum",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adj, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(adj, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_63": {
                "x": {
                    "value": "adj_T",
                    "possible_values": [
                        [
                            "tf.transpose(adj)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))",
                    "possible_values": []
                }
            },
            "where_67": {
                "condition": {
                    "value": "adj_T > adj",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(adj)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(adj)",
                    "possible_values": []
                }
            },
            "diag_115": {
                "diagonal": {
                    "value": "tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj)",
                    "possible_values": []
                }
            },
            "rsqrt_119": {
                "x": {
                    "value": "rowsum",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adj, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(adj, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_64": {
                "condition": {
                    "value": "adj_T > adj",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(adj)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(adj)",
                    "possible_values": []
                }
            },
            "ones_like_67": {
                "input": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_67": {
                "input": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_71": {
                "shape": {
                    "value": "adj.shape[0]",
                    "possible_values": []
                }
            },
            "diag_part_71": {
                "input": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_64": {
                "input": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "input": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_115": {
                "shape": {
                    "value": "adj.shape[0]",
                    "possible_values": []
                }
            },
            "diag_part_115": {
                "input": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "adj + tf.multiply(adj_T, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj))) - tf.multiply(adj, tf.where(adj_T > adj, tf.ones_like(adj), tf.zeros_like(adj)))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.diag_part(adj))",
                            "BinOp"
                        ],
                        [
                            "adj + tf.linalg.diag(tf.ones(adj.shape[0]) - tf.linalg.diag_part(adj))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "stellargraph/layer/rgcn.py": {
        "tensorflow": {
            "get_112": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_115": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_116": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_117": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_118": {
                "variable": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_119": {
                "variable": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_120": {
                "variable": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_121": {
                "variable": {
                    "value": "self.basis_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "basis_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_122": {
                "variable": {
                    "value": "self.basis_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "basis_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_123": {
                "variable": {
                    "value": "self.basis_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "basis_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_124": {
                "variable": {
                    "value": "self.coefficient_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "coefficient_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_125": {
                "variable": {
                    "value": "self.coefficient_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "coefficient_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_126": {
                "variable": {
                    "value": "self.coefficient_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "coefficient_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_294": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "possible_values": [
                        [
                            "K.squeeze(features, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "dot_297": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "possible_values": [
                        [
                            "K.squeeze(features, 0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.self_kernel",
                    "possible_values": []
                }
            },
            "Input_534": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_features)",
                    "possible_values": []
                }
            },
            "Input_535": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "dot_308": {
                "variable": {
                    "value": "h_graph",
                    "possible_values": []
                },
                "a": {
                    "value": "As[i]",
                    "possible_values": []
                },
                "b": {
                    "value": "features",
                    "possible_values": [
                        [
                            "K.squeeze(features, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_318": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "K.dot(features, self.self_kernel)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "serialize_147": {
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "serialize_148": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_149": {
                "activation": {
                    "value": "self.basis_initializer",
                    "possible_values": []
                }
            },
            "serialize_150": {
                "activation": {
                    "value": "self.coefficient_initializer",
                    "possible_values": []
                }
            },
            "serialize_153": {
                "activation": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                }
            },
            "serialize_154": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_155": {
                "activation": {
                    "value": "self.basis_regularizer",
                    "possible_values": []
                }
            },
            "serialize_156": {
                "activation": {
                    "value": "self.coefficient_regularizer",
                    "possible_values": []
                }
            },
            "serialize_159": {
                "activation": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                }
            },
            "serialize_160": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                }
            },
            "serialize_161": {
                "activation": {
                    "value": "self.basis_constraint",
                    "possible_values": []
                }
            },
            "serialize_162": {
                "activation": {
                    "value": "self.coefficient_constraint",
                    "possible_values": []
                }
            },
            "serialize_165": {
                "activation": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                }
            },
            "dot_309": {
                "a": {
                    "value": "h_graph",
                    "possible_values": [
                        [
                            "K.dot(As[i], features)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "relational_kernels[i]",
                    "possible_values": []
                }
            },
            "einsum_302": {
                "equation": {
                    "value": "ijk,k->ij",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.bases",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "coeff",
                    "possible_values": []
                }
            },
            "Dropout_445": {
                "rate": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Input_541": {
                "batch_shape": {
                    "value": "(1, None, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_545": {
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Input_552": {
                "batch_shape": {
                    "value": "(1, self.n_nodes, self.n_nodes)",
                    "possible_values": []
                }
            },
            "Lambda_561": {
                "function": {
                    "value": "lambda x: K.squeeze(x, 0)",
                    "possible_values": []
                }
            },
            "Lambda_505": {
                "function": {
                    "value": "lambda A: K.squeeze(A, 0)",
                    "possible_values": []
                }
            },
            "squeeze_561": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "squeeze_505": {
                "input": {
                    "value": "A",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/layer/sort_pooling.py": {
        "tensorflow": {
            "gather_79": {
                "variable": {
                    "value": "masked_sorted_embeddings",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "possible_values": [
                        [
                            "tf.pad(masked_sorted_embeddings, [[0, tf.shape(embeddings)[0] - tf.shape(masked_sorted_embeddings)[0]], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argsort(tf.boolean_mask(embeddings, mask)[..., -1], axis=0, direction='DESCENDING')",
                    "possible_values": []
                }
            },
            "pad_88": {
                "variable": {
                    "value": "embeddings",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_sorted_embeddings",
                    "possible_values": [
                        [
                            "tf.gather(embeddings, tf.argsort(tf.boolean_mask(embeddings, mask)[..., -1], axis=0, direction='DESCENDING'))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, tf.shape(embeddings)[0] - tf.shape(masked_sorted_embeddings)[0]], [0, 0]]",
                    "possible_values": []
                }
            },
            "map_fn_111": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "fn": {
                    "value": "self._sort_tensor_with_mask",
                    "possible_values": []
                },
                "elems": {
                    "value": "(embeddings, mask)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embeddings.dtype",
                    "possible_values": []
                }
            },
            "shape_116": {
                "variable": {
                    "value": "outputs_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.map_fn(self._sort_tensor_with_mask, (embeddings, mask), dtype=embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.math.less(outputs_shape, self.k)[1], true_fn=lambda : tf.pad(outputs, [[0, 0], [0, (self.k - outputs_shape)[1]], [0, 0]]), false_fn=lambda : outputs[:, :self.k, :])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [outputs_shape[0], embeddings.shape[-1] * self.k, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_118": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.math.less(outputs_shape, self.k)[1]",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.pad(outputs, [[0, 0], [0, (self.k - outputs_shape)[1]], [0, 0]])",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : outputs[:, :self.k, :]",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.map_fn(self._sort_tensor_with_mask, (embeddings, mask), dtype=embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.math.less(outputs_shape, self.k)[1], true_fn=lambda : tf.pad(outputs, [[0, 0], [0, (self.k - outputs_shape)[1]], [0, 0]]), false_fn=lambda : outputs[:, :self.k, :])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [outputs_shape[0], embeddings.shape[-1] * self.k, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[outputs_shape[0], embeddings.shape[-1] * self.k, 1]",
                    "possible_values": []
                }
            },
            "argsort_81": {
                "values": {
                    "value": "tf.boolean_mask(embeddings, mask)[..., -1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "direction": {
                    "value": "DESCENDING",
                    "possible_values": []
                }
            },
            "less_119": {
                "x": {
                    "value": "outputs_shape",
                    "possible_values": [
                        [
                            "tf.shape(outputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.k",
                    "possible_values": []
                }
            },
            "boolean_mask_82": {
                "tensor": {
                    "value": "embeddings",
                    "possible_values": [
                        [
                            "tf.pad(masked_sorted_embeddings, [[0, tf.shape(embeddings)[0] - tf.shape(masked_sorted_embeddings)[0]], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "possible_values": []
                }
            },
            "pad_120": {
                "tensor": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.map_fn(self._sort_tensor_with_mask, (embeddings, mask), dtype=embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.math.less(outputs_shape, self.k)[1], true_fn=lambda : tf.pad(outputs, [[0, 0], [0, (self.k - outputs_shape)[1]], [0, 0]]), false_fn=lambda : outputs[:, :self.k, :])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [outputs_shape[0], embeddings.shape[-1] * self.k, 1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, (self.k - outputs_shape)[1]], [0, 0]]",
                    "possible_values": []
                }
            },
            "shape_91": {
                "input": {
                    "value": "masked_sorted_embeddings",
                    "possible_values": [
                        [
                            "tf.gather(embeddings, tf.argsort(tf.boolean_mask(embeddings, mask)[..., -1], axis=0, direction='DESCENDING'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "stellargraph/layer/watch_your_step.py": {
        "tensorflow": {
            "get_56": {
                "variable": {
                    "value": "self.attention_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "attention_initializer",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_57": {
                "variable": {
                    "value": "self.attention_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "attention_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_58": {
                "variable": {
                    "value": "self.attention_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "attention_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "attention",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.attention_weights",
                    "possible_values": []
                }
            },
            "einsum_104": {
                "variable": {
                    "value": "expected_walk",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,j->ik",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "partial_powers",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "attention",
                    "possible_values": [
                        [
                            "K.softmax(self.attention_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_172": {
                "variable": {
                    "value": "self._left_embedding",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.n_nodes",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "int(self.embedding_dimension / 2)",
                    "possible_values": []
                },
                "input_length": {
                    "value": "None",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "embeddings_initializer",
                    "possible_values": [
                        [
                            "'uniform'",
                            "MethodArgument"
                        ]
                    ]
                },
                "embeddings_regularizer": {
                    "value": "embeddings_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embeddings_constraint": {
                    "value": "embeddings_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_180": {
                "variable": {
                    "value": "self._right_embedding",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_nodes",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "embeddings_initializer",
                    "possible_values": [
                        [
                            "'uniform'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "embeddings_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_constraint": {
                    "value": "embeddings_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Input_218": {
                "variable": {
                    "value": "input_rows",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(None,)",
                    "possible_values": []
                },
                "name": {
                    "value": "row_node_ids",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_219": {
                "variable": {
                    "value": "input_powers",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(None, self.num_powers, self.n_nodes)",
                    "possible_values": []
                }
            },
            "Lambda_231": {
                "variable": {
                    "value": "expander",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "possible_values": []
                }
            },
            "serialize_64": {
                "activation": {
                    "value": "self.attention_initializer",
                    "possible_values": []
                }
            },
            "serialize_65": {
                "activation": {
                    "value": "self.attention_regularizer",
                    "possible_values": []
                }
            },
            "serialize_66": {
                "activation": {
                    "value": "self.attention_constraint",
                    "possible_values": []
                }
            },
            "Concatenate_233": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_231": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/losses.py": {
        "tensorflow": {
            "gather_48": {
                "variable": {
                    "value": "expected_walks",
                    "possible_values": []
                },
                "params": {
                    "value": "wys_output",
                    "possible_values": []
                },
                "indices": {
                    "value": "[0]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_49": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "params": {
                    "value": "wys_output",
                    "possible_values": []
                },
                "indices": {
                    "value": "[1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "adj_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_adj == 0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "log_sigmoid_53": {
                "variable": {
                    "value": "log_sigmoid",
                    "possible_values": []
                },
                "x": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "tf.gather(wys_output, [1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.math.sigmoid(logit_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_56": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(matrix)",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "tf.math.reduce_sum(tf.abs(matrix))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "x": {
                    "value": "logit_scores",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "exp_scores",
                    "possible_values": []
                },
                "x": {
                    "value": "self._temperature * scores",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_92": {
                "variable": {
                    "value": "sums",
                    "possible_values": []
                },
                "data": {
                    "value": "exp_scores",
                    "possible_values": [
                        [
                            "tf.math.exp(self._temperature * scores)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "flipped_labels",
                    "possible_values": [
                        [
                            "-labels",
                            "UnaryOp"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "tf.reduce_max(flipped_labels) + 1",
                    "possible_values": []
                }
            },
            "gather_96": {
                "variable": {
                    "value": "denoms",
                    "possible_values": []
                },
                "params": {
                    "value": "sums",
                    "possible_values": [
                        [
                            "tf.math.unsorted_segment_sum(exp_scores, flipped_labels, tf.reduce_max(flipped_labels) + 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.maximum(flipped_labels, 0)",
                    "possible_values": []
                }
            },
            "stop_gradient_99": {
                "variable": {
                    "value": "negative_weights",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_scores / denoms",
                    "possible_values": []
                }
            },
            "where_101": {
                "variable": {
                    "value": "loss_elems",
                    "possible_values": []
                },
                "condition": {
                    "value": "labels > 0",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.math.log_sigmoid(logit_scores)",
                    "possible_values": []
                },
                "y": {
                    "value": "-tf.math.log_sigmoid(-logit_scores) * negative_weights",
                    "possible_values": []
                }
            },
            "abs_56": {
                "x": {
                    "value": "matrix",
                    "possible_values": [
                        [
                            "-expected_walks * log_sigmoid - adj_mask * log1m_sigmoid",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_87": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "loss_elems",
                    "possible_values": [
                        [
                            "tf.where(labels > 0, -tf.math.log_sigmoid(logit_scores), -tf.math.log_sigmoid(-logit_scores) * negative_weights)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "maximum_96": {
                "x": {
                    "value": "flipped_labels",
                    "possible_values": [
                        [
                            "-labels",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reduce_max_93": {
                "input_tensor": {
                    "value": "flipped_labels",
                    "possible_values": [
                        [
                            "-labels",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "log_sigmoid_103": {
                "x": {
                    "value": "logit_scores",
                    "possible_values": []
                }
            },
            "log_sigmoid_104": {
                "x": {
                    "value": "-logit_scores",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/mapper/adjacency_generators.py": {
        "tensorflow": {
            "reshape_135": {
                "variable": {
                    "value": "partial_power",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sparse.to_dense(one_hot_encoded_row)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, Aadj_T.shape[1])",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "one_hot_encoded_row",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sparse.to_dense(one_hot_encoded_row)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, sp_tensor_T.shape[1])",
                    "possible_values": []
                }
            },
            "dot_161": {
                "variable": {
                    "value": "row_T",
                    "possible_values": []
                },
                "a": {
                    "value": "sp_tensor_T",
                    "possible_values": []
                },
                "b": {
                    "value": "K.transpose(one_hot_encoded_row)",
                    "possible_values": []
                }
            },
            "transpose_162": {
                "variable": {
                    "value": "row",
                    "possible_values": []
                },
                "a": {
                    "value": "row_T",
                    "possible_values": [
                        [
                            "K.dot(sp_tensor_T, K.transpose(one_hot_encoded_row))",
                            "Call"
                        ]
                    ]
                }
            },
            "range_99": {
                "variable": {
                    "value": "row_index_dataset",
                    "possible_values": []
                }
            },
            "batch_110": {
                "variable": {
                    "value": "training_dataset",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "a": {
                    "value": "partial_power",
                    "possible_values": [
                        [
                            "tf.reshape(tf.sparse.to_dense(one_hot_encoded_row), shape=(1, Aadj_T.shape[1]))",
                            "Call"
                        ],
                        [
                            "K.transpose(K.dot(Aadj_T, K.transpose(partial_power)))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_144": {
                "input": {
                    "value": "tf.stack(partial_powers_list, axis=1)",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "to_dense_136": {
                "sp_input": {
                    "value": "one_hot_encoded_row",
                    "possible_values": [
                        [
                            "tf.reshape(tf.sparse.to_dense(one_hot_encoded_row), shape=(1, sp_tensor_T.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_144": {
                "values": {
                    "value": "partial_powers_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "to_dense_159": {
                "sp_input": {
                    "value": "one_hot_encoded_row",
                    "possible_values": [
                        [
                            "tf.reshape(tf.sparse.to_dense(one_hot_encoded_row), shape=(1, sp_tensor_T.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_161": {
                "a": {
                    "value": "one_hot_encoded_row",
                    "possible_values": [
                        [
                            "tf.reshape(tf.sparse.to_dense(one_hot_encoded_row), shape=(1, sp_tensor_T.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_57": {
                "indices": {
                    "value": "np.column_stack([matrix.col, matrix.row])",
                    "possible_values": []
                },
                "values": {
                    "value": "matrix.data.astype(np.float32)",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "matrix.shape",
                    "possible_values": []
                }
            },
            "eye_89": {
                "num_rows": {
                    "value": "int(self.Aadj_T.shape[0])",
                    "possible_values": []
                }
            },
            "dot_141": {
                "a": {
                    "value": "Aadj_T",
                    "possible_values": []
                },
                "b": {
                    "value": "K.transpose(partial_power)",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/mapper/corrupted.py": {
        "tensorflow": {}
    },
    "stellargraph/mapper/full_batch_generators.py": {
        "tensorflow": {}
    },
    "stellargraph/mapper/graphwave_generator.py": {
        "tensorflow": {
            "reduce_mean_194": {
                "variable": {
                    "value": "mean_cos_t_psi",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.cos(t_psi)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reduce_mean_197": {
                "variable": {
                    "value": "mean_sin_t_psi",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.sin(t_psi)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "flatten_200": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.concat([mean_cos_t_psi, mean_sin_t_psi], axis=0)",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sparse.to_dense(one_hot_encoded_col)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(laplacian.shape[0], 1)",
                    "possible_values": []
                }
            },
            "squeeze_243": {
                "variable": {
                    "value": "cheby_polys",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack(cheby_polys, axis=0)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "convert_to_tensor_86": {
                "variable": {
                    "value": "self.coeffs",
                    "possible_values": []
                },
                "value": {
                    "value": "np.stack(coeffs, axis=0)",
                    "possible_values": []
                }
            },
            "SparseTensor_88": {
                "variable": {
                    "value": "self.laplacian",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.column_stack((laplacian.row, laplacian.col))",
                    "possible_values": []
                },
                "values": {
                    "value": "laplacian.data.astype(np.float32)",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "laplacian.shape",
                    "possible_values": []
                }
            },
            "convert_to_tensor_138": {
                "variable": {
                    "value": "ts",
                    "possible_values": []
                },
                "value": {
                    "value": "sample_points.astype(np.float32)",
                    "possible_values": []
                }
            },
            "matmul_244": {
                "a": {
                    "value": "coeffs",
                    "possible_values": [
                        [
                            "[np.polynomial.chebyshev.Chebyshev.interpolate(lambda x: np.exp(-s * x), domain=[0, self.max_eig], deg=degree).coef.astype(np.float32) for s in scales]",
                            "ListComp"
                        ]
                    ]
                },
                "b": {
                    "value": "cheby_polys",
                    "possible_values": [
                        [
                            "[T_0, T_1]",
                            "List"
                        ],
                        [
                            "K.squeeze(tf.stack(cheby_polys, axis=0), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_194": {
                "x": {
                    "value": "t_psi",
                    "possible_values": [
                        [
                            "samples * ts",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_197": {
                "x": {
                    "value": "t_psi",
                    "possible_values": [
                        [
                            "samples * ts",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_200": {
                "values": {
                    "value": "[mean_cos_t_psi, mean_sin_t_psi]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "to_dense_230": {
                "sp_input": {
                    "value": "one_hot_encoded_col",
                    "possible_values": []
                }
            },
            "stack_243": {
                "values": {
                    "value": "cheby_polys",
                    "possible_values": [
                        [
                            "[T_0, T_1]",
                            "List"
                        ],
                        [
                            "K.squeeze(tf.stack(cheby_polys, axis=0), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "dot_222": {
                "a": {
                    "value": "laplacian",
                    "possible_values": [
                        [
                            "degree_mat - adj",
                            "BinOp"
                        ],
                        [
                            "laplacian.tocoo()",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vector",
                    "possible_values": []
                }
            },
            "SparseTensor_151": {
                "indices": {
                    "value": "np.stack([np.arange(len(node_ids)), node_idxs], axis=1)",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "(len(node_ids), self.laplacian.shape[0])",
                    "possible_values": []
                },
                "values": {
                    "value": "np.ones(len(node_ids), dtype=np.float32)",
                    "possible_values": []
                }
            }
        }
    },
    "stellargraph/mapper/knowledge_graph.py": {
        "tensorflow": {}
    },
    "stellargraph/mapper/mini_batch_node_generators.py": {
        "tensorflow": {}
    },
    "stellargraph/mapper/padded_graph_generator.py": {
        "tensorflow": {}
    },
    "stellargraph/mapper/sampled_link_generators.py": {
        "tensorflow": {}
    },
    "stellargraph/mapper/sampled_node_generators.py": {
        "tensorflow": {}
    },
    "stellargraph/mapper/sequences.py": {
        "tensorflow": {}
    },
    "stellargraph/mapper/sliding.py": {
        "tensorflow": {}
    },
    "stellargraph/utils/hyperbolic.py": {
        "tensorflow": {
            "nextafter_31": {
                "variable": {
                    "value": "ATANH_LIMIT",
                    "possible_values": []
                },
                "x1": {
                    "value": "1",
                    "possible_values": []
                },
                "x2": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "variable": {
                    "value": "x_norm2",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x * x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "variable": {
                    "value": "y_norm2",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y * y",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "x_dot_y",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x * y",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "v_norm2",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * v",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sqrt_112": {
                "variable": {
                    "value": "c_v_norm",
                    "possible_values": []
                },
                "x": {
                    "value": "c * v_norm2",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "x_norm2",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x * x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sqrt_148": {
                "variable": {
                    "value": "sqrt_c",
                    "possible_values": []
                },
                "x": {
                    "value": "c",
                    "possible_values": []
                }
            },
            "clip_by_norm_40": {
                "t": {
                    "value": "x",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_norm",
                    "possible_values": [
                        [
                            "tf.math.rsqrt(c) * (1 - PROJECTION_EPS)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "x": {
                    "value": "tf.clip_by_value(x, -TANH_LIMIT, TANH_LIMIT)",
                    "possible_values": []
                }
            },
            "atanh_48": {
                "x": {
                    "value": "tf.clip_by_value(x, -ATANH_LIMIT, ATANH_LIMIT)",
                    "possible_values": []
                }
            },
            "rsqrt_39": {
                "x": {
                    "value": "c",
                    "possible_values": []
                }
            },
            "clip_by_value_44": {
                "t": {
                    "value": "x",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-TANH_LIMIT",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "TANH_LIMIT",
                    "possible_values": [
                        [
                            "15.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_value_48": {
                "t": {
                    "value": "x",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-ATANH_LIMIT",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "ATANH_LIMIT",
                    "possible_values": [
                        [
                            "tf.math.nextafter(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_150": {
                "tensor": {
                    "value": "poincare_ball_mobius_add(c, -x, y)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "tests/interpretability/test_saliency_maps_gat.py": {
        "tensorflow": {
            "Model_47": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "lr": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "tests/interpretability/test_saliency_maps_gcn.py": {
        "tensorflow": {
            "Model_44": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_64": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "lr": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "lr": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Adam_152": {
                "lr": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Adam_156": {
                "lr": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_appnp.py": {
        "tensorflow": {
            "Model_104": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_133": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_156": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_187": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "fully_connected_model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Model_214": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_252": {
                "variable": {
                    "value": "end_to_end_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Sequential_282": {
                "variable": {
                    "value": "fully_connected_model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Model_286": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "fully_connected_model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Input_248": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "shape": {
                    "value": "features.shape",
                    "possible_values": []
                }
            },
            "Model_249": {
                "variable": {
                    "value": "fully_connected_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "keras.Input(shape=features.shape)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "dense(inp)",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_attri2vec.py": {
        "tensorflow": {
            "Model_103": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*attri2vec.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Input_109": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2,)",
                    "possible_values": []
                }
            },
            "Model_111": {
                "variable": {
                    "value": "model1",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "keras.Input(shape=(2,))",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=(2,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "attri2vec(inp)",
                            "Call"
                        ],
                        [
                            "attri2vec(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_117": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xinp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "Model_127": {
                "variable": {
                    "value": "model3",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xinp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "Model_134": {
                "variable": {
                    "value": "model4",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xinp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "Input_151": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2,)",
                    "possible_values": []
                }
            },
            "Model_153": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "keras.Input(shape=(2,))",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=(2,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "attri2vec(inp)",
                            "Call"
                        ],
                        [
                            "attri2vec(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "model_from_json_162": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "json_string": {
                    "value": "model_json",
                    "possible_values": [
                        [
                            "model.to_json()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/layer/test_cluster_gcn.py": {
        "tensorflow": {
            "Model_64": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_cluster_models.py": {
        "tensorflow": {
            "Model_38": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gnn.in_out_tensors()",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "variable": {
                    "value": "x_out_flat",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Model_50": {
                "variable": {
                    "value": "embedding_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out_flat",
                    "possible_values": [
                        [
                            "tf.squeeze(x_out, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/layer/test_deep_graph_infomax.py": {
        "tensorflow": {
            "Model_86": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_90": {
                "variable": {
                    "value": "emb_model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*base_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_115": {
                "variable": {
                    "value": "model_1",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_116": {
                "variable": {
                    "value": "model_2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_119": {
                "variable": {
                    "value": "embeddings_1",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.embedding_model()",
                    "possible_values": []
                }
            },
            "Model_122": {
                "variable": {
                    "value": "embeddings_2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.embedding_model()",
                    "possible_values": []
                }
            },
            "Model_132": {
                "variable": {
                    "value": "embeddings_1",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.embedding_model()",
                    "possible_values": []
                }
            },
            "Model_135": {
                "variable": {
                    "value": "embeddings_2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.embedding_model()",
                    "possible_values": []
                }
            },
            "Model_145": {
                "variable": {
                    "value": "embeddings_1",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.embedding_model()",
                    "possible_values": []
                }
            },
            "Model_148": {
                "variable": {
                    "value": "embeddings_2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.embedding_model()",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_gcn.py": {
        "tensorflow": {
            "Model_74": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_t, A_t]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "GraphConvolution(2)([x_t, A_t])",
                            "Call"
                        ],
                        [
                            "GraphConvolution(2)([x_t, A_t])",
                            "Call"
                        ],
                        [
                            "GraphConvolution(2)([x_t, A_mat])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_84": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_t, A_t]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "GraphConvolution(2)([x_t, A_t])",
                            "Call"
                        ],
                        [
                            "GraphConvolution(2)([x_t, A_t])",
                            "Call"
                        ],
                        [
                            "GraphConvolution(2)([x_t, A_mat])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_116": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_t, A_ind, A_val]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "GraphConvolution(2)([x_t, A_t])",
                            "Call"
                        ],
                        [
                            "GraphConvolution(2)([x_t, A_t])",
                            "Call"
                        ],
                        [
                            "GraphConvolution(2)([x_t, A_mat])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_155": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_186": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_209": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_240": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Lambda_127": {
                "function": {
                    "value": "lambda x: tf.sparse.expand_dims(x, axis=0)",
                    "possible_values": []
                }
            },
            "expand_dims_127": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "features[None, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[None, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_gcn_lstm.py": {
        "tensorflow": {
            "Model_159": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_input",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_output",
                    "possible_values": []
                }
            },
            "Model_183": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_input",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_output",
                    "possible_values": []
                }
            },
            "Model_207": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gcn_lstm.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_215": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gcn_lstm.in_out_tensors()",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_graph_attention.py": {
        "tensorflow": {
            "Model_111": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": [
                        [
                            "[Input(batch_shape=(1, self.N, self.F_in)), Input(batch_shape=(1, self.N, self.N))]",
                            "List"
                        ],
                        [
                            "[Input(batch_shape=(1, self.N, self.F_in)), Input(batch_shape=(1, None, 2), dtype='int64'), Input(batch_shape=(1, None), dtype='float32')]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": [
                        [
                            "gat(layer_inp)",
                            "Call"
                        ],
                        [
                            "gat(layer_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_138": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": [
                        [
                            "[Input(batch_shape=(1, self.N, self.F_in)), Input(batch_shape=(1, self.N, self.N))]",
                            "List"
                        ],
                        [
                            "[Input(batch_shape=(1, self.N, self.F_in)), Input(batch_shape=(1, None, 2), dtype='int64'), Input(batch_shape=(1, None), dtype='float32')]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": [
                        [
                            "gat(layer_inp)",
                            "Call"
                        ],
                        [
                            "gat(layer_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_181": {
                "variable": {
                    "value": "model_origin",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": [
                        [
                            "[Input(batch_shape=(1, self.N, self.F_in)), Input(batch_shape=(1, self.N, self.N))]",
                            "List"
                        ],
                        [
                            "[Input(batch_shape=(1, self.N, self.F_in)), Input(batch_shape=(1, None, 2), dtype='int64'), Input(batch_shape=(1, None), dtype='float32')]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x_out_origin",
                    "possible_values": [
                        [
                            "gat_origin(layer_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_182": {
                "variable": {
                    "value": "model_saliency",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": [
                        [
                            "[Input(batch_shape=(1, self.N, self.F_in)), Input(batch_shape=(1, self.N, self.N))]",
                            "List"
                        ],
                        [
                            "[Input(batch_shape=(1, self.N, self.F_in)), Input(batch_shape=(1, None, 2), dtype='int64'), Input(batch_shape=(1, None), dtype='float32')]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x_out_saliency",
                    "possible_values": [
                        [
                            "gat_saliency(layer_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_495": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": [
                        [
                            "gat(layer_inp)",
                            "Call"
                        ],
                        [
                            "gat(layer_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_521": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": [
                        [
                            "gat(layer_inp)",
                            "Call"
                        ],
                        [
                            "gat(layer_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_560": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": [
                        [
                            "gat(layer_inp)",
                            "Call"
                        ],
                        [
                            "gat(layer_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "model_from_json_571": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "json_string": {
                    "value": "model_json",
                    "possible_values": [
                        [
                            "model.to_json()",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'GraphAttention': GraphAttention, 'GatherIndices': GatherIndices}",
                    "possible_values": []
                }
            },
            "Input_53": {
                "batch_shape": {
                    "value": "(1, self.N, self.F_in)",
                    "possible_values": []
                }
            },
            "Input_54": {
                "batch_shape": {
                    "value": "(1, self.N, self.N)",
                    "possible_values": []
                }
            },
            "get_78": {
                "identifier": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "Input_235": {
                "batch_shape": {
                    "value": "(1, self.N, self.F_in)",
                    "possible_values": []
                }
            },
            "Input_236": {
                "batch_shape": {
                    "value": "(1, None, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_237": {
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_graph_classification.py": {
        "tensorflow": {
            "Model_110": {
                "variable": {
                    "value": "model_1",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gcn_graph_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_111": {
                "variable": {
                    "value": "model_2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gcn_graph_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_170": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gcn_graph_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_194": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gcn_graph_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_217": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dgcnn.in_out_tensors()",
                    "possible_values": []
                }
            },
            "expand_dims_155": {
                "variable": {
                    "value": "mask_floats",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(mask, tf.float32)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_sum_156": {
                "input_tensor": {
                    "value": "tf.multiply(mask_floats, shift + tensor)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cast_155": {
                "x": {
                    "value": "mask",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "multiply_156": {
                "x": {
                    "value": "mask_floats",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.cast(mask, tf.float32), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shift + tensor",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_graphsage.py": {
        "tensorflow": {
            "Input_66": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_67": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Model_72": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_82": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_83": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Input_84": {
                "variable": {
                    "value": "inp3",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Model_89": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2, inp3]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_104": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_105": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "Model_108": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_152": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_154": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Model_168": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_182": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_184": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Model_198": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_208": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_209": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "Model_212": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_256": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_258": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Model_275": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_289": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_291": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Model_308": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_318": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_319": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "Model_326": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_359": {
                "variable": {
                    "value": "agg.attn_act",
                    "possible_values": []
                },
                "identifier": {
                    "value": "linear",
                    "possible_values": []
                }
            },
            "Input_362": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_364": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Model_381": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_392": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_393": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "Model_396": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_503": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_504": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "Model_506": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_522": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "[keras.Input(shape=(i, 2)) for i in [1, 2, 4, 8]]",
                            "ListComp"
                        ],
                        [
                            "[keras.Input(shape=(i, 2)) for i in [1, 0, 0]]",
                            "ListComp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_537": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xinp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "Input_551": {
                "variable": {
                    "value": "inp1",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_552": {
                "variable": {
                    "value": "inp2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "Model_554": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp1, inp2]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "model_from_json_563": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "json_string": {
                    "value": "model_json",
                    "possible_values": [
                        [
                            "model.to_json()",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'MeanAggregator': MeanAggregator}",
                    "possible_values": []
                }
            },
            "Model_590": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "[keras.Input(shape=(i, 2)) for i in [1, 2, 4, 8]]",
                            "ListComp"
                        ],
                        [
                            "[keras.Input(shape=(i, 2)) for i in [1, 0, 0]]",
                            "ListComp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2, inp3])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "agg([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ],
                        [
                            "gs([inp1, inp2])",
                            "Call"
                        ],
                        [
                            "gs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_520": {
                "shape": {
                    "value": "(i, 2)",
                    "possible_values": []
                }
            },
            "Input_588": {
                "shape": {
                    "value": "(i, 2)",
                    "possible_values": []
                }
            },
            "ones_671": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_hinsage.py": {
        "tensorflow": {
            "Model_75": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 2, 2)), keras.Input(shape=(1, 2, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 2, 2)), keras.Input(shape=(1, 2, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 0, 2)), keras.Input(shape=(1, 0, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(2, 2)), keras.Input(shape=(2, 4)), keras.Input(shape=(4, 2)), keras.Input(shape=(4, 4)), keras.Input(shape=(4, 4))]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg(inp)",
                            "Call"
                        ],
                        [
                            "agg(inp)",
                            "Call"
                        ],
                        [
                            "hs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_100": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 2, 2)), keras.Input(shape=(1, 2, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 2, 2)), keras.Input(shape=(1, 2, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 0, 2)), keras.Input(shape=(1, 0, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(2, 2)), keras.Input(shape=(2, 4)), keras.Input(shape=(4, 2)), keras.Input(shape=(4, 4)), keras.Input(shape=(4, 4))]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "[out1, out2]",
                    "possible_values": []
                }
            },
            "Model_125": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 2, 2)), keras.Input(shape=(1, 2, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 2, 2)), keras.Input(shape=(1, 2, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 0, 2)), keras.Input(shape=(1, 0, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(2, 2)), keras.Input(shape=(2, 4)), keras.Input(shape=(4, 2)), keras.Input(shape=(4, 4)), keras.Input(shape=(4, 4))]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg(inp)",
                            "Call"
                        ],
                        [
                            "agg(inp)",
                            "Call"
                        ],
                        [
                            "hs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_258": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 2, 2)), keras.Input(shape=(1, 2, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 2, 2)), keras.Input(shape=(1, 2, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(1, 0, 2)), keras.Input(shape=(1, 0, 4))]",
                            "List"
                        ],
                        [
                            "[keras.Input(shape=(1, 2)), keras.Input(shape=(2, 2)), keras.Input(shape=(2, 4)), keras.Input(shape=(4, 2)), keras.Input(shape=(4, 4)), keras.Input(shape=(4, 4))]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "agg(inp)",
                            "Call"
                        ],
                        [
                            "agg(inp)",
                            "Call"
                        ],
                        [
                            "hs(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_293": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xin",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "Model_327": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xin",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "model_from_json_336": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "json_string": {
                    "value": "model_json",
                    "possible_values": [
                        [
                            "model.to_json()",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'MeanHinAggregator': MeanHinAggregator}",
                    "possible_values": []
                }
            },
            "Model_374": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xin",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "Model_410": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xin",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "Model_568": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xin",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "Input_70": {
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_71": {
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Input_72": {
                "shape": {
                    "value": "(1, 2, 4)",
                    "possible_values": []
                }
            },
            "Input_93": {
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_94": {
                "shape": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Input_95": {
                "shape": {
                    "value": "(1, 2, 4)",
                    "possible_values": []
                }
            },
            "Input_116": {
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_117": {
                "shape": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "Input_118": {
                "shape": {
                    "value": "(1, 0, 4)",
                    "possible_values": []
                }
            },
            "Input_249": {
                "shape": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "Input_250": {
                "shape": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "Input_251": {
                "shape": {
                    "value": "(2, 4)",
                    "possible_values": []
                }
            },
            "Input_252": {
                "shape": {
                    "value": "(4, 2)",
                    "possible_values": []
                }
            },
            "Input_253": {
                "shape": {
                    "value": "(4, 4)",
                    "possible_values": []
                }
            },
            "Input_254": {
                "shape": {
                    "value": "(4, 4)",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_knowledge_graph.py": {
        "tensorflow": {
            "RandomUniform_63": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Model_67": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_111": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*complex_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "RandomUniform_122": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Model_126": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_164": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*distmult_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "RandomUniform_179": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Model_185": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_227": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rotate_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "RandomUniform_239": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Model_243": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_292": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rot_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_342": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Embedding_481": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "5",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_69": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_128": {
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_187": {
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_245": {
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_link_inference.py": {
        "tensorflow": {
            "constant_53": {
                "variable": {
                    "value": "x_src",
                    "possible_values": []
                },
                "value": {
                    "value": "x_src",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_src / np.linalg.norm(x_src)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "x_dst",
                    "possible_values": []
                },
                "value": {
                    "value": "x_dst",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_dst / np.linalg.norm(x_dst)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "constant_80": {
                "variable": {
                    "value": "x_src",
                    "possible_values": []
                },
                "value": {
                    "value": "x_src",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_src / np.linalg.norm(x_src)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "constant_81": {
                "variable": {
                    "value": "x_dst",
                    "possible_values": []
                },
                "value": {
                    "value": "x_dst",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_dst / np.linalg.norm(x_dst)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "x_link_sd",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_src, x_dst]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "x_link_ss",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_src, x_src]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Input_112": {
                "variable": {
                    "value": "inp_src",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "Input_113": {
                "variable": {
                    "value": "inp_dst",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "Input_138": {
                "variable": {
                    "value": "x_link",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, self.d)",
                    "possible_values": []
                }
            },
            "constant_170": {
                "variable": {
                    "value": "x_src",
                    "possible_values": []
                },
                "value": {
                    "value": "x_src",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_src / np.linalg.norm(x_src)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "constant_171": {
                "variable": {
                    "value": "x_dst",
                    "possible_values": []
                },
                "value": {
                    "value": "x_dst",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_dst / np.linalg.norm(x_dst)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "Input_203": {
                "variable": {
                    "value": "inp_src",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "Input_204": {
                "variable": {
                    "value": "inp_dst",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "constant_234": {
                "variable": {
                    "value": "x_src",
                    "possible_values": []
                },
                "value": {
                    "value": "x_src",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_src / np.linalg.norm(x_src)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "constant_235": {
                "variable": {
                    "value": "x_dst",
                    "possible_values": []
                },
                "value": {
                    "value": "x_dst",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_dst / np.linalg.norm(x_dst)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "Input_266": {
                "variable": {
                    "value": "inp_src",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "Input_267": {
                "variable": {
                    "value": "inp_dst",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "constant_301": {
                "variable": {
                    "value": "x_src",
                    "possible_values": []
                },
                "value": {
                    "value": "x_src",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_src / np.linalg.norm(x_src)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_src, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_src.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "constant_302": {
                "variable": {
                    "value": "x_dst",
                    "possible_values": []
                },
                "value": {
                    "value": "x_dst",
                    "possible_values": [
                        [
                            "np.random.randn(dim)",
                            "Call"
                        ],
                        [
                            "x_dst / np.linalg.norm(x_dst)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "tf.constant(x_dst, shape=(1, self.d), dtype='float64')",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ],
                        [
                            "x_dst.reshape(1, 1, self.d)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "Input_323": {
                "variable": {
                    "value": "inp_src",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "Input_324": {
                "variable": {
                    "value": "inp_dst",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "Input_350": {
                "variable": {
                    "value": "inp_src",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "Input_351": {
                "variable": {
                    "value": "inp_dst",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.d)",
                    "possible_values": []
                }
            },
            "Model_117": {
                "variable": {
                    "value": "li",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp_src, inp_dst]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "link_inference(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op, clip_limits=self.clip_limits)([inp_src, inp_dst])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_125": {
                "variable": {
                    "value": "li",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp_src, inp_dst]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "link_inference(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op, clip_limits=self.clip_limits)([inp_src, inp_dst])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_142": {
                "variable": {
                    "value": "li",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_link",
                    "possible_values": [
                        [
                            "keras.Input(shape=(2, self.d))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "link_inference(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op, clip_limits=self.clip_limits)([inp_src, inp_dst])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_151": {
                "variable": {
                    "value": "li",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_link",
                    "possible_values": [
                        [
                            "keras.Input(shape=(2, self.d))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "link_inference(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op, clip_limits=self.clip_limits)([inp_src, inp_dst])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_210": {
                "variable": {
                    "value": "li",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp_src, inp_dst]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "link_inference(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op, clip_limits=self.clip_limits)([inp_src, inp_dst])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_273": {
                "variable": {
                    "value": "li",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp_src, inp_dst]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "link_inference(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op, clip_limits=self.clip_limits)([inp_src, inp_dst])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_330": {
                "variable": {
                    "value": "li",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp_src, inp_dst]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "link_inference(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op, clip_limits=self.clip_limits)([inp_src, inp_dst])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_359": {
                "variable": {
                    "value": "li",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inp_src, inp_dst]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "LinkEmbedding(method=op)(x_link)",
                            "Call"
                        ],
                        [
                            "link_inference(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op)([inp_src, inp_dst])",
                            "Call"
                        ],
                        [
                            "link_regression(output_dim=self.d_out, edge_embedding_method=op, clip_limits=self.clip_limits)([inp_src, inp_dst])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/layer/test_misc.py": {
        "tensorflow": {
            "Input_42": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, N, 1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "Input_43": {
                "variable": {
                    "value": "A_ind",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_44": {
                "variable": {
                    "value": "A_val",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "Model_52": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_t, A_ind, A_val]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": [
                        [
                            "keras.layers.Lambda(lambda xin: K.expand_dims(K.dot(xin[0], K.squeeze(xin[1], 0)), 0))([A_mat, x_t])",
                            "Call"
                        ],
                        [
                            "keras.layers.Lambda(lambda xin: K.expand_dims(K.dot(xin[0], K.squeeze(xin[1], 0)), 0))([A_mat, x_t])",
                            "Call"
                        ],
                        [
                            "keras.layers.Lambda(lambda xin: K.dot(xin, ones))(A_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_64": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, N, 1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "possible_values": []
                }
            },
            "Input_65": {
                "variable": {
                    "value": "A_ind",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_66": {
                "variable": {
                    "value": "A_val",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "Model_74": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_t, A_ind, A_val]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": [
                        [
                            "keras.layers.Lambda(lambda xin: K.expand_dims(K.dot(xin[0], K.squeeze(xin[1], 0)), 0))([A_mat, x_t])",
                            "Call"
                        ],
                        [
                            "keras.layers.Lambda(lambda xin: K.expand_dims(K.dot(xin[0], K.squeeze(xin[1], 0)), 0))([A_mat, x_t])",
                            "Call"
                        ],
                        [
                            "keras.layers.Lambda(lambda xin: K.dot(xin, ones))(A_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_90": {
                "variable": {
                    "value": "A_ind",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(nnz, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_91": {
                "variable": {
                    "value": "A_val",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(nnz, 1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "ones_100": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N, 1)",
                    "possible_values": []
                }
            },
            "Model_104": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[A_ind, A_val]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": [
                        [
                            "keras.layers.Lambda(lambda xin: K.expand_dims(K.dot(xin[0], K.squeeze(xin[1], 0)), 0))([A_mat, x_t])",
                            "Call"
                        ],
                        [
                            "keras.layers.Lambda(lambda xin: K.expand_dims(K.dot(xin[0], K.squeeze(xin[1], 0)), 0))([A_mat, x_t])",
                            "Call"
                        ],
                        [
                            "keras.layers.Lambda(lambda xin: K.dot(xin, ones))(A_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_112": {
                "variable": {
                    "value": "data_in",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(batch_dim, 5, 7)",
                    "possible_values": []
                }
            },
            "Input_113": {
                "variable": {
                    "value": "indices_in",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(batch_dim, 11)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "gather_121": {
                "variable": {
                    "value": "expected",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "possible_values": [
                        [
                            "np.arange(np.product(data_in.shape)).reshape(data_in.shape)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "np.random.choice(range(min(data_in.shape)), indices_in.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_124": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[data_in, indices_in]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "GatherIndices(**kwargs)([data_in, indices_in])",
                            "Call"
                        ]
                    ]
                }
            },
            "Lambda_48": {
                "function": {
                    "value": "lambda xin: K.expand_dims(K.dot(xin[0], K.squeeze(xin[1], 0)), 0)",
                    "possible_values": []
                }
            },
            "Lambda_70": {
                "function": {
                    "value": "lambda xin: K.expand_dims(K.dot(xin[0], K.squeeze(xin[1], 0)), 0)",
                    "possible_values": []
                }
            },
            "Lambda_94": {
                "function": {
                    "value": "lambda A: K.reshape(A, (-1,))",
                    "possible_values": []
                }
            },
            "Lambda_102": {
                "function": {
                    "value": "lambda xin: K.dot(xin, ones)",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_node2vec.py": {
        "tensorflow": {
            "Input_63": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "Model_65": {
                "variable": {
                    "value": "model1",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "keras.Input(shape=(1,))",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=(1,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "node2vec(inp, 'target')",
                            "Call"
                        ],
                        [
                            "node2vec(inp, 'target')",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_78": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xinp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "xout",
                    "possible_values": []
                }
            },
            "Input_89": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "Model_91": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "keras.Input(shape=(1,))",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=(1,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "node2vec(inp, 'target')",
                            "Call"
                        ],
                        [
                            "node2vec(inp, 'target')",
                            "Call"
                        ]
                    ]
                }
            },
            "model_from_json_100": {
                "variable": {
                    "value": "model2",
                    "possible_values": []
                },
                "json_string": {
                    "value": "model_json",
                    "possible_values": [
                        [
                            "model.to_json()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/layer/test_ppnp.py": {
        "tensorflow": {
            "Model_68": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_rgcn.py": {
        "tensorflow": {
            "Input_91": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, n_nodes, n_feat)",
                    "possible_values": []
                }
            },
            "Model_126": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp_model",
                    "possible_values": [
                        [
                            "[x_t] + A_placeholders",
                            "BinOp"
                        ],
                        [
                            "[x_t] + A_placeholders",
                            "BinOp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "RelationalGraphConvolution(2, num_relationships=n_edge_types)(x_inp_conv)",
                            "Call"
                        ],
                        [
                            "RelationalGraphConvolution(2, num_relationships=n_edge_types)(x_inp_conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_141": {
                "variable": {
                    "value": "x_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, n_nodes, n_feat)",
                    "possible_values": []
                }
            },
            "Input_142": {
                "variable": {
                    "value": "out_indices_t",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Model_163": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp_model",
                    "possible_values": [
                        [
                            "[x_t] + A_placeholders",
                            "BinOp"
                        ],
                        [
                            "[x_t] + A_placeholders",
                            "BinOp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "RelationalGraphConvolution(2, num_relationships=n_edge_types)(x_inp_conv)",
                            "Call"
                        ],
                        [
                            "RelationalGraphConvolution(2, num_relationships=n_edge_types)(x_inp_conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_195": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_219": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_249": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_272": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Input_97": {
                "batch_shape": {
                    "value": "(1, None, 2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "possible_values": []
                }
            },
            "Input_99": {
                "batch_shape": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Input_148": {
                "batch_shape": {
                    "value": "(1, n_nodes, n_nodes)",
                    "possible_values": []
                }
            },
            "Lambda_151": {
                "function": {
                    "value": "lambda A: K.squeeze(A, 0)",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "input": {
                    "value": "A",
                    "possible_values": [
                        [
                            "sps.coo_matrix((data, (row_index, col_index)), shape=(len(node_list), len(node_list)))",
                            "Call"
                        ],
                        [
                            "d.dot(A).tocsr()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layer/test_watch_your_step.py": {
        "tensorflow": {
            "Model_85": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_95": {
                "variable": {
                    "value": "preds2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*wys.in_out_tensors()",
                    "possible_values": []
                }
            },
            "Model_104": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            }
        }
    },
    "tests/mapper/test_adjacency_generators.py": {
        "tensorflow": {
            "cardinality_53": {
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "generator.flow(batch_size=1)",
                            "Call"
                        ],
                        [
                            "generator.flow(batch_size=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/mapper/test_graphwave_generator.py": {
        "tensorflow": {
            "convert_to_tensor_256": {
                "variable": {
                    "value": "ts",
                    "possible_values": []
                },
                "value": {
                    "value": "sample_points",
                    "possible_values": [
                        [
                            "np.linspace(0, 100, 25)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 100, 25)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 100, 25)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 100, 25)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 100, 25)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, num_samples)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 100, 25)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 100, 25)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 100, 50).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/reproducibility/fixtures.py": {
        "tensorflow": {
            "clear_session_44": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/reproducibility/test_deep_graph_infomax.py": {
        "tensorflow": {
            "Model_39": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*infomax.in_out_tensors()",
                    "possible_values": []
                }
            },
            "set_seed_29": {
                "seed": {
                    "value": "1234",
                    "possible_values": []
                }
            }
        }
    },
    "tests/reproducibility/test_graphsage.py": {
        "tensorflow": {
            "Model_48": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "link_classification(output_dim=1, output_act='sigmoid', edge_embedding_method='ip')(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_106": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=targets.shape[1], activation='softmax')(x_out)",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=1, output_act='relu', edge_embedding_method='ip')(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_165": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=targets.shape[1], activation='softmax')(x_out)",
                            "Call"
                        ],
                        [
                            "link_classification(output_dim=1, output_act='relu', edge_embedding_method='ip')(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_seed_70": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_seed_127": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_seed_189": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_105": {
                "units": {
                    "value": "targets.shape[1]",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "possible_values": []
                }
            },
            "Adam_218": {
                "learning_rate": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "Adam_235": {
                "learning_rate": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "Adam_252": {
                "learning_rate": {
                    "value": "0.001",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_aaa_on_gpu.py": {
        "tensorflow": {
            "constant_35": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "possible_values": [
                        [
                            "tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "possible_values": [
                        [
                            "tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_log_device_placement_32": {
                "enabled": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "list_physical_devices_41": {
                "device_type": {
                    "value": "GPU",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_ensemble.py": {
        "tensorflow": {
            "Model_130": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "link_classification(output_dim=1, output_act='relu', edge_embedding_method='ip')(x_out)",
                            "Call"
                        ],
                        [
                            "layers.Dense(units=2, activation='softmax')(x_out)",
                            "Call"
                        ],
                        [
                            "link_regression(edge_embedding_method='ip')(x_out)",
                            "Call"
                        ],
                        [
                            "layers.Dense(units=2, activation='softmax')(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_150": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_172": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x_out",
                    "possible_values": []
                }
            },
            "Model_89": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "link_classification(output_dim=1, output_act='relu', edge_embedding_method='ip')(x_out)",
                            "Call"
                        ],
                        [
                            "layers.Dense(units=2, activation='softmax')(x_out)",
                            "Call"
                        ],
                        [
                            "link_regression(edge_embedding_method='ip')(x_out)",
                            "Call"
                        ],
                        [
                            "layers.Dense(units=2, activation='softmax')(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_94": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_inp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "link_classification(output_dim=1, output_act='relu', edge_embedding_method='ip')(x_out)",
                            "Call"
                        ],
                        [
                            "layers.Dense(units=2, activation='softmax')(x_out)",
                            "Call"
                        ],
                        [
                            "link_regression(edge_embedding_method='ip')(x_out)",
                            "Call"
                        ],
                        [
                            "layers.Dense(units=2, activation='softmax')(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_181": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clear_session_261": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clear_session_294": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clear_session_330": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clear_session_425": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clear_session_524": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clear_session_621": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clear_session_720": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clear_session_795": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dense_92": {
                "units": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "possible_values": []
                }
            },
            "Dense_128": {
                "units": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "possible_values": []
                }
            },
            "Adam_314": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_353": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_447": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_487": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_547": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_584": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_640": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_682": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_738": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_768": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_808": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_losses.py": {
        "tensorflow": {
            "constant_55": {
                "value": {
                    "value": "logit_scores",
                    "possible_values": [
                        [
                            "np.array([1.2, -2.3, 0.0, 4.5, -0.67], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([-val, val, -val, val], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_87": {
                "value": {
                    "value": "logit_scores",
                    "possible_values": [
                        [
                            "np.array([1.2, -2.3, 0.0, 4.5, -0.67], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([-val, val, -val, val], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_utils/__init__.py": {
        "tensorflow": {
            "Model_29": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sg_model.in_out_tensors()",
                    "possible_values": []
                }
            },
            "clear_session_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}