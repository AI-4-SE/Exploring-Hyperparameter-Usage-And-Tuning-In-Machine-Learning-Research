{
    "main/model.py": {
        "tensorflow": {
            "truncated_normal_initializer_18": {
                "variable": {
                    "value": "normal_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "meshgrid_48": {
                "variable": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[1])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.num_kps]) / cfg.input_shape[1] * output_shape[1] + 0.5)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[i for i in range(output_shape[0])]",
                            "ListComp"
                        ],
                        [
                            "tf.floor(tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.num_kps]) / cfg.input_shape[0] * output_shape[0] + 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(xx)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(yy)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *output_shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 0], [-1, 1, 1, cfg.num_kps]) / cfg.input_shape[1] * output_shape[1] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_53": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(coord[:, :, 1], [-1, 1, 1, cfg.num_kps]) / cfg.input_shape[0] * output_shape[0] + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_55": {
                "variable": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-((xx - x) / tf.to_float(sigma)) ** 2 / tf.to_float(2) - ((yy - y) / tf.to_float(sigma)) ** 2 / tf.to_float(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_transpose_24": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blocks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_28": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.num_kps, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_32": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.num_kps, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "normal_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(0, 0.01)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "up3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.conv2d_transpose(blocks[-1], 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(out, 256, [4, 4], stride=2, trainable=trainable, weights_initializer=normal_initializer, padding='SAME', activation_fn=tf.nn.relu, scope='up3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(out, cfg.num_kps, [1, 1], trainable=trainable, weights_initializer=msra_initializer, padding='SAME', normalizer_fn=None, activation_fn=None, scope='out')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cfg.num_kps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "msra_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, *cfg.input_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "target_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, cfg.num_kps, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, cfg.num_kps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *cfg.input_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_74": {
                "variable": {
                    "value": "gt_heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.render_gaussian_heatmap(target_coord, cfg.output_shape, cfg.sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "valid_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[cfg.batch_size, cfg.num_kps])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[cfg.batch_size, 1, 1, cfg.num_kps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(heatmap_outs - gt_heatmap) * valid_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_49": {
                "x": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.to_float(xx), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_50": {
                "x": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.to_float(yy), (1, *output_shape, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_55": {
                "x": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_76": {
                "x": {
                    "value": "heatmap_outs - gt_heatmap",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "tensor": {
                    "value": "coord[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.num_kps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "coord[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, cfg.num_kps]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "main/test.py": {
        "tensorflow": {}
    },
    "main/train.py": {
        "tensorflow": {}
    },
    "MPII_bags_loader.py": {
        "torch": {
            "DataLoader_159": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MnistBags(target_number=9, mean_bag_length=10, var_bag_length=2, num_bag=100, seed=98, train=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_168": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MnistBags(target_number=9, mean_bag_length=10, var_bag_length=2, num_bag=10, seed=98, train=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../datasets', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.num_in_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../datasets', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.num_in_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader.py": {
        "torch": {
            "DataLoader_92": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MnistBags(target_number=9, mean_bag_length=10, var_bag_length=2, num_bag=100, seed=1, train=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MnistBags(target_number=9, mean_bag_length=10, var_bag_length=2, num_bag=100, seed=1, train=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../datasets', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.num_in_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../datasets', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.num_in_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MnistBags(target_number=args.target_number, mean_bag_length=args.mean_bag_length, var_bag_length=args.var_bag_length, num_bag=args.num_bags_train, seed=args.seed, train=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MnistBags(target_number=args.target_number, mean_bag_length=args.mean_bag_length, var_bag_length=args.var_bag_length, num_bag=args.num_bags_test, seed=args.seed, train=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.feature_extractor_part1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 20, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.feature_extractor_part2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(50 * 4 * 4, self.L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.L, self.D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.L * self.K, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_49": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attention(H)",
                            "Call"
                        ],
                        [
                            "torch.transpose(A, 1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(A, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attention(H)",
                            "Call"
                        ],
                        [
                            "torch.transpose(A, 1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(A, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_52": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attention(H)",
                            "Call"
                        ],
                        [
                            "torch.transpose(A, 1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(A, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feature_extractor_part1(x)",
                            "Call"
                        ],
                        [
                            "H.view(-1, 50 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor_part2(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_55": {
                "variable": {
                    "value": "Y_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(M)",
                            "Call"
                        ],
                        [
                            "torch.clamp(Y_prob, min=1e-05, max=1.0 - 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_70": {
                "variable": {
                    "value": "Y_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(M)",
                            "Call"
                        ],
                        [
                            "torch.clamp(Y_prob, min=1e-05, max=1.0 - 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "50 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "self.L * self.K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_71": {
                "input": {
                    "value": "1.0 - Y_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}