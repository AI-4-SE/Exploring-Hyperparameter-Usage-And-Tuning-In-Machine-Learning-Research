{
    "backbone/EfficientNet.py": {
        "torch": {
            "floor_118": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "variable"
                        ],
                        [
                            "random_tensor + torch.rand([batch_size, 1, 1, 1], dtype=inputs.dtype, device=inputs.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_40": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_117": {
                "*size": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ],
                        [
                            "self._dropout(feats)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_290": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_589": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_603": {
                "variable": {
                    "value": "self._bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_697": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_701": {
                "variable": {
                    "value": "self._blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_725": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_728": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_193": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ],
                        [
                            "self._dropout(feats)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_194": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ],
                        [
                            "self._dropout(feats)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_217": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_220": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_579": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_630": {
                "variable": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ],
                        [
                            "self._dropout(feats)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_730": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self._global_params.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_731": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._global_params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_283": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_277": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ],
                        [
                            "self._dropout(feats)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_634": {
                "input": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_reduce(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._swish(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._se_expand(x_squeezed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "backbone/MNISTMLP.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self._features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "backbone/MNISTMLP_PNN.py": {
        "torch": {
            "Linear_38": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.base_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(100 * len(old_cols), 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.base_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(100 * len(old_cols), 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.adaptor1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "AlphaModule(100 * len(old_cols))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.adaptor2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "AlphaModule(100 * len(old_cols))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x) + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "100 * len(old_cols)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "100 * len(old_cols)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "fc1_kb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[old(x) for old in self.old_fc1s]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "fc2_kb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[old(fc1_kb[i]) for (i, old) in enumerate(self.old_fc2s)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "*args": {
                    "value": "nn.Linear(self.input_size, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "nn.Linear(100, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "backbone/ResNet18.py": {
        "torch": {
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "self.classifier(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nf * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nf * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self._features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_134": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "self.classifier(feature)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "backbone/ResNet18_PNN.py": {
        "torch": {
            "relu_27": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.lateral_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.adaptor4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "AlphaModule((nf * 8 * len(old_cols), 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "*args": {
                    "value": "*layers[1:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2(out) + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer3(out) + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4(out) + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_139": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(out) + y)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3(out) + y)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(out) + y)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out) + y",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool2d_142": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(out4_old, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "out4_old[0].shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "nf * 8 * len(old_cols)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "*args": {
                    "value": "AlphaModule((nf * len(old_cols) * factor, self.x_shape[2] // factor, self.x_shape[3] // factor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_133": {
                "tensors": {
                    "value": "out1_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[old(out0_old[i]) for (i, old) in enumerate(self.old_layer1s)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "out2_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[old(out1_old[i]) for (i, old) in enumerate(self.old_layer2s)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "out3_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[old(out2_old[i]) for (i, old) in enumerate(self.old_layer3s)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "out4_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[old(out3_old[i]) for (i, old) in enumerate(self.old_layer4s)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "nf * len(old_cols) * factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_125": {
                "input": {
                    "value": "self.bn1(old(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "backbone/__init__.py": {
        "torch": {
            "cat_63": {
                "tensors": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "self.get_grads_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "pp.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "pp.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "backbone/utils/modules.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(tuple([1] + list(shape))) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_16": {
                "*size": {
                    "value": "tuple([1] + list(shape))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/mnist_360.py": {
        "torch": {
            "cat_158": {
                "tensors": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "x_train_naug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x_train_naug)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_126": {
                "dataset": {
                    "value": "tmp_test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "dataset": {
                    "value": "tmp_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/perm_mnist.py": {
        "torch": {
            "DataLoader_29": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyMNIST(base_path() + 'MNIST', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "get_train_val(train_dataset, transform, setting.NAME)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "setting.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_train_val(train_dataset, transform, setting.NAME)",
                            "Call"
                        ],
                        [
                            "MNIST(base_path() + 'MNIST', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "setting.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/rot_mnist.py": {
        "torch": {}
    },
    "datasets/seq_cifar10.py": {
        "torch": {}
    },
    "datasets/seq_cifar100.py": {
        "torch": {}
    },
    "datasets/seq_mnist.py": {
        "torch": {}
    },
    "datasets/seq_tinyimagenet.py": {
        "torch": {}
    },
    "datasets/utils/continual_dataset.py": {
        "torch": {
            "DataLoader_127": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "setting.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "setting.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/utils/validation.py": {
        "torch": {
            "load_62": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + file_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_64": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dataset_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train.data.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_65": {
                "obj": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(directory + file_name)",
                            "Call"
                        ],
                        [
                            "torch.randperm(dataset_length)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "directory + file_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/agem.py": {
        "torch": {
            "Tensor_37": {
                "variable": {
                    "value": "self.grad_xy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "self.grad_er",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dot_22": {
                "input": {
                    "value": "ger",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "ger",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dot_66": {
                "variable": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.grad_xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.grad_er",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/agem_r.py": {
        "torch": {
            "Tensor_34": {
                "variable": {
                    "value": "self.grad_xy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_35": {
                "variable": {
                    "value": "self.grad_er",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dot_54": {
                "variable": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.grad_xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.grad_er",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/bic.py": {
        "torch": {
            "zeros_72": {
                "variable": {
                    "value": "resp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.task + 1) * self.cpt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "dist_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "corr_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "self.biasopt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[corr_factors]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_softmax_156": {
                "variable": {
                    "value": "pi_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[:, :self.task * self.cpt] / self.args.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "old_outputs[:, :self.task * self.cpt] / self.args.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_165": {
                "input": {
                    "value": "self.net.module.get_params() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_200": {
                "*size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/der.py": {
        "torch": {
            "mse_loss_41": {
                "input": {
                    "value": "buf_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(buf_inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "buf_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.buffer.get_data(self.args.minibatch_size, transform=self.transform)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/derpp.py": {
        "torch": {
            "mse_loss_44": {
                "input": {
                    "value": "buf_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(buf_inputs)",
                            "Call"
                        ],
                        [
                            "self.net(buf_inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "buf_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.buffer.get_data(self.args.minibatch_size, transform=self.transform)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/er.py": {
        "torch": {
            "cat_37": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, buf_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels, buf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/er_ace.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "self.seen_so_far",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "self.seen_so_far",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.seen_so_far, present]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_39": {
                "variable": {
                    "value": "self.seen_so_far",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_42": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(inputs)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask == 0, torch.finfo(logits.dtype).min)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "loss_re",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/ewc_on.py": {
        "torch": {
            "LogSoftmax_33": {
                "variable": {
                    "value": "self.logsoft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_45": {
                "variable": {
                    "value": "fish",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.net.get_params()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_55": {
                "variable": {
                    "value": "exp_cond_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(loss.detach().clone())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_56": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.nll_loss(self.logsoft(output), lab.unsqueeze(0), reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "self.loss(outputs, labels) + self.args.e_lambda * penalty",
                            "BinOp"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_76": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.nll_loss(self.logsoft(output), lab.unsqueeze(0), reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "self.loss(outputs, labels) + self.args.e_lambda * penalty",
                            "BinOp"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_53": {
                "input": {
                    "value": "self.logsoft(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "lab.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "loss.detach().clone()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/fdr.py": {
        "torch": {
            "Softmax_32": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_33": {
                "variable": {
                    "value": "self.logsoft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_79": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.soft(buf_outputs) - self.soft(buf_logits)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_80": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(outputs, labels)",
                            "Call"
                        ],
                        [
                            "torch.norm(self.soft(buf_outputs) - self.soft(buf_logits), 2, 1).mean()",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_63": {
                "*size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/gdumb.py": {
        "torch": {
            "SGD_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.maxlr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.optim_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.optim_wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.args.optim_nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingWarmRestarts_36": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(self.net.parameters(), lr=self.args.maxlr, momentum=self.args.optim_mom, weight_decay=self.args.optim_wd, nesterov=self.args.optim_nesterov)",
                            "Call"
                        ]
                    ]
                },
                "T_0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "T_mult": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.args.minlr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/gem.py": {
        "torch": {
            "zeros_109": {
                "variable": {
                    "value": "self.grads_da",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "np.sum(self.grad_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dot(v, memories_np) + gradient_np",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_156": {
                "variable": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.grads_da.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.stack(self.grads_cs).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "np.sum(self.grad_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "samples_per_task",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.buffer_size // dataset.N_TASKS",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_157": {
                "tensors": {
                    "value": "self.grads_cs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_160": {
                "tensors": {
                    "value": "self.grads_cs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/gss.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "tinputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, buf_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "tlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels, buf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/hal.py": {
        "torch": {
            "SGD_46": {
                "variable": {
                    "value": "self.spare_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.spare_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_77": {
                "variable": {
                    "value": "e_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_78": {
                "variable": {
                    "value": "e_t_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[e_t]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.anchors, e_t.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "tuple([0] + list(self.input_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, buf_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels, buf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loss(self.spare_model(e_t.unsqueeze(0)), torch.tensor([a_class]).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gamma * (self.spare_model(e_t.unsqueeze(0), returnt='features') - self.phi) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.net(inputs[0].unsqueeze(0), returnt='features')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "self.loss(self.spare_model(e_t.unsqueeze(0)), torch.tensor([a_class]).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "[a_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "[a_class]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/icarl.py": {
        "torch": {
            "zeros_like_83": {
                "variable": {
                    "value": "running_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.mean(0, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_114": {
                "variable": {
                    "value": "self.eye",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.dataset.N_CLASSES_PER_TASK * self.dataset.N_TASKS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "self.class_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "a_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(a_l)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_175": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(inputs)[:, :ac]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.eye[labels][:, :ac]",
                            "Subscript"
                        ],
                        [
                            "self.eye[labels][:, pc:ac]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_179": {
                "variable": {
                    "value": "comb_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits[:, :pc], targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_180": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(inputs)[:, :ac]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "comb_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((logits[:, :pc], targets), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_205": {
                "variable": {
                    "value": "x_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[examples[i] for i in range(0, len(examples)) if labels[i].cpu() == _y]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier(feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.old_net(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "(self.classes_so_far, labels.to('cpu'))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unique_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/joint.py": {
        "torch": {
            "SGD_48": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "temp_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ValidationDataset(all_data, all_labels, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_labels)",
                            "Call"
                        ],
                        [
                            "self.old_labels[i]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate([all_labels, self.old_labels[i]])",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_93": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(all_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "dataset.train_loader.dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/joint_gcl.py": {
        "torch": {
            "SGD_41": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "all_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.old_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.old_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_49": {
                "variable": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(all_data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/lucir.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "gt_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "embeddings.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_32": {
                "variable": {
                    "value": "hard_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.lt(num_old_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_72": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.parameter.Parameter(torch.Tensor(cpt, in_features)) for _ in range(n_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=2, dim=1).reshape(len(x), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_127": {
                "variable": {
                    "value": "self.eye",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.dataset.N_CLASSES_PER_TASK * self.dataset.N_TASKS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_142": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': upd_weights, 'lr': self.args.lr, 'momentum': self.args.optim_mom, 'weight_decay': self.args.optim_wd}, {'params': fix_weights, 'lr': 0, 'momentum': self.args.optim_mom, 'weight_decay': 0}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_entropy_194": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_output * self.net.classifier.sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.buffer.get_all_data(self.transform)",
                            "Call"
                        ],
                        [
                            "dt",
                            "variable"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_256": {
                "variable": {
                    "value": "old_embedding_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.net.classifier.weights[i] for i in range(self.task)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_256": {
                "variable": {
                    "value": "old_embedding_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_258": {
                "variable": {
                    "value": "average_old_embedding_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "old_embedding_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.net.classifier.weights[i] for i in range(self.task)]).norm(dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "novel_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.dataset.N_CLASSES_PER_TASK, num_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_299": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr_finetune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.optim_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.optim_wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_301": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.ft_lr_strat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "linear_108": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=2, dim=1).reshape(len(x), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "F.normalize(self.weights[t], p=2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_273": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cur_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(loader.dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_277": {
                "variable": {
                    "value": "cls_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples, num_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_285": {
                "variable": {
                    "value": "norm_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((num_samples, num_features))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_286": {
                "variable": {
                    "value": "cls_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(cls_features, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_38": {
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "margin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_39": {
                "*size": {
                    "value": "hard_num * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_234": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': upd_weights, 'lr': self.args.lr, 'weight_decay': self.args.optim_wd}, {'params': fix_weights, 'lr': 0, 'weight_decay': 0}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.optim_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.optim_wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_307": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "[(e, l) for (e, l) in zip(examples, labels)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "data": {
                    "value": "torch.Tensor(cpt, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_108": {
                "input": {
                    "value": "self.weights[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "(self.classes_so_far, labels.to('cpu'))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unique_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_embedding_loss_201": {
                "input1": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.net(inputs, returnt='features').float()",
                            "Call"
                        ],
                        [
                            "outputs.reshape(outputs.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "input2": {
                    "value": "logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.ones(outputs.shape[0]).to(outputs.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool3d_281": {
                "variable": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(d[0].to(self.device), returnt='features').cpu()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool3d(tt, 1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_288": {
                "input": {
                    "value": "cls_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(norm_features, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_202": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/lwf.py": {
        "torch": {
            "Softmax_41": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_42": {
                "variable": {
                    "value": "self.logsoft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_47": {
                "variable": {
                    "value": "self.eye",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((nc, nc))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits ** (1 / temp)",
                            "BinOp"
                        ],
                        [
                            "self.net(inputs.to(self.device)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_27": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_31": {
                "input": {
                    "value": "torch.sum(old * torch.log(new), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_53": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "old * torch.log(new)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dataset.train_loader.dataset.__getitem__(j)[2] for j in range(i, min(i + self.args.batch_size, len(dataset.train_loader.dataset)))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_31": {
                "input": {
                    "value": "new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "(nc, nc)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/mer.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(buf_inputs, inp.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(buf_labels, torch.tensor([lab]).to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "[lab]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "[lab]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/pnn.py": {
        "torch": {
            "SGD_50": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_52": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_53": {
                "variable": {
                    "value": "self.logsoft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_78": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/rpc.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "self.rpchead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dsimplex(self.cpt * self.tasks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[examples_per_class] * self.cpt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, buf_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels, buf_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "flags",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_99": {
                "n": {
                    "value": "self.cpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/si.py": {
        "torch": {
            "zeros_like_45": {
                "variable": {
                    "value": "self.big_omega",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.net.get_params()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_value__59": {
                "parameters": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/utils/continual_model.py": {
        "torch": {
            "SGD_29": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/xder.py": {
        "torch": {
            "zeros_47": {
                "variable": {
                    "value": "self.update_counter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.buffer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "self.update_counter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.buffer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "loss_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "variable": {
                    "value": "loss_constr_past",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "loss_constr_futu",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[examples_per_class] * self.cpt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_168": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "buf_outputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(buf_inputs1).float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "buf_logits1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.buffer.get_data(self.args.minibatch_size, transform=self.transform, return_index=True)",
                            "Call"
                        ],
                        [
                            "buf_logits1.type(buf_outputs1.dtype)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "buf_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[buf_idx1, buf_idx2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "buf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[buf_inputs1, buf_inputs2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "buf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[buf_labels1, buf_labels2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "buf_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[buf_logits1, buf_logits2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "buf_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[buf_outputs1, buf_outputs2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "buf_tl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[buf_tl1, buf_tl2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_232": {
                "variable": {
                    "value": "scl_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scl_features.split(self.cpt, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_234": {
                "variable": {
                    "value": "loss_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.simclr_lss(features=F.normalize(scl_features[:, h], dim=2), labels=scl_labels) for h in range(scl_n_heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_234": {
                "variable": {
                    "value": "loss_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "chead",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[:, :(self.task + 1) * self.cpt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "scl_na_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[buf_na_inputsscl, scl_na_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "scl_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[buf_labelsscl, scl_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "bad_head",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bad_head, buf_outputs[:, (self.task + 1) * self.cpt:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "good_head",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[good_head, torch.stack(buf_outputs.split(self.cpt, 1), 1)[torch.arange(len(buf_tlgt)), buf_tlgt]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "buf_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "buf_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(buf_outputs)",
                            "Call"
                        ],
                        [
                            "torch.cat([buf_outputs1, buf_outputs2])",
                            "Call"
                        ],
                        [
                            "buf_outputs[umask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_140": {
                "start": {
                    "value": "len(gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_186": {
                "n": {
                    "value": "self.buffer.buffer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_84": {
                "n": {
                    "value": "self.cpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "flags",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_like_201": {
                "input": {
                    "value": "chosen[c].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_264": {
                "tensors": {
                    "value": "buf_outputs.split(self.cpt, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_264": {
                "start": {
                    "value": "len(buf_tlgt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_234": {
                "input": {
                    "value": "scl_features[:, h]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "len(not_aug_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/augmentations.py": {
        "torch": {
            "randperm_34": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randint_66": {
                "variable": {
                    "value": "crop_x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-padding",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_67": {
                "variable": {
                    "value": "crop_y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-padding",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_72": {
                "variable": {
                    "value": "oboe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.shape[-1] + padding * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Method Argument"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_50": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_60": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_49": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_109": {
                "tensors": {
                    "value": "[self.transform(a) for a in flip]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[[0.299, 0.587, 0.114]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/batch_norm.py": {
        "torch": {}
    },
    "utils/buffer.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "val_train_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(dataset.train_loader.dataset.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_23": {
                "*size": {
                    "value": "len(self.buffer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_163": {
                "tensors": {
                    "value": "[transform(ee.cpu()) for ee in self.examples[choice]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_185": {
                "tensors": {
                    "value": "[transform(ee.cpu()) for ee in self.examples[indexes]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_210": {
                "tensors": {
                    "value": "[transform(ee.cpu()) for ee in self.examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randperm_25": {
                "n": {
                    "value": "len(dataset.train_loader.dataset.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "(self.buffer_size, *attr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int64 if attr_str.endswith('els') else torch.float32",
                            "IfExp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(min(self.num_seen_examples, self.examples.shape[0]), size=size, replace=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/conf.py": {
        "torch": {
            "device_14": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_32": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/continual_training.py": {
        "torch": {
            "max_30": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "predicted == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "utils/gss_buffer.py": {
        "torch": {
            "randperm_32": {
                "variable": {
                    "value": "self.fathom_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "min(self.num_seen_examples, self.examples.shape[0] if hasattr(self, 'examples') else self.num_seen_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(G).to(g.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.buffer_size, *attr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_142": {
                "tensors": {
                    "value": "[transform(ee.cpu()) for ee in self.examples[choice]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_169": {
                "tensors": {
                    "value": "[transform(ee.cpu()) for ee in self.examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cosine_similarity_49": {
                "x1": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_grads(x, y)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "G[it * grads_at_a_time:(it + 1) * grads_at_a_time]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "(self.buffer_size, *attr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int64 if attr_str.endswith('els') else torch.float32",
                            "IfExp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/main.py": {
        "torch": {
            "set_num_threads_47": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/ring_buffer.py": {
        "torch": {
            "stack_85": {
                "tensors": {
                    "value": "[transform(ee.cpu()) for ee in self.examples[choice]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "[transform(ee.cpu()) for ee in self.examples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "(self.buffer_size, *attr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "typ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int64 if attr_str.endswith('els') else torch.float32",
                            "IfExp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/simclrloss.py": {
        "torch": {
            "cat_57": {
                "variable": {
                    "value": "contrast_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(features, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_68": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(anchor_feature, contrast_feature.T)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_72": {
                "variable": {
                    "value": "(logits_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(torch.matmul(anchor_feature, contrast_feature.T), self.temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scatter_78": {
                "variable": {
                    "value": "logits_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(batch_size * anchor_count).view(-1, 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_47": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unbind_57": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.view(features.shape[0], features.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "input": {
                    "value": "anchor_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[:, 0]",
                            "Subscript"
                        ],
                        [
                            "contrast_feature",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "contrast_feature.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_79": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(batch_size, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "mask.float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.eq(labels, labels.T).float().to(device)",
                            "Call"
                        ],
                        [
                            "mask.repeat(anchor_count, contrast_count)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_81": {
                "start": {
                    "value": "batch_size * anchor_count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_88": {
                "input": {
                    "value": "exp_logits.sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_52": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "labels.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/status.py": {
        "torch": {}
    },
    "utils/tb_logger.py": {
        "torch": {
            "SummaryWriter_24": {
                "variable": {
                    "value": "self.loggers[a_setting]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(base_path(), 'tensorboard_runs', a_setting, self.name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/training.py": {
        "torch": {
            "max_56": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "pred == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_62": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "pred == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    }
}