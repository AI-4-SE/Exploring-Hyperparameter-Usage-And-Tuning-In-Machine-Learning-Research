{
    "apps/train_classification_pointnet.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "testdataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNetDataset(root=opt.dataset, dataset=opt.dataset_type, split='test', npoints=opt.num_points, lrf=lrf_estimator, data_augmentation=False, file_list_folders=opt.file_list_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "StepLR_118": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(classifier.parameters(), lr=0.001, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNetDataset(root=opt.dataset, dataset=opt.dataset_type, npoints=opt.num_points, lrf=lrf_estimator, data_augmentation=False, split='trainval', file_list_folders=opt.file_list_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_144": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_170": {
                "obj": {
                    "value": "classifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/cls_model_%d.pth' % (opt.outf, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nll_loss_165": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "benchmarks/lrf_benchmark.py": {
        "torch": {
            "device_134": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "lrfs_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lrfs_src",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(lrfs_src, dtype=torch.float, device=self.device).view(-1, 3, 3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "variable": {
                    "value": "pts_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pts_src",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(pts_src, dtype=torch.float, device=self.device).view(-1, self.args.size_point_cloud, 3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_367": {
                "variable": {
                    "value": "lrfs_trg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lrfs_trg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(lrfs_trg, dtype=torch.float, device=self.device).view(-1, 3, 3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_368": {
                "variable": {
                    "value": "pts_trg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pts_trg",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_373": {
                "variable": {
                    "value": "dist_src_trg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(pts_src_in_lrf.shape[0], pts_src_in_lrf.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_374": {
                "variable": {
                    "value": "dist_trg_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(pts_src_in_lrf.shape[0], pts_src_in_lrf.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "mat_gt_src_trg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mat_gt_trg_to_src[:3, :3].T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_386": {
                "variable": {
                    "value": "lrfs_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lrfs_src.to('cpu')",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "batch_gt_tensor.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_436": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_294": {
                "data": {
                    "value": "mat_gt_trg_to_src[:3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_294": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_294": {
                "input": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_380": {
                "input": {
                    "value": "dist_trg_src",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty((pts_src_in_lrf.shape[0], pts_src_in_lrf.shape[1]), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/dataset_localpcd.py": {
        "torch": {}
    },
    "dataloader/dataset_localpcd_benchmark.py": {
        "torch": {}
    },
    "dataloader/dataset_pointnet.py": {
        "torch": {
            "from_numpy_90": {
                "variable": {
                    "value": "point_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([cls]).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "features/lrf_compass.py": {
        "torch": {
            "DataLoader_67": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.size_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "features/lrf_compass_object.py": {
        "torch": {
            "Tensor_70": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/loss.py": {
        "torch": {
            "bmm_22": {
                "variable": {
                    "value": "mat_rotation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_mat_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "tensor_mat_b.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_23": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "acos_31": {
                "variable": {
                    "value": "angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "((batch_identity * mat_rotation).sum(dim=(1, 2)) - 1) * 0.5",
                            "BinOp"
                        ],
                        [
                            "trace.clamp(min=-1 + self.eps, max=1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_53": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_54": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_55": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_57": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/network_lrf_layer.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.lrf_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*lrf_sequence",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_36": {
                "num_features": {
                    "value": "self.features[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_30": {
                "num_features": {
                    "value": "num_feature_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features[l]",
                            "Subscript"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/network_s2_layer.py": {
        "torch": {
            "randn_53": {
                "variable": {
                    "value": "signal_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "size_channels_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2 * size_bandwidth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 * size_bandwidth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.sequential",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_24": {
                "num_features": {
                    "value": "self.features[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/network_trainer.py": {
        "torch": {
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/network_trainer_compass.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset_localpcd.LocalPointCloudDataset(path_root=self.args.path_ds, limit=0, min_nn=300, path_npy=path_npy_train, file_list_folders=self.args.name_file_folder_train, extension=self.args.ext, radius=self.args.radius_descriptor, size_leaf_keypoints=self.args.leaf_keypoints, size_leaf_ss=self.args.leaf_sub_sampling, augmentation=True, removal_augmentation=bool(self.args.removal_augmentation), transform=transform, dataset=self.args.name_data_set)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.size_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "validation_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_validation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset_localpcd.LocalPointCloudDataset(path_root=self.args.path_ds, limit=0, min_nn=300, path_npy=path_npy_val, file_list_folders=self.args.name_file_folder_validation, extension=self.args.ext, radius=self.args.radius_descriptor, size_leaf_keypoints=self.args.leaf_keypoints, size_leaf_ss=self.args.leaf_sub_sampling, augmentation=True, removal_augmentation=bool(self.args.removal_augmentation), transform=transform, dataset=self.args.name_data_set)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.size_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_175": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(self.layer_s2.parameters()) + list(self.layer_lrf.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_280": {
                "variable": {
                    "value": "lrfs_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lrfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "mats_rot_rnd.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_297": {
                "variable": {
                    "value": "loss_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.criterion_theta(results_forward_step['lrfs_rnd'], results_forward_step['lrfs_expected'])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_217": {
                "variable": {
                    "value": "dict_ckp_train_stuff",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.path_ckp_ts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_254": {
                "obj": {
                    "value": "{'epochs': self.epoch_current, 'optimizer_state_dict': self.optimizer.state_dict(), 'lr': self.lr}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dict_paths['checkpoint'], 'training_stuff_' + str(self.iteration_current) + '.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_257": {
                "obj": {
                    "value": "self.layer_s2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dict_paths['checkpoint'], 's2_layer_' + str(self.iteration_current) + '.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "self.layer_lrf.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dict_paths['checkpoint'], 'lrf_layer_' + str(self.iteration_current) + '.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/network_trainer_pointnet.py": {
        "torch": {
            "mean_185": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(torch.bmm(trans, trans.transpose(2, 1)) - I, dim=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_16": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_53": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_54": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_62": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_63": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_64": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_91": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_92": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_93": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_94": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_95": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_96": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_140": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_141": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.dropout(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_158": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1088",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_159": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_160": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_161": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_162": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_163": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_164": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_175": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, self.k)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fstn(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_182": {
                "n": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trans.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "norm_185": {
                "input": {
                    "value": "torch.bmm(trans, trans.transpose(2, 1)) - I",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_189": {
                "*size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2500",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_195": {
                "*size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2500",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_34": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_73": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_123": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_149": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_185": {
                "input": {
                    "value": "trans",
                    "type": "Call",
                    "possible_values": [
                        [
                            "STN3d()",
                            "Call"
                        ],
                        [
                            "STNkd(k=64)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "np.array([1, 0, 0, 0, 1, 0, 0, 0, 1]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "np.eye(self.k).flatten().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/soft_argmax.py": {
        "torch": {
            "sqrt_39": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_ys ** 2 + delta_xs ** 2 + delta_zs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_27": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_28": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_29": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_31": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_32": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "dists.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_104": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_146": {
                "variable": {
                    "value": "argmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(batch_size * channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_148": {
                "variable": {
                    "value": "argmax_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(argmax.float(), torch.mul(height, float(depth)).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "remainder_149": {
                "variable": {
                    "value": "argmax_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.floor(torch.div(argmax.float(), float(depth)))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "remainder_150": {
                "variable": {
                    "value": "argmax_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argmax.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "float(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "smax",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self._softmax_2d(x, self.softmax_temp) * windows",
                            "BinOp"
                        ],
                        [
                            "smax / torch.sum(smax.view(batch_size, channels, -1), dim=2).view(batch_size, channels, 1, 1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "smax",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self._softmax_2d(x, self.softmax_temp) * windows",
                            "BinOp"
                        ],
                        [
                            "smax / torch.sum(smax.view(batch_size, channels, -1), dim=2).view(batch_size, channels, 1, 1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_171": {
                "input": {
                    "value": "smax",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self._softmax_2d(x, self.softmax_temp) * windows",
                            "BinOp"
                        ],
                        [
                            "smax / torch.sum(smax.view(batch_size, channels, -1), dim=2).view(batch_size, channels, 1, 1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "[torch.unsqueeze(x_coords, 2), torch.unsqueeze(y_coords, 2), torch.unsqueeze(z_coords, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_148": {
                "input": {
                    "value": "argmax.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mul(height, float(depth)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_149": {
                "input": {
                    "value": "torch.div(argmax.float(), float(depth))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_156": {
                "input": {
                    "value": "smax.view(batch_size, channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_160": {
                "start": {
                    "value": "self.base_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "x_end_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.base_index + width * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_165": {
                "start": {
                    "value": "self.base_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "y_end_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.base_index + height * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_170": {
                "start": {
                    "value": "self.base_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "z_end_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.base_index + depth * self.step_size",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_148": {
                "input": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "float(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_149": {
                "input": {
                    "value": "argmax.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "float(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_174": {
                "input": {
                    "value": "x_coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(smax, dim=(3, 4)) * x_indices, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "input": {
                    "value": "y_coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(smax, dim=(2, 4)) * y_indices, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_176": {
                "input": {
                    "value": "z_coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(smax, dim=(2, 3)) * z_indices, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/geometry.py": {
        "torch": {}
    },
    "utils/torch.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device_cpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "alphas.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_33": {
                "variable": {
                    "value": "os",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "alphas.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_7": {
                "variable": {
                    "value": "device_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "first_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cos(a), torch.sin(a), zs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "second_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-torch.sin(a), torch.cos(a), zs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_38": {
                "variable": {
                    "value": "third_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zs, zs, os]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "mat_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[first_row, second_row, third_row]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "f_rw",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cos(a), zs, -torch.sin(a)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "s_rw",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zs, os, zs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "t_rw",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(a), zs, torch.cos(a)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "mat_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f_rw, s_rw, t_rw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_52": {
                "input": {
                    "value": "z(gammas)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y(betas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "dict_ckp",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_86": {
                "input": {
                    "value": "b_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "b_mats.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_36": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_36": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_37": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_44": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_46": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_46": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_64": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_37": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_44": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}