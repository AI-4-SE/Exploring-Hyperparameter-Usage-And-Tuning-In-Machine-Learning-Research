{
    "KGQA/LSTM/dataloader.py": {
        "torch": {
            "zeros_64": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "minibatch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "longest_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted_seq_lengths[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sorted_seq[x][0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(sample, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "sample.view(sample.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "p_head",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_77": {
                "tensors": {
                    "value": "p_tail",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "KGQA/LSTM/main.py": {
        "torch": {
            "device_236": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "gpu if use_cuda else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_244": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ExponentialLR_245": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_107": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.get_score_ranked(head=head, sentence=question, sent_len=ques_len)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "tail_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ans",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "d[2]",
                            "Subscript"
                        ],
                        [
                            "[ans]",
                            "List"
                        ],
                        [
                            "data_line[1].split('|')",
                            "Call"
                        ],
                        [
                            "entity2idx[data_sample[2]]",
                            "Subscript"
                        ],
                        [
                            "[entity2idx[entity.strip()] for entity in list(data_sample[2])]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(entity2idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_145": {
                "variable": {
                    "value": "pred_ans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores - mask * 99999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_163": {
                "variable": {
                    "value": "(s, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores - mask * 99999",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_316": {
                "f": {
                    "value": "model_chkpt_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_checkpoint_file_path(checkpoint_path, model_name, num_hops, '', kg_type) + '_' + 'best_score_model' + get_chk_suffix()",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "data": {
                    "value": "len(encoded_question)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_150": {
                "input": {
                    "value": "new_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores - mask * 99999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_151": {
                "input": {
                    "value": "new_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores - mask * 99999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_299": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_checkpoint_file_path(checkpoint_path, model_name, num_hops, suffix, kg_type) + get_chk_suffix()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_309": {
                "obj": {
                    "value": "best_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "get_checkpoint_file_path(checkpoint_path, model_name, num_hops, '', kg_type) + '_' + 'best_score_model' + get_chk_suffix()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_305": {
                "obj": {
                    "value": "best_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "get_checkpoint_file_path(checkpoint_path, model_name, num_hops, '', kg_type) + '_' + 'best_score_model' + get_chk_suffix()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "KGQA/LSTM/model.py": {
        "torch": {
            "Embedding_55": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BCELoss_60": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "variable": {
                    "value": "self.rel_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "reldrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.ent_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "entdrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.score_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "scoredrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mid1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mid2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.hidden2rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mid2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.relation_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.hidden2rel_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.relation_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_107": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTM_108": {
                "variable": {
                    "value": "self.GRU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.lin1(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.lin2(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.hidden2rel(outputs)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden[0, :, :], hidden[1, :, :]], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden[0, :, :], hidden[1, :, :]], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden[0, :, :], hidden[1, :, :]], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_115": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.lin1(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.lin2(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.hidden2rel(outputs)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden[0, :, :], hidden[1, :, :]], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden[0, :, :], hidden[1, :, :]], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden[0, :, :], hidden[1, :, :]], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_125": {
                "variable": {
                    "value": "W_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, ent_dim, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "F.hardtanh(relation) * pi",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W.view(relation.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_128": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "h[0]",
                            "Subscript"
                        ],
                        [
                            "x_n",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(relation, self.W.view(relation.size(1), -1))",
                            "Call"
                        ],
                        [
                            "W_mat.view(-1, head.size(1), head.size(1))",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(W_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "h[0]",
                            "Subscript"
                        ],
                        [
                            "x_n",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_134": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "h[0]",
                            "Subscript"
                        ],
                        [
                            "x_n",
                            "Name"
                        ]
                    ]
                }
            },
            "bmm_144": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(torch.chunk(head, 2, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.embedding(head).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, ent_dim, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "F.hardtanh(relation) * pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "h[0]",
                            "Subscript"
                        ],
                        [
                            "x_n",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_149": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "h[0]",
                            "Subscript"
                        ],
                        [
                            "x_n",
                            "Name"
                        ]
                    ]
                }
            },
            "mm_159": {
                "variable": {
                    "value": "ans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ],
                        [
                            "torch.stack([x, y, z], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "s.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([s[0], s[1], s[2]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_160": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ans",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_168": {
                "variable": {
                    "value": "(s_head, s_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ],
                        [
                            "torch.stack([x, y, z], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "s.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([s[0], s[1], s[2]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s_tail, s_head]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_172": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ],
                        [
                            "torch.stack([x, y, z], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "s.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([s[0], s[1], s[2]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_174": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ],
                        [
                            "torch.stack([x, y, z], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "s.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([s[0], s[1], s[2]], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_178": {
                "variable": {
                    "value": "head",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(torch.chunk(head, 2, dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_186": {
                "variable": {
                    "value": "(re_relation, im_relation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, ent_dim, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "F.hardtanh(relation) * pi",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_187": {
                "variable": {
                    "value": "(re_tail, im_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[re_score, im_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_200": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([re_score, im_score], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(score)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(score)",
                            "Call"
                        ],
                        [
                            "score.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.mm(re_score, re_tail.transpose(1, 0)) + torch.mm(im_score, im_tail.transpose(1, 0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_206": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(torch.chunk(relation, 3, dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_207": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(torch.chunk(head, 3, dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s[0], s[1], s[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_247": {
                "variable": {
                    "value": "ans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ],
                        [
                            "torch.stack([x, y, z], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "s.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([s[0], s[1], s[2]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_248": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ans",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_253": {
                "variable": {
                    "value": "packed_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.word_embeddings(sentence)",
                            "Call"
                        ],
                        [
                            "self.word_embeddings(sentence.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "self.word_embeddings(sentence.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "question_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_255": {
                "variable": {
                    "value": "(outputs, outputs_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.lin1(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.lin2(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.hidden2rel(outputs)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden[0, :, :], hidden[1, :, :]], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden[0, :, :], hidden[1, :, :]], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden[0, :, :], hidden[1, :, :]], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden[0, :, :], hidden[1, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_279": {
                "variable": {
                    "value": "packed_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.word_embeddings(sentence)",
                            "Call"
                        ],
                        [
                            "self.word_embeddings(sentence.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "self.word_embeddings(sentence.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden[0, :, :], hidden[1, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_288": {
                "variable": {
                    "value": "packed_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.word_embeddings(sentence)",
                            "Call"
                        ],
                        [
                            "self.word_embeddings(sentence.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "self.word_embeddings(sentence.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden[0, :, :], hidden[1, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding.weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_87": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding.weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_89": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "multiplier",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm1d_90": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "multiplier",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "sin_223": {
                "variable": {
                    "value": "sin_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_224": {
                "variable": {
                    "value": "cos_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_199": {
                "input": {
                    "value": "im_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "re_head * im_relation + im_head * re_relation",
                            "BinOp"
                        ],
                        [
                            "score[1]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "im_tail.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hardtanh_205": {
                "input": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, ent_dim, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "F.hardtanh(relation) * pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_273": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_178": {
                "input": {
                    "value": "head",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(torch.chunk(head, 2, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.embedding(head).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_206": {
                "input": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, ent_dim, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "F.hardtanh(relation) * pi",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_207": {
                "input": {
                    "value": "head",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(torch.chunk(head, 2, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.embedding(head).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "W_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(w_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(W_torch)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_274": {
                "input": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(self.embedding.weight, p=3, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_37": {}
        }
    },
    "KGQA/RoBERTa/dataloader.py": {
        "torch": {
            "tensor_84": {
                "variable": {
                    "value": "question_tokenized",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tokenizer.encode(question_tokenized, add_special_tokens=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "KGQA/RoBERTa/main.py": {
        "torch": {
            "stack_323": {
                "variable": {
                    "value": "question_tokenized",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "question_tokenized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d[1].to(device)",
                            "Call"
                        ],
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(question_tokenized, dim=0)",
                            "Call"
                        ],
                        [
                            "a[0].to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_324": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d[2].to(device)",
                            "Call"
                        ],
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "a[1].to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_351": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "gpu if use_cuda else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "tail_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ans",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "d[3]",
                            "Subscript"
                        ],
                        [
                            "[ans]",
                            "List"
                        ],
                        [
                            "data_line[1].split('|')",
                            "Call"
                        ],
                        [
                            "entity2idx[data_sample[2]]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(entity2idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_210": {
                "variable": {
                    "value": "pred_ans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores - mask * 99999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_364": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DatasetWebQSP(data, e, entity2idx, que_embedding_model, model_name)",
                            "Call"
                        ],
                        [
                            "DatasetWebQSP(data, e, entity2idx, que_embedding_model, model_name)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_371": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ExponentialLR_372": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_159": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.get_score_ranked(head=head, question_tokenized=question_tokenized, attention_mask=attention_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_228": {
                "variable": {
                    "value": "(s, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores - mask * 99999",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_215": {
                "input": {
                    "value": "new_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores - mask * 99999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_216": {
                "input": {
                    "value": "new_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores - mask * 99999",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_369": {
                "f": {
                    "value": "fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'checkpoints/{que_embedding_model}_finetune/{load_from}.pt'",
                            "JoinedStr"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_433": {
                "f": {
                    "value": "model_chkpt_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_chkpt_path(model_name, que_embedding_model, outfile)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_500": {
                "data": {
                    "value": "head",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d[0].to(device)",
                            "Call"
                        ],
                        [
                            "question_2[0].strip()",
                            "Call"
                        ],
                        [
                            "line[0]",
                            "Subscript"
                        ],
                        [
                            "entity2idx[data_sample[0].strip()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_414": {
                "obj": {
                    "value": "best_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "get_chkpt_path(model_name, que_embedding_model, outfile)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_424": {
                "obj": {
                    "value": "best_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "get_chkpt_path(model_name, que_embedding_model, outfile)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_420": {
                "obj": {
                    "value": "best_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "get_chkpt_path(model_name, que_embedding_model, outfile)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "KGQA/RoBERTa/model.py": {
        "torch": {
            "Dropout_78": {
                "variable": {
                    "value": "self.rel_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "reldrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.ent_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "entdrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.score_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "scoredrop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.fcnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.hidden2rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.relation_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.hidden2rel_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mid2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.relation_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_116": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_117": {
                "variable": {
                    "value": "self._klloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_147": {
                "variable": {
                    "value": "W_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, ent_dim, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W.view(relation.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_150": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(relation, self.W.view(relation.size(1), -1))",
                            "Call"
                        ],
                        [
                            "W_mat.view(-1, head.size(1), head.size(1))",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(W_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_155": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_156": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_166": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(torch.chunk(head, 2, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.embedding(head).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, ent_dim, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_170": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head.view(-1, 1, head.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, head.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_181": {
                "variable": {
                    "value": "ans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_182": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_190": {
                "variable": {
                    "value": "(s_head, s_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s_tail, s_head]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_194": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_196": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.score_dropout(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.embedding.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_202": {
                "variable": {
                    "value": "head",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(torch.chunk(head, 2, dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_212": {
                "variable": {
                    "value": "(re_relation, im_relation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, ent_dim, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ],
                        [
                            "self.rel_dropout(relation)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_213": {
                "variable": {
                    "value": "(re_tail, im_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_218": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[re_score, im_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_108": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding.weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_109": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding.weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_111": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "multiplier",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm1d_112": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "multiplier",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "mean_249": {
                "variable": {
                    "value": "question_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_87": {
                "tensors": {
                    "value": "pretrained_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_126": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.getScores(head, rel_embedding)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_126": {
                "input": {
                    "value": "targets.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_227": {
                "input": {
                    "value": "im_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "re_head * im_relation + im_head * re_relation",
                            "BinOp"
                        ],
                        [
                            "score[1]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "im_tail.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_264": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_202": {
                "input": {
                    "value": "head",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, ent_dim)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(torch.chunk(head, 2, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.ent_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.embedding(head).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(np.random.uniform(-1, 1, (relation_dim, relation_dim, relation_dim)), dtype=torch.float, device='cuda', requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_265": {
                "input": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(self.embedding.weight, p=3, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "data": {
                    "value": "np.random.uniform(-1, 1, (relation_dim, relation_dim, relation_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train_embeddings/main.py": {
        "torch": {
            "zeros_79": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(d.entities)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_236": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_359": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "e1_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "r_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "e2_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_115": {
                "variable": {
                    "value": "(sort_values, sort_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.forward(e1_idx, r_idx)",
                            "Call"
                        ],
                        [
                            "model.forward(e1_idx, r_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_num_threads_206": {
                "int": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_232": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.load_from",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ExponentialLR_238": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=self.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_361": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "e1_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "r_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_embeddings/model.py": {
        "torch": {
            "Embedding_44": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(d.entities)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ent_vec_dim * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "variable": {
                    "value": "self.hidden_dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['hidden_dropout1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.hidden_dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['hidden_dropout2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LogSoftmax_72": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_80": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.log_softmax(pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(ans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, self.entity_dim)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, ent_embedding_size)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(torch.chunk(head, 2, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, self.entity_dim, self.entity_dim)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_112": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(head, relation)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.entity_dim)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.E.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_122": {
                "variable": {
                    "value": "W_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, self.entity_dim, self.entity_dim)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W.view(relation.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_126": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, self.entity_dim)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, ent_embedding_size)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(torch.chunk(head, 2, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(relation, self.W.view(relation.size(1), -1))",
                            "Call"
                        ],
                        [
                            "W_mat.view(-1, ent_embedding_size, ent_embedding_size)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(W_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_130": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, W_mat)",
                            "Call"
                        ],
                        [
                            "s.view(-1, ent_embedding_size)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.E.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_142": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, W_mat)",
                            "Call"
                        ],
                        [
                            "s.view(-1, ent_embedding_size)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.E.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_152": {
                "variable": {
                    "value": "(s_head, s_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, W_mat)",
                            "Call"
                        ],
                        [
                            "s.view(-1, ent_embedding_size)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s_tail, s_head]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_157": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(head, W_mat)",
                            "Call"
                        ],
                        [
                            "s.view(-1, ent_embedding_size)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "head * relation",
                            "BinOp"
                        ],
                        [
                            "torch.cat([s_tail, s_head], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn2(s)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(s)",
                            "Call"
                        ],
                        [
                            "torch.mm(s, self.E.weight.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "0.5 * s",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.E.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "head",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(torch.chunk(head, 2, dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_171": {
                "variable": {
                    "value": "(re_relation, im_relation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "relation.view(-1, self.entity_dim, self.entity_dim)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(relation)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_172": {
                "variable": {
                    "value": "(re_tail, im_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.E.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[re_score, im_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_193": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score_func(h, r)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_18": {
                "variable": {
                    "value": "self.bce_loss_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_47": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(d.relations)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ent_vec_dim * ent_vec_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_64": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ent_vec_dim * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ent_vec_dim * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ent_vec_dim * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_68": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "multiplier",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm1d_69": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "multiplier",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm1d_70": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "multiplier",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "norm_89": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.E.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_49": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(d.relations)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "rel_vec_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(d.relations)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ent_vec_dim * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "pred * true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_184": {
                "input": {
                    "value": "im_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "re_head * im_relation + im_head * re_relation",
                            "BinOp"
                        ],
                        [
                            "score[1]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "im_tail.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(self.E.weight.data, p=3, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_162": {
                "input": {
                    "value": "head",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, self.entity_dim)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.view(-1, 1, ent_embedding_size)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(torch.chunk(head, 2, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn0(head)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(head)",
                            "Call"
                        ],
                        [
                            "head.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(np.random.uniform(-1, 1, (rel_vec_dim, ent_vec_dim, ent_vec_dim)), dtype=torch.float, device='cuda', requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "np.random.uniform(-1, 1, (rel_vec_dim, ent_vec_dim, ent_vec_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}