{
    "scripts/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_64": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_69": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_100": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_123": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_130": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "index_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_196": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_215": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_227": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_229": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_374": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_375": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_376": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_377": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_378": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_545": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_665": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_715": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_724": {
                "variable": {
                    "value": "self.triple_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_726": {
                "variable": {
                    "value": "self.W_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(config.n_embd, config.n_embd, bias=False) for _ in range(self.hop_number)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_728": {
                "variable": {
                    "value": "self.W_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(config.n_embd, config.n_embd, bias=False) for _ in range(self.hop_number)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_730": {
                "variable": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(config.n_embd, config.n_embd, bias=False) for _ in range(self.hop_number)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_732": {
                "variable": {
                    "value": "self.gate_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_733": {
                "variable": {
                    "value": "self.relation_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_762": {
                "variable": {
                    "value": "update_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concept_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.comp_gcn(concept_hidden, relation_hidden, head, tail, concept_label, triple_label, i)",
                            "Call"
                        ],
                        [
                            "self.gcn(concept_hidden, head, tail, concept_label, triple_label, i)",
                            "Call"
                        ],
                        [
                            "concept_hidden",
                            "Method Argument"
                        ],
                        [
                            "concept_hidden",
                            "Method Argument"
                        ],
                        [
                            "concept_hidden",
                            "Method Argument"
                        ],
                        [
                            "concept_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_763": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "head - sum((1 if h < head else 0 for h in self.pruned_heads))",
                            "BinOp"
                        ],
                        [
                            "head.unsqueeze(1).expand(triple_prob.size(0), triple_prob.size(1), -1)",
                            "Call"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_764": {
                "variable": {
                    "value": "count_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head.size(0)",
                            "Call"
                        ],
                        [
                            "head.size(0)",
                            "Call"
                        ],
                        [
                            "src_input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "src_input_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concept_hidden.size(1)",
                            "Call"
                        ],
                        [
                            "concept_hidden.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_778": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_800": {
                "variable": {
                    "value": "update_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concept_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.comp_gcn(concept_hidden, relation_hidden, head, tail, concept_label, triple_label, i)",
                            "Call"
                        ],
                        [
                            "self.gcn(concept_hidden, head, tail, concept_label, triple_label, i)",
                            "Call"
                        ],
                        [
                            "concept_hidden",
                            "Method Argument"
                        ],
                        [
                            "concept_hidden",
                            "Method Argument"
                        ],
                        [
                            "concept_hidden",
                            "Method Argument"
                        ],
                        [
                            "concept_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_801": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "head - sum((1 if h < head else 0 for h in self.pruned_heads))",
                            "BinOp"
                        ],
                        [
                            "head.unsqueeze(1).expand(triple_prob.size(0), triple_prob.size(1), -1)",
                            "Call"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_802": {
                "variable": {
                    "value": "count_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head.size(0)",
                            "Call"
                        ],
                        [
                            "head.size(0)",
                            "Call"
                        ],
                        [
                            "src_input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "src_input_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concept_hidden.size(1)",
                            "Call"
                        ],
                        [
                            "concept_hidden.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_814": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_835": {
                "variable": {
                    "value": "init_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distance",
                            "Method Argument"
                        ],
                        [
                            "distance",
                            "Method Argument"
                        ],
                        [
                            "distance",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_835": {
                "variable": {
                    "value": "init_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_892": {
                "variable": {
                    "value": "head_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_layer_comp_gcn(memory, rel_repr, head, tail, concept_label, triple_label, layer_number=self.hop_number)",
                            "Call"
                        ],
                        [
                            "self.multi_layer_comp_gcn(memory, rel_repr, head, tail, concept_label, triple_label, layer_number=self.hop_number)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head.unsqueeze(-1).expand(node_repr.size(0), head.size(1), node_repr.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_893": {
                "variable": {
                    "value": "tail_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_layer_comp_gcn(memory, rel_repr, head, tail, concept_label, triple_label, layer_number=self.hop_number)",
                            "Call"
                        ],
                        [
                            "self.multi_layer_comp_gcn(memory, rel_repr, head, tail, concept_label, triple_label, layer_number=self.hop_number)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tail.unsqueeze(-1).expand(node_repr.size(0), tail.size(1), node_repr.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_897": {
                "variable": {
                    "value": "triple_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(head_repr, rel_repr, tail_repr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_903": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_input_ids, target_input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_904": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, torch.ones_like(target_input_ids).to(target_input_ids.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_905": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_position_ids, target_position_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_933": {
                "variable": {
                    "value": "gate_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "gate_mask.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NLLLoss_936": {
                "variable": {
                    "value": "gen_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_940": {
                "variable": {
                    "value": "triple_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "triple_mask.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_967": {
                "variable": {
                    "value": "head_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_layer_comp_gcn(memory, rel_repr, head, tail, concept_label, triple_label, layer_number=self.hop_number)",
                            "Call"
                        ],
                        [
                            "self.multi_layer_comp_gcn(memory, rel_repr, head, tail, concept_label, triple_label, layer_number=self.hop_number)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head.unsqueeze(-1).expand(node_repr.size(0), head.size(1), node_repr.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_968": {
                "variable": {
                    "value": "tail_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multi_layer_comp_gcn(memory, rel_repr, head, tail, concept_label, triple_label, layer_number=self.hop_number)",
                            "Call"
                        ],
                        [
                            "self.multi_layer_comp_gcn(memory, rel_repr, head, tail, concept_label, triple_label, layer_number=self.hop_number)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tail.unsqueeze(-1).expand(node_repr.size(0), tail.size(1), node_repr.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_972": {
                "variable": {
                    "value": "triple_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(head_repr, rel_repr, tail_repr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sigmoid_1008": {
                "variable": {
                    "value": "sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_1009": {
                "variable": {
                    "value": "tanh",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1010": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_1011": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_1012": {
                "variable": {
                    "value": "triple_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states.view(*output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.transformer(input_ids, attention_mask=attention_mask, position_ids=position_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "hidden_states[:, -1, :].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.triple_linear(memory_dict['triple_repr']).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_408": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_ids.size(-1) + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_445": {
                "variable": {
                    "value": "head_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "input_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_588": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_694": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_701": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_859": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concept_probs[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_105": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_116": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_165": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_567": {
                "input": {
                    "value": "hidden_states * attention_mask.unsqueeze(2).expand_as(hidden_states.data)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_901": {
                "input": {
                    "value": "triple_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((head_repr, rel_repr, tail_repr), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((head_repr, rel_repr, tail_repr), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_901": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_944": {
                "input": {
                    "value": "gen_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_loss_fn(hybrid_probs_clamp.log().view(-1, hybrid_probs.size(-1)), labels.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_944": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_726": {
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_728": {
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_730": {
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_904": {
                "input": {
                    "value": "target_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_137": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_105": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/find_neighbours.py": {
        "torch": {}
    },
    "scripts/data.py": {
        "torch": {
            "tensor_223": {
                "data": {
                    "value": "src_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "src_input_ids[:self.src_max_length]",
                            "Subscript"
                        ],
                        [
                            "src_input_ids + [self.pad]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_224": {
                "data": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(src_input_ids)",
                            "BinOp"
                        ],
                        [
                            "attention_mask + [0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_225": {
                "data": {
                    "value": "src_position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(0, len(src_input_ids)))",
                            "Call"
                        ],
                        [
                            "src_position_ids[:self.src_max_length]",
                            "Subscript"
                        ],
                        [
                            "src_position_ids + [0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_226": {
                "data": {
                    "value": "target_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[self.bos] + self.tokenizer.encode(' ' + tgt)",
                            "BinOp"
                        ],
                        [
                            "target_input_ids[:self.tgt_max_length]",
                            "Subscript"
                        ],
                        [
                            "target_input_ids + [self.pad]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_227": {
                "data": {
                    "value": "target_position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(range(0, len(target_input_ids)))",
                            "Call"
                        ],
                        [
                            "target_position_ids[:self.tgt_max_length]",
                            "Subscript"
                        ],
                        [
                            "target_position_ids + [0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_228": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[-1] * self.src_max_length + labels",
                            "BinOp"
                        ],
                        [
                            "target_input_ids[1:] + [self.eos]",
                            "BinOp"
                        ],
                        [
                            "labels + [-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_229": {
                "data": {
                    "value": "concept_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "concept_ids[:self.max_memory_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_230": {
                "data": {
                    "value": "concept_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "concept_label[:self.max_memory_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_231": {
                "data": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "distance[:self.max_memory_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_232": {
                "data": {
                    "value": "head_ids_trunc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_ids.copy()",
                            "Call"
                        ],
                        [
                            "head_ids_trunc[:self.max_triple_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_233": {
                "data": {
                    "value": "tail_ids_trunc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tail_ids.copy()",
                            "Call"
                        ],
                        [
                            "tail_ids_trunc[:self.max_triple_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_234": {
                "data": {
                    "value": "relations_trunc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relations.copy()",
                            "Call"
                        ],
                        [
                            "relations_trunc[:self.max_triple_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_235": {
                "data": {
                    "value": "triple_labels_trunc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "triple_labels.copy()",
                            "Call"
                        ],
                        [
                            "triple_labels_trunc[:self.max_triple_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_236": {
                "data": {
                    "value": "vocab_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_237": {
                "data": {
                    "value": "map_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_238": {
                "data": {
                    "value": "gate_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[-1] * self.src_max_length + gate_labels",
                            "BinOp"
                        ],
                        [
                            "[1 if x in target_concept_ids else 0 for x in labels]",
                            "ListComp"
                        ],
                        [
                            "gate_labels + [-1]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/dictionary.py": {
        "torch": {
            "Tensor_236": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_64": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/main.py": {
        "torch": {
            "DataLoader_165": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MHDataset(args, tokenizer, args.train_data_file, src_max_length=args.source_length, tgt_max_length=args.target_length)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_318": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MHDataset(args, tokenizer, eval_data_file, src_max_length=args.source_length, tgt_max_length=args.target_length, do_generate=evaluate_metrics == 'bleu')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_396": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_397": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.per_gpu_eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_188": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(load_from_path, source_length=args.source_length, gamma=args.gamma, alpha=args.alpha, aggregate_method=args.aggregate_method, tokenizer=tokenizer)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_369": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_555": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_556": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_559": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_63": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_164": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MHDataset(args, tokenizer, args.train_data_file, src_max_length=args.source_length, tgt_max_length=args.target_length)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_164": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MHDataset(args, tokenizer, args.train_data_file, src_max_length=args.source_length, tgt_max_length=args.target_length)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_317": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MHDataset(args, tokenizer, eval_data_file, src_max_length=args.source_length, tgt_max_length=args.target_length, do_generate=evaluate_metrics == 'bleu')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_317": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MHDataset(args, tokenizer, eval_data_file, src_max_length=args.source_length, tgt_max_length=args.target_length, do_generate=evaluate_metrics == 'bleu')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_558": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_369": {
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__257": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__259": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'scheduler.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_280": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'optimizer.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/optimization.py": {
        "torch": {
            "zeros_like_154": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_156": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/seq_generator.py": {
        "torch": {
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_178": {
                "variable": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0]",
                            "Subscript"
                        ],
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_211": {
                "variable": {
                    "value": "cand_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "cand_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_610": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_621": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_627": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_714": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "encoder_outs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_outs['input_ids'][:, :src_len], tokens[:, :step + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "encoder_outs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_outs['attention_mask'], encoder_outs['attention_mask'].new_ones(encoder_outs['attention_mask'].size(0), 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "encoder_outs[position_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_outs['position_ids'], encoder_outs['position_ids'].new_ones(encoder_outs['position_ids'].size(0), 1) * step)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_520": {
                "variable": {
                    "value": "active_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step])",
                            "Call"
                        ],
                        [
                            "cand_scores[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "scores[:, step].view(bsz, beam_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_438": {
                "input": {
                    "value": "cand_bbsz_idx[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "cand_indices.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "eos_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('eos_bbsz_idx')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_497": {
                "input": {
                    "value": "(eos_mask.type_as(cand_offsets) * cand_size).to(src_tokens.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cand_offsets[:eos_mask.size(1)].to(src_tokens.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_506": {
                "input": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_mask')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "(new_blacklist, active_hypos)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_516": {
                "input": {
                    "value": "cand_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ],
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_529": {
                "input": {
                    "value": "tokens[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tokens_buf[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tokens.clone()",
                            "Call"
                        ],
                        [
                            "tokens",
                            "variable"
                        ]
                    ]
                }
            },
            "gather_533": {
                "input": {
                    "value": "cand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step])",
                            "Call"
                        ],
                        [
                            "cand_indices[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tokens_buf.view(bsz, beam_size, -1)[:, :, step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_543": {
                "input": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step])",
                            "Call"
                        ],
                        [
                            "cand_scores[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "scores_buf.view(bsz, beam_size, -1)[:, :, step]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_555": {
                "input": {
                    "value": "gates[:, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "gates_buf[:, :step + 2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "gates.clone()",
                            "Call"
                        ],
                        [
                            "gates",
                            "variable"
                        ]
                    ]
                }
            },
            "logsumexp_656": {
                "input": {
                    "value": "torch.stack(log_probs, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_446": {
                "input": {
                    "value": "cand_scores[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "cand_indices.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "eos_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('eos_scores', type_of=scores)",
                            "Call"
                        ],
                        [
                            "eos_scores / (step + 1) ** self.len_penalty",
                            "BinOp"
                        ],
                        [
                            "eos_scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_538": {
                "input": {
                    "value": "scores[:, :step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "scores_buf[:, :step]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "scores.clone()",
                            "Call"
                        ],
                        [
                            "scores_buf.type_as(lprobs)",
                            "Call"
                        ],
                        [
                            "scores",
                            "variable"
                        ]
                    ]
                }
            },
            "index_select_550": {
                "input": {
                    "value": "attn[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "attn_buf[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attn.clone()",
                            "Call"
                        ],
                        [
                            "attn",
                            "variable"
                        ]
                    ]
                }
            },
            "stack_656": {
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_321": {
                "start": {
                    "value": "batch_idxs.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_210": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0]",
                            "Subscript"
                        ],
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}