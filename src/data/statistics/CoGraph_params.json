{
    "dataProcess/concat_and_split.py": {
        "sklearn": {
            "train_test_split_122": {
                "variable": {
                    "value": "(train_ids, dev_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "hadm_ids",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 / 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "22",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_124": {
                "variable": {
                    "value": "(dev_ids, test_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dev_ids",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "22",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "full_eval.py": {
        "sklearn": {
            "accuracy_score_9": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "precision_score_10": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "recall_score_11": {
                "variable": {
                    "value": "recall",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "f1_score_12": {
                "variable": {
                    "value": "f1_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "prototype_model.py": {
        "sklearn": {},
        "torch": {
            "matmul_100": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.unsqueeze(1).expand(n, m, d)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_support.contiguous().view(n_way * n_support, *x_support.size()[2:]), x_query.contiguous().view(n_way * n_query, *x_query.size()[2:])], 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_24": {
                "variable": {
                    "value": "sample_graphs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "sample_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_37": {
                "variable": {
                    "value": "target_indx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "n_way",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample['n_way']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adj_support.contiguous().view(n_way * n_support, *adj_support.size()[2:]), adj_query.contiguous().view(n_way * n_query, *adj_query.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_support.contiguous().view(n_way * n_support, *x_support.size()[2:]), x_query.contiguous().view(n_way * n_query, *x_query.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(x, y.t())",
                            "Call"
                        ],
                        [
                            "matching_score(z_query, z_proto)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_68": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.sigmoid(scores)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_onehot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor(target_indx.size(0), n_way).float().to(self.args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_90": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "sklearn": {},
        "torch": {}
    },
    "validation experiments/LR.py": {
        "sklearn": {
            "train_test_split_449": {
                "variable": {
                    "value": "(train_patients, val_patients, train_labels, val_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "patientEHRIDs",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "patientLabels",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 / 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2019",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_451": {
                "variable": {
                    "value": "(val_patients, test_patients, val_labels, test_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "val_patients",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "val_labels",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2019",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_418": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_%d.pkl' % labelNum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorDataset_463": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(train_patients).float()",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_464": {
                "variable": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(val_patients).float()",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_465": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(test_patients).float()",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_469": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(torch.Tensor(train_patients).float(), torch.Tensor(train_labels).float())",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_470": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(torch.Tensor(val_patients).float(), torch.Tensor(val_labels).float())",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_471": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(torch.Tensor(test_patients).float(), torch.Tensor(test_labels).float())",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_104": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_size * 2000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_116": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_120": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.sigmoid(self.linear2(input))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.getWeights(y_target)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_464": {},
            "Tensor_465": {},
            "save_520": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Logistic(vocab_size=len(ehrVocab2id), emb_size=100, hidden_size=128, output_size=labelNum)",
                            "Call"
                        ],
                        [
                            "torch.load('model_%d.pkl' % labelNum)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'model_%d.pkl' % labelNum",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/cnn_model.py": {
        "torch": {
            "Embedding_26": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(args.word2ix)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "cnn_embedding_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(chanel_num, filter_num, (filter_size, cnn_embedding_size)) for filter_size in filter_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.3",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_45": {
                "variable": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[item.squeeze(3) for item in x]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(item, item.size(2)).squeeze(2) for item in x_]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x_, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_41": {
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool1d_44": {
                "input": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "item.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "chanel_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(filter_size, cnn_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/main.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2021",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2021",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_28": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2021",
                            "Constant"
                        ]
                    ]
                }
            },
            "StepLR_69": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CNN/prototype_model.py": {
        "torch": {
            "Tensor_24": {
                "variable": {
                    "value": "sample__",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "target_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "n_way",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample['n_way']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_36": {
                "variable": {
                    "value": "sample_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_support.contiguous().view(n_way * n_support, *sample_support.size()[2:]), sample_query.contiguous().view(n_way * n_query, *sample_query.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_50": {
                "variable": {
                    "value": "log_p_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-dists",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_54": {
                "variable": {
                    "value": "acc_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "target_inds.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "acc_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_71": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/utils.py": {
        "torch": {}
    },
    "gnn.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(args.input_dim, args.hidden_dim_list[0]).to(args.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.weight2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(args.hidden_dim_list[0], args.hidden_dim_list[1]).to(args.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "entities",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for i in range(len(args.entity2id))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_31": {
                "variable": {
                    "value": "entities",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "A_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "A_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(A_hat, requires_grad=False).float().to(self.args.device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.view(X.size()[0] * X.size()[1]).long()",
                            "Call"
                        ],
                        [
                            "self.node_features[X]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(X, self.weight)",
                            "Call"
                        ],
                        [
                            "X + self.bias",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ],
                        [
                            "X.view(X.size()[0] * X.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.mm(X, self.weight2)",
                            "Call"
                        ],
                        [
                            "X + self.bias2",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(A_hat, X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_46": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.view(X.size()[0] * X.size()[1]).long()",
                            "Call"
                        ],
                        [
                            "self.node_features[X]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(X, self.weight)",
                            "Call"
                        ],
                        [
                            "X + self.bias",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ],
                        [
                            "X.view(X.size()[0] * X.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.mm(X, self.weight2)",
                            "Call"
                        ],
                        [
                            "X + self.bias2",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(A_hat, X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(args.hidden_dim_list[0]).to(args.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.bias2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(args.hidden_dim_list[1]).to(args.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_52": {
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.view(X.size()[0] * X.size()[1]).long()",
                            "Call"
                        ],
                        [
                            "self.node_features[X]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(X, self.weight)",
                            "Call"
                        ],
                        [
                            "X + self.bias",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ],
                        [
                            "X.view(X.size()[0] * X.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.mm(X, self.weight2)",
                            "Call"
                        ],
                        [
                            "X + self.bias2",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_44": {
                "input": {
                    "value": "A_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(A_hat, requires_grad=False).float().to(self.args.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.view(X.size()[0] * X.size()[1]).long()",
                            "Call"
                        ],
                        [
                            "self.node_features[X]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(X, self.weight)",
                            "Call"
                        ],
                        [
                            "X + self.bias",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ],
                        [
                            "X.view(X.size()[0] * X.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.mm(X, self.weight2)",
                            "Call"
                        ],
                        [
                            "X + self.bias2",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_50": {
                "input": {
                    "value": "A_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(A_hat, requires_grad=False).float().to(self.args.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.view(X.size()[0] * X.size()[1]).long()",
                            "Call"
                        ],
                        [
                            "self.node_features[X]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(X, self.weight)",
                            "Call"
                        ],
                        [
                            "X + self.bias",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ],
                        [
                            "X.view(X.size()[0] * X.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.mm(X, self.weight2)",
                            "Call"
                        ],
                        [
                            "X + self.bias2",
                            "BinOp"
                        ],
                        [
                            "X.view(A_hat.size()[0], A_hat.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.bmm(A_hat, X))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "StepLR_70": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ],
                        [
                            "1234",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1234",
                            "Constant"
                        ],
                        [
                            "1234",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    },
    "validation experiments/classificationModel.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_21": {
                "variable": {
                    "value": "target_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "n_way",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_26": {
                "variable": {
                    "value": "log_p_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_30": {
                "variable": {
                    "value": "acc_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "target_inds.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_30": {
                "variable": {
                    "value": "acc_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "validation experiments/cnn_model.py": {
        "torch": {
            "Embedding_26": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(args.word2ix)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "cnn_embedding_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(chanel_num, filter_num, (filter_size, cnn_embedding_size)) for filter_size in filter_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.3",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_45": {
                "variable": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[item.squeeze(3) for item in x]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(item, item.size(2)).squeeze(2) for item in x_]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x_, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_41": {
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool1d_44": {
                "input": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "item.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "chanel_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(filter_size, cnn_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "validation experiments/main.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2021",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2021",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_28": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2021",
                            "Constant"
                        ]
                    ]
                }
            },
            "StepLR_73": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "validation experiments/process_raw.py": {
        "torch": {}
    },
    "validation experiments/utils.py": {
        "torch": {}
    }
}