{
    "main.py": {
        "torch": {
            "MSELoss_71": {
                "variable": {
                    "value": "loss_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_74": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.decay_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model/model_.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_dims]",
                            "List"
                        ],
                        [
                            "list(input_dims)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [self.padding_size[1], self.padding_size[1], self.padding_size[0], self.padding_size[0]])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[self.padding_size[1], self.padding_size[1], self.padding_size[0], self.padding_size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[conv2d_(input_dims=input_dim, output_dims=num_unit, kernel_size=[1, 1], stride=[1, 1], padding='VALID', use_bias=use_bias, activation=activation, bn_decay=bn_decay) for (input_dim, num_unit, activation) in zip(input_dims, units, activations)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_85": {
                "variable": {
                    "value": "dayofweek",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "TE.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "TE.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_86": {
                "variable": {
                    "value": "timeofday",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "TE.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "TE.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "288",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_91": {
                "variable": {
                    "value": "TE",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dayofweek, timeofday)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, STE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(query, self.K, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(key, self.K, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(value, self.K, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_q(STE_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, attention, -2 ** 15 + 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, attention, -2 ** 15 + 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_139": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(X, batch_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, STE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(query, self.K, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(key, self.K, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(value, self.K, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_q(STE_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.FC_k(STE_his)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_202": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, attention, -2 ** 15 + 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_204": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, attention, -2 ** 15 + 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_206": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(X, batch_size_, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_233": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(XS, XT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_234": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(z, HS)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mul(1 - z, HT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(query, self.K, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(key, self.K, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(value, self.K, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_297": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_q(STE_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.FC_k(STE_his)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_299": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, attention, -2 ** 15 + 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_301": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, attention, -2 ** 15 + 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_303": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(X, batch_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_333": {
                "variable": {
                    "value": "self.STAttBlock_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[STAttBlock(K, d, bn_decay) for _ in range(L)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_334": {
                "variable": {
                    "value": "self.STAttBlock_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[STAttBlock(K, d, bn_decay) for _ in range(L)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_344": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size_, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(X, -1)",
                            "Call"
                        ],
                        [
                            "self.FC_1(X)",
                            "Call"
                        ],
                        [
                            "net(X, STE_his)",
                            "Call"
                        ],
                        [
                            "self.transformAttention(X, STE_his, STE_pred)",
                            "Call"
                        ],
                        [
                            "net(X, STE_pred)",
                            "Call"
                        ],
                        [
                            "self.FC_2(X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu__32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [self.padding_size[1], self.padding_size[1], self.padding_size[0], self.padding_size[0]])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_88": {
                "variable": {
                    "value": "dayofweek[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "TE[..., 0][i].to(torch.int64) % 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_90": {
                "variable": {
                    "value": "timeofday[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "TE[..., 1][j].to(torch.int64) % 288",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "288",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_195": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tril_196": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_step, num_step)",
                            "Call"
                        ],
                        [
                            "torch.tril(mask)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(torch.unsqueeze(mask, dim=0), dim=0)",
                            "Call"
                        ],
                        [
                            "mask.repeat(self.K * batch_size, num_vertex, 1, 1)",
                            "Call"
                        ],
                        [
                            "mask.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_197": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_step, num_step)",
                            "Call"
                        ],
                        [
                            "torch.tril(mask)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(torch.unsqueeze(mask, dim=0), dim=0)",
                            "Call"
                        ],
                        [
                            "mask.repeat(self.K * batch_size, num_vertex, 1, 1)",
                            "Call"
                        ],
                        [
                            "mask.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_200": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_step, num_step)",
                            "Call"
                        ],
                        [
                            "torch.tril(mask)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(torch.unsqueeze(mask, dim=0), dim=0)",
                            "Call"
                        ],
                        [
                            "mask.repeat(self.K * batch_size, num_vertex, 1, 1)",
                            "Call"
                        ],
                        [
                            "mask.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "attention / self.d ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, attention, -2 ** 15 + 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-2 ** 15 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_252": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size_, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(X, -1)",
                            "Call"
                        ],
                        [
                            "self.FC_1(X)",
                            "Call"
                        ],
                        [
                            "net(X, STE_his)",
                            "Call"
                        ],
                        [
                            "self.transformAttention(X, STE_his, STE_pred)",
                            "Call"
                        ],
                        [
                            "net(X, STE_pred)",
                            "Call"
                        ],
                        [
                            "self.FC_2(X)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(torch.mul(z, HS), torch.mul(1 - z, HT))",
                            "Call"
                        ],
                        [
                            "self.FC_h(H)",
                            "Call"
                        ],
                        [
                            "self.gatedFusion(HS, HT)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_361": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size_, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(X, -1)",
                            "Call"
                        ],
                        [
                            "self.FC_1(X)",
                            "Call"
                        ],
                        [
                            "net(X, STE_his)",
                            "Call"
                        ],
                        [
                            "self.transformAttention(X, STE_his, STE_pred)",
                            "Call"
                        ],
                        [
                            "net(X, STE_pred)",
                            "Call"
                        ],
                        [
                            "self.FC_2(X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_130": {
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_q(STE_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_131": {
                "tensor": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.FC_k(STE_his)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_132": {
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_139": {
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size_, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(X, -1)",
                            "Call"
                        ],
                        [
                            "self.FC_1(X)",
                            "Call"
                        ],
                        [
                            "net(X, STE_his)",
                            "Call"
                        ],
                        [
                            "self.transformAttention(X, STE_his, STE_pred)",
                            "Call"
                        ],
                        [
                            "net(X, STE_pred)",
                            "Call"
                        ],
                        [
                            "self.FC_2(X)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_178": {
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_q(STE_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_179": {
                "tensor": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.FC_k(STE_his)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_180": {
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_206": {
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size_, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(X, -1)",
                            "Call"
                        ],
                        [
                            "self.FC_1(X)",
                            "Call"
                        ],
                        [
                            "net(X, STE_his)",
                            "Call"
                        ],
                        [
                            "self.transformAttention(X, STE_his, STE_pred)",
                            "Call"
                        ],
                        [
                            "net(X, STE_pred)",
                            "Call"
                        ],
                        [
                            "self.FC_2(X)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_size_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_233": {
                "input": {
                    "value": "XS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_xs(HS)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_xt(HT)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_234": {
                "input": {
                    "value": "1 - z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "HT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temporalAttention(X, STE)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_287": {
                "tensor": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_q(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_q(STE_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(query, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_288": {
                "tensor": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_k(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.FC_k(STE_his)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(key, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_289": {
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.FC_v(X)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(value, self.K, dim=-1), dim=0)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_303": {
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.cat((X, STE), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size_, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, value)",
                            "Call"
                        ],
                        [
                            "X.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(X, batch_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.FC(X)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(X, -1)",
                            "Call"
                        ],
                        [
                            "self.FC_1(X)",
                            "Call"
                        ],
                        [
                            "net(X, STE_his)",
                            "Call"
                        ],
                        [
                            "self.transformAttention(X, STE_his, STE_pred)",
                            "Call"
                        ],
                        [
                            "net(X, STE_pred)",
                            "Call"
                        ],
                        [
                            "self.FC_2(X)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/test.py": {
        "torch": {
            "load_18": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "trainPred",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(trainPred, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "valPred",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(valPred, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "testPred",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(testPred, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils_.py": {
        "torch": {
            "ne_16": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_19": {
                "variable": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sub(pred, label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.sub(pred, label)).type(torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.mean(mae)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_24": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(rmse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "mape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mae / label",
                            "BinOp"
                        ],
                        [
                            "mape * mask",
                            "BinOp"
                        ],
                        [
                            "torch.mean(mape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_step - num_his - num_pred + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_his",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_step - num_his - num_pred + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "traffic",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "df.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "dayofweek",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(time.weekday)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "timeofday",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(timeofday)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dayofweek, timeofday)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "trainTE",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trainTE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2instance(train, args.num_his, args.num_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(trainTE, 1).type(torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "valTE",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valTE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2instance(val, args.num_his, args.num_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(valTE, 1).type(torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "testTE",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testTE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2instance(test, args.num_his, args.num_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat(testTE, 1).type(torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ne_118": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_121": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ne(label, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.ne(label, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.tensor(0.0), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_122": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sub(pred, label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_124": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.sub(pred, label))",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.tensor(0.0), loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_125": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.sub(pred, label))",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.tensor(0.0), loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_18": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ne(label, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.ne(label, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.tensor(0.0), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "SE",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_vertex, dims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ne(label, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.ne(label, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.tensor(0.0), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_24": {
                "input": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mae ** 2",
                            "BinOp"
                        ],
                        [
                            "rmse * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(torch.mean(rmse))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_58": {
                "input": {
                    "value": "trainX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(trainX - mean) / std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "std_58": {
                "input": {
                    "value": "trainX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(trainX - mean) / std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "SE[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(ch) for ch in temp[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "time.weekday",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "timeofday",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(time.hour * 3600 + time.minute * 60 + time.second) // time.freq.delta.total_seconds()",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(torch.tensor(timeofday), (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_121": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ne(label, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.ne(label, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.tensor(0.0), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_121": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sub_122": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_124": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.sub(pred, label))",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.tensor(0.0), loss)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_124": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sub_19": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}