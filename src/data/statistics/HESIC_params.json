{
    "compressai/datasets/utils.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_27": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_166": {
                "variable": {
                    "value": "homo_img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homo_img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(img1, (self.homopic_size, self.homopic_size))",
                            "Call"
                        ],
                        [
                            "self.homotransforms(homo_img1)",
                            "Call"
                        ],
                        [
                            "torch.mean(homo_img1, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "homo_img1[:, y:y + self.homopatch_size, x:x + self.homopatch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_167": {
                "variable": {
                    "value": "homo_img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homo_img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(img2, (self.homopic_size, self.homopic_size))",
                            "Call"
                        ],
                        [
                            "self.homotransforms(homo_img2)",
                            "Call"
                        ],
                        [
                            "torch.mean(homo_img2, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "homo_img2[:, y:y + self.homopatch_size, x:x + self.homopatch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[x, y], [x + self.homopatch_size, y], [x + self.homopatch_size, y + self.homopatch_size], [x, y + self.homopatch_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "H.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/datasets/utils_backup.py": {
        "torch": {}
    },
    "compressai/entropy_models/entropy_models.py": {
        "torch": {
            "round_116": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ],
                        [
                            "inputs.type_as(means)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "cdf.new(indexes.size())",
                            "Call"
                        ],
                        [
                            "self._dequantize(outputs, means)",
                            "Call"
                        ],
                        [
                            "self._quantize(values, 'noise' if self.training else 'dequantize', self._medians())",
                            "Call"
                        ],
                        [
                            "outputs.reshape(shape)",
                            "Call"
                        ],
                        [
                            "outputs.permute(3, 0, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self._quantize(inputs, 'noise' if self.training else 'dequantize', means)",
                            "Call"
                        ],
                        [
                            "self._quantize(inputs, 'noise' if self.training else 'dequantize', means=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(pmf_length), max_length + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_268": {
                "variable": {
                    "value": "self._biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_269": {
                "variable": {
                    "value": "self._factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_270": {
                "variable": {
                    "value": "self._matrices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_291": {
                "variable": {
                    "value": "self.quantiles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(channels, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ceil_311": {
                "variable": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians - self.quantiles[:, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(minima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(minima, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_312": {
                "variable": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians - self.quantiles[:, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(minima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(minima, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_315": {
                "variable": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quantiles[:, 0, 2] - medians",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(maxima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(maxima, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_316": {
                "variable": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quantiles[:, 0, 2] - medians",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(maxima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(maxima, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_324": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmf_length.max()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_333": {
                "variable": {
                    "value": "pmf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(sign * upper) - torch.sigmoid(sign * lower)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_347": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits - self.target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_347": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_380": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(sign * upper) - torch.sigmoid(sign * lower)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_416": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ceil_506": {
                "variable": {
                    "value": "pmf_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale_table * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_508": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pmf_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxima + minima + 1",
                            "BinOp"
                        ],
                        [
                            "2 * pmf_center + 1",
                            "BinOp"
                        ],
                        [
                            "2 * pmf_center + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_510": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(max_length).int() - pmf_center[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_539": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.entropy_coder.decode_with_indexes(s, indexes[i].reshape(-1).int().tolist(), cdf.tolist(), self._cdf_length.reshape(-1).int().tolist(), self._offset.reshape(-1).int().tolist())",
                            "Call"
                        ],
                        [
                            "x.reshape(x.size(0), 1, -1)",
                            "Call"
                        ],
                        [
                            "inputs - means",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.abs(values)",
                            "Call"
                        ],
                        [
                            "inputs - means[:, M * k:(k + 1) * M]",
                            "BinOp"
                        ],
                        [
                            "torch.abs(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_637": {
                "variable": {
                    "value": "pmf_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale_table * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_639": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pmf_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxima + minima + 1",
                            "BinOp"
                        ],
                        [
                            "2 * pmf_center + 1",
                            "BinOp"
                        ],
                        [
                            "2 * pmf_center + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_641": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(max_length).int() - pmf_center[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p[:pmf_length[i]], tail_mass[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[i].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_357": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logits_cumulative(self.quantiles, stop_gradient=True)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.matmul(F.softplus(matrix), logits)",
                            "Call"
                        ],
                        [
                            "logits + torch.tanh(factor) * torch.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_402": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ],
                        [
                            "inputs.type_as(means)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "cdf.new(indexes.size())",
                            "Call"
                        ],
                        [
                            "self._dequantize(outputs, means)",
                            "Call"
                        ],
                        [
                            "self._quantize(values, 'noise' if self.training else 'dequantize', self._medians())",
                            "Call"
                        ],
                        [
                            "outputs.reshape(shape)",
                            "Call"
                        ],
                        [
                            "outputs.permute(3, 0, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self._quantize(inputs, 'noise' if self.training else 'dequantize', means)",
                            "Call"
                        ],
                        [
                            "self._quantize(inputs, 'noise' if self.training else 'dequantize', means=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_482": {},
            "Tensor_613": {},
            "abs_676": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.entropy_coder.decode_with_indexes(s, indexes[i].reshape(-1).int().tolist(), cdf.tolist(), self._cdf_length.reshape(-1).int().tolist(), self._offset.reshape(-1).int().tolist())",
                            "Call"
                        ],
                        [
                            "x.reshape(x.size(0), 1, -1)",
                            "Call"
                        ],
                        [
                            "inputs - means",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.abs(values)",
                            "Call"
                        ],
                        [
                            "inputs - means[:, M * k:(k + 1) * M]",
                            "BinOp"
                        ],
                        [
                            "torch.abs(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_106": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_287": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_291": {},
            "Tensor_296": {},
            "sign_332": {
                "input": {
                    "value": "lower + upper",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_337": {
                "input": {
                    "value": "lower[:, 0, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_338": {
                "input": {
                    "value": "-upper[:, 0, -1:]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_378": {
                "input": {
                    "value": "lower + upper",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erfc_489": {
                "input": {
                    "value": "const * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erfc_620": {
                "input": {
                    "value": "const * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_280": {
                "data": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], filters[i])",
                            "Call"
                        ],
                        [
                            "self._matrices[i]",
                            "Subscript"
                        ],
                        [
                            "matrix.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_284": {
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], 1)",
                            "Call"
                        ],
                        [
                            "self._biases[i]",
                            "Subscript"
                        ],
                        [
                            "bias.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_334": {
                "input": {
                    "value": "sign * lower",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_357": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], filters[i])",
                            "Call"
                        ],
                        [
                            "self._matrices[i]",
                            "Subscript"
                        ],
                        [
                            "matrix.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_381": {
                "input": {
                    "value": "sign * lower",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_469": {},
            "arange_511": {
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmf_length.max()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_596": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_600": {},
            "arange_642": {
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmf_length.max()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_289": {
                "data": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], 1)",
                            "Call"
                        ],
                        [
                            "self._factors[i]",
                            "Subscript"
                        ],
                        [
                            "factor.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_368": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logits_cumulative(self.quantiles, stop_gradient=True)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.matmul(F.softplus(matrix), logits)",
                            "Call"
                        ],
                        [
                            "logits + torch.tanh(factor) * torch.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "compressai/entropy_models/entropy_models_backup.py": {
        "torch": {
            "round_116": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ],
                        [
                            "inputs.type_as(means)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "cdf.new(indexes.size())",
                            "Call"
                        ],
                        [
                            "self._dequantize(outputs, means)",
                            "Call"
                        ],
                        [
                            "self._quantize(values, 'noise' if self.training else 'dequantize', self._medians())",
                            "Call"
                        ],
                        [
                            "outputs.reshape(shape)",
                            "Call"
                        ],
                        [
                            "outputs.permute(3, 0, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self._quantize(inputs, 'noise' if self.training else 'dequantize', means)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(pmf_length), max_length + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_268": {
                "variable": {
                    "value": "self._biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_269": {
                "variable": {
                    "value": "self._factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_270": {
                "variable": {
                    "value": "self._matrices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_291": {
                "variable": {
                    "value": "self.quantiles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(channels, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ceil_311": {
                "variable": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians - self.quantiles[:, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(minima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(minima, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_312": {
                "variable": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians - self.quantiles[:, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(minima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(minima, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_315": {
                "variable": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quantiles[:, 0, 2] - medians",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(maxima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(maxima, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_316": {
                "variable": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxima",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.quantiles[:, 0, 2] - medians",
                            "BinOp"
                        ],
                        [
                            "torch.ceil(maxima).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(maxima, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_324": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmf_length.max()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_333": {
                "variable": {
                    "value": "pmf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(sign * upper) - torch.sigmoid(sign * lower)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_347": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits - self.target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_347": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_380": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(sign * upper) - torch.sigmoid(sign * lower)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_416": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ceil_506": {
                "variable": {
                    "value": "pmf_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale_table * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_508": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pmf_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxima + minima + 1",
                            "BinOp"
                        ],
                        [
                            "2 * pmf_center + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_510": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(max_length).int() - pmf_center[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_539": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.entropy_coder.decode_with_indexes(s, indexes[i].reshape(-1).int().tolist(), cdf.tolist(), self._cdf_length.reshape(-1).int().tolist(), self._offset.reshape(-1).int().tolist())",
                            "Call"
                        ],
                        [
                            "x.reshape(x.size(0), 1, -1)",
                            "Call"
                        ],
                        [
                            "inputs - means",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.abs(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_139": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p[:pmf_length[i]], tail_mass[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[i].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_282": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_357": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logits_cumulative(self.quantiles, stop_gradient=True)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.matmul(F.softplus(matrix), logits)",
                            "Call"
                        ],
                        [
                            "logits + torch.tanh(factor) * torch.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_402": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ],
                        [
                            "inputs.type_as(means)",
                            "Call"
                        ],
                        [
                            "inputs.float()",
                            "Call"
                        ],
                        [
                            "cdf.new(indexes.size())",
                            "Call"
                        ],
                        [
                            "self._dequantize(outputs, means)",
                            "Call"
                        ],
                        [
                            "self._quantize(values, 'noise' if self.training else 'dequantize', self._medians())",
                            "Call"
                        ],
                        [
                            "outputs.reshape(shape)",
                            "Call"
                        ],
                        [
                            "outputs.permute(3, 0, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self._quantize(inputs, 'noise' if self.training else 'dequantize', means)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_482": {},
            "empty_like_106": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_287": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_291": {},
            "Tensor_296": {},
            "sign_332": {
                "input": {
                    "value": "lower + upper",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_337": {
                "input": {
                    "value": "lower[:, 0, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_338": {
                "input": {
                    "value": "-upper[:, 0, -1:]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_378": {
                "input": {
                    "value": "lower + upper",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erfc_489": {
                "input": {
                    "value": "const * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_280": {
                "data": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], filters[i])",
                            "Call"
                        ],
                        [
                            "self._matrices[i]",
                            "Subscript"
                        ],
                        [
                            "matrix.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_284": {
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], 1)",
                            "Call"
                        ],
                        [
                            "self._biases[i]",
                            "Subscript"
                        ],
                        [
                            "bias.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_334": {
                "input": {
                    "value": "sign * lower",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_357": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], filters[i])",
                            "Call"
                        ],
                        [
                            "self._matrices[i]",
                            "Subscript"
                        ],
                        [
                            "matrix.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_381": {
                "input": {
                    "value": "sign * lower",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_469": {},
            "arange_511": {
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmf_length.max()",
                            "Call"
                        ],
                        [
                            "torch.max(pmf_length).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_289": {
                "data": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(channels, filters[i + 1], 1)",
                            "Call"
                        ],
                        [
                            "self._factors[i]",
                            "Subscript"
                        ],
                        [
                            "factor.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_368": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logits_cumulative(self.quantiles, stop_gradient=True)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.matmul(F.softplus(matrix), logits)",
                            "Call"
                        ],
                        [
                            "logits + torch.tanh(factor) * torch.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "compressai/layers/gdn.py": {
        "torch": {
            "ones_46": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(in_channels)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam.init(beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma_init * torch.eye(in_channels)",
                            "BinOp"
                        ],
                        [
                            "self.gamma_reparam.init(gamma)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma_init * torch.eye(in_channels)",
                            "BinOp"
                        ],
                        [
                            "self.gamma_reparam.init(gamma)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(in_channels)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam.init(beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma_init * torch.eye(in_channels)",
                            "BinOp"
                        ],
                        [
                            "self.gamma_reparam.init(gamma)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.gamma_reparam(self.gamma)",
                            "Call"
                        ],
                        [
                            "gamma.reshape(C, C, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(in_channels)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam.init(beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ],
                        [
                            "self.beta_reparam(self.beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_64": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x ** 2, gamma, beta)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(norm)",
                            "Call"
                        ],
                        [
                            "torch.rsqrt(norm)",
                            "Call"
                        ],
                        [
                            "F.conv2d(torch.abs(x), gamma, beta)",
                            "Call"
                        ],
                        [
                            "1.0 / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_66": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x ** 2, gamma, beta)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(norm)",
                            "Call"
                        ],
                        [
                            "torch.rsqrt(norm)",
                            "Call"
                        ],
                        [
                            "F.conv2d(torch.abs(x), gamma, beta)",
                            "Call"
                        ],
                        [
                            "1.0 / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_51": {
                "n": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_90": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/layers/layers.py": {
        "torch": {
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch * r ** 2, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_76": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_135": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualUnit()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualUnit()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch * r ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_57": {
                "upscale_factor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_37": {
                "input": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(N, N // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_198": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_b(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_170": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/models/priors.py": {
        "torch": {
            "Sequential_119": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(3, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(M, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_187": {
                "input": {
                    "value": "torch.linspace(math.log(min), math.log(max), levels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(3, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(M, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "variable": {
                    "value": "self.h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_232": {
                "variable": {
                    "value": "self.h_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_325": {
                "variable": {
                    "value": "self.h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.h_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_402": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(3, N, kernel_size=5, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_412": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(M, N, kernel_size=5, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_422": {
                "variable": {
                    "value": "self.h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.h_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, M, stride=2, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_438": {
                "variable": {
                    "value": "self.entropy_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(M * 12 // 3, M * 10 // 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_506": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_565": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(z_hat.size(0), self.M, y_height + 2 * padding, y_width + 2 * padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z_hat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_187": {
                "start": {
                    "value": "math.log(min)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "math.log(max)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SCALES_LEVELS",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_226": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_234": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_236": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_247": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_291": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ],
                        [
                            "self.g_a(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_327": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_329": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_335": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_337": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_424": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_426": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_432": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_434": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_439": {
                "in_channels": {
                    "value": "M * 12 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_440": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_441": {
                "in_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_442": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_443": {
                "in_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 6 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_466": {
                "tensors": {
                    "value": "(params, ctx_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_533": {
                "variable": {
                    "value": "y_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_crop - means_hat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_602": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_602": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_529": {
                "tensors": {
                    "value": "(p, ctx_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_592": {
                "tensors": {
                    "value": "(p, ctx_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/models/utils.py": {
        "torch": {
            "Conv2d_105": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_113": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "stride - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_68": {
                "*size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[state_dict_key].size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.int",
                            "Method Argument"
                        ],
                        [
                            "torch.int",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "compressai/models/waseda.py": {
        "torch": {
            "Sequential_39": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualBlockWithStride(3, N, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.h_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualBlock(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.g_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualBlockWithStride(3, N, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.g_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "AttentionBlock(N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/ops/bound_ops.py": {
        "torch": {
            "max_25": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/ops/ops.py": {
        "torch": {
            "round_31": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/ops/parametrizers.py": {
        "torch": {
            "sqrt_39": {
                "input": {
                    "value": "torch.max(x + self.pedestal, self.pedestal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_39": {
                "input": {
                    "value": "x + self.pedestal",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/utils/bench/codecs.py": {
        "torch": {
            "from_numpy_61": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "b.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_68": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(a - b) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "compressai/utils/eval_model/__main__.py": {
        "torch": {
            "mse_loss_44": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_65": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "read_image(f).to(device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding_left, padding_right, padding_top, padding_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_79": {
                "variable": {
                    "value": "out_dec[x_hat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "out_dec['x_hat']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(-padding_left, -padding_right, -padding_top, -padding_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_104": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "compressai/utils/update_model/__main__.py": {
        "torch": {
            "load_51": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(args.filepath).resolve()",
                            "Call"
                        ],
                        [
                            "Path(f'{output_dir}/{filename}{ext}')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_129": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint['network']",
                            "Subscript"
                        ],
                        [
                            "checkpoint['state_dict']",
                            "Subscript"
                        ],
                        [
                            "checkpoint",
                            "variable"
                        ],
                        [
                            "load_checkpoint(filepath)",
                            "Call"
                        ],
                        [
                            "net.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(args.filepath).resolve()",
                            "Call"
                        ],
                        [
                            "Path(f'{output_dir}/{filename}{ext}')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "compressai/zoo/image.py": {
        "torch": {}
    },
    "examples/CompressAI Inference Demo.py": {
        "torch": {
            "mean_124": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out_net['x_hat'] - x).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argsort_406": {
                "variable": {
                    "value": "ordered_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(channel_bpps)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(a - b) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(a).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_247": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_247": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(b).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_248": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_248": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_387": {
                "input": {
                    "value": "y_likelihoods[0, c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_473": {
                "input": {
                    "value": "(x - x_hat_y_hat).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_478": {
                "input": {
                    "value": "(x - x_hat_y).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_364": {
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_164": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/CompressAI Models Comparison Demo.py": {
        "torch": {
            "mean_152": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(a - b) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_127": {
                "input": {
                    "value": "(out['x_hat'] - x).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_161": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/codec.py": {
        "torch": {
            "pad_124": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2torch(img)",
                            "Call"
                        ],
                        [
                            "pad(x, p)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding_left, padding_right, padding_top, padding_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_136": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2torch(img)",
                            "Call"
                        ],
                        [
                            "pad(x, p)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-padding_left, -padding_right, -padding_top, -padding_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_278": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/train.py": {
        "torch": {
            "DataLoader_262": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_268": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_280": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_281": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(3, N, kernel_size=9, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_73": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_244": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_82": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {}
    },
    "tests/test_datasets.py": {
        "torch": {}
    },
    "tests/test_entropy_models.py": {
        "torch": {
            "rand_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_54": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-32",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 3, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_95": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_107": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_148": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "script_170": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "entropy_bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EntropyBottleneck(128)",
                            "Call"
                        ],
                        [
                            "EntropyBottleneck(128)",
                            "Call"
                        ],
                        [
                            "EntropyBottleneck(128)",
                            "Call"
                        ],
                        [
                            "EntropyBottleneck(128)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_204": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_205": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_219": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_220": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_231": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_232": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_246": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_247": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_258": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_259": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "script_264": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "gaussian_conditional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GaussianConditional(None)",
                            "Call"
                        ],
                        [
                            "GaussianConditional(None)",
                            "Call"
                        ],
                        [
                            "GaussianConditional(None)",
                            "Call"
                        ],
                        [
                            "GaussianConditional(None)",
                            "Call"
                        ],
                        [
                            "GaussianConditional(None)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_167": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_172": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_175": {
                "input": {
                    "value": "y0[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y1[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "all_176": {
                "input": {
                    "value": "y1[1] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "manual_seed_261": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_266": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_269": {
                "input": {
                    "value": "y0[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y1[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "allclose_270": {
                "input": {
                    "value": "y0[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "y1[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_81": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_83": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_85": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_118": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_121": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_124": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_127": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_128": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_191": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_50": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_143": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_154": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_214": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_226": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_240": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.randint(-32, 32, (1, 3, 4, 4))",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 128, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_58": {
                "input": {
                    "value": "x - means",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_253": {
                "input": {
                    "value": "x - means",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_layers.py": {
        "torch": {
            "ones_like_39": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_53": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_67": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_81": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_104": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_123": {
                "input": {
                    "value": "y_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x * (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ],
                        [
                            "x / (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_136": {
                "input": {
                    "value": "y_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x * (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ],
                        [
                            "x / (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_149": {
                "input": {
                    "value": "y_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x * (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ],
                        [
                            "x / (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_162": {
                "input": {
                    "value": "y_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.sqrt(1 + 0.1 * x ** 2)",
                            "BinOp"
                        ],
                        [
                            "x * (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ],
                        [
                            "x / (1 + 0.1 * torch.abs(x))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_122": {
                "input": {
                    "value": "1 + 0.1 * x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_135": {
                "input": {
                    "value": "1 + 0.1 * x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_148": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_161": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 32, 16, 16, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_models.py": {
        "torch": {
            "rand_407": {
                "variable": {
                    "value": "state_dict[conv1.wweight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_385": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_386": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_65": {
                "input": {
                    "value": "model.original_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "model.conv.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_66": {
                "input": {
                    "value": "model.original_deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "model.deconv.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_55": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_181": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_43": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_183": {
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.rar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_ops.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_36": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "script_41": {
                "variable": {
                    "value": "scripted",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LowerBound(bound)",
                            "Call"
                        ],
                        [
                            "LowerBound(bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_46": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_70": {
                "input": {
                    "value": "x_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parametrizer.init(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sqrt(torch.max(x, x - x))",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "2 ** (-18)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_76": {
                "variable": {
                    "value": "minimum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_71": {
                "input": {
                    "value": "torch.max(x, x - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_82": {
                "input": {
                    "value": "x_reparam.min()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "minimum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_58": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_66": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_71": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(24, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(24, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_39": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(24, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(24, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(16)",
                            "Call"
                        ],
                        [
                            "torch.rand(16, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1, 8, 8, 8) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_78": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_scripting.py": {
        "torch": {
            "rand_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "script_28": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GDN(128)",
                            "Call"
                        ],
                        [
                            "GDN1(128)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "script_38": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GDN(128)",
                            "Call"
                        ],
                        [
                            "GDN1(128)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_31": {
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_41": {
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x)",
                            "Call"
                        ],
                        [
                            "g(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_47": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MaskedConv2d(3, 3, 3, padding=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_update_model.py": {
        "torch": {
            "save_61": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_80": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_98": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_117": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_72": {
                "f": {
                    "value": "files[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "files[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_129": {
                "obj": {
                    "value": "{k: net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmpdir.join('hello.txt')",
                            "Call"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ],
                        [
                            "tmpdir.join('model.pth.tar').strpath",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "udh/udh/QHtest.py": {
        "torch": {
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "model_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "inverse_94": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_56": {
                "variable": {
                    "value": "model_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(model_dir, 'checkpoints', '*.ckpt')",
                            "Call"
                        ],
                        [
                            "model_path_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "udh/udh/QHtrain.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpus) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SyntheticDataset(hmodel.hparams.train_path, rho=hmodel.hparams.rho, pic_size=hmodel.hparams.picsize, patch_size=hmodel.hparams.patchsize)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "hmodel.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "safe_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SyntheticDataset(hmodel.hparams.valid_path, rho=hmodel.hparams.rho, pic_size=hmodel.hparams.picsize, patch_size=hmodel.hparams.patchsize)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "hmodel.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "safe_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hmodel.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hmodel.hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_40": {
                "variable": {
                    "value": "model_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['vali_loss'] for x in vali_total_loss]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_119": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "udh/udh/dataset.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_10": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_10": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_11": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_11": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_11": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_47": {
                "variable": {
                    "value": "img_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(self.fnames[index])",
                            "Call"
                        ],
                        [
                            "self.transforms(img_a)",
                            "Call"
                        ],
                        [
                            "torch.mean(img_a, dim=0, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_56": {
                "variable": {
                    "value": "img_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(b_path)",
                            "Call"
                        ],
                        [
                            "self.transforms(img_b)",
                            "Call"
                        ],
                        [
                            "torch.mean(img_b, dim=0, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[x, y], [x + self.patch_size, y], [x + self.patch_size, y + self.patch_size], [x, y + self.patch_size]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_like_75": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[x, y], [x + self.patch_size, y], [x + self.patch_size, y + self.patch_size], [x, y + self.patch_size]])",
                            "Call"
                        ]
                    ]
                },
                "low": {
                    "value": "-self.rho",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "udh/udh/dataset_test.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_12": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_12": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_13": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_13": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_49": {
                "variable": {
                    "value": "img_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(self.fnames[index])",
                            "Call"
                        ],
                        [
                            "self.transforms(img_a)",
                            "Call"
                        ],
                        [
                            "torch.mean(img_a, dim=0, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_58": {
                "variable": {
                    "value": "img_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(b_path)",
                            "Call"
                        ],
                        [
                            "self.transforms(img_b)",
                            "Call"
                        ],
                        [
                            "torch.mean(img_b, dim=0, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[x, y], [x + self.patch_size, y], [x + self.patch_size, y + self.patch_size], [x, y + self.patch_size]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_like_76": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[x, y], [x + self.patch_size, y], [x + self.patch_size, y + self.patch_size], [x, y + self.patch_size]])",
                            "Call"
                        ]
                    ]
                },
                "low": {
                    "value": "-self.rho",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "udh/udh/model.py": {
        "torch": {
            "inverse_28": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_45": {
                "input": {
                    "value": "patch_b_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.warp_perspective(img_a, h_inv, (patch_b.shape[-2], patch_b.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "patch_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(2, 64, batch_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_109": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "128 * (patch_size // 8) * (patch_size // 8)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "udh/udh/test.py": {
        "torch": {
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_53": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "udh/udh/test2.py": {
        "torch": {
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "model_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(model_dir, 'checkpoints', '*.ckpt')",
                            "Call"
                        ],
                        [
                            "model_path_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "inverse_82": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "udh/udh/test3.py": {
        "torch": {
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_90": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_52": {
                "variable": {
                    "value": "model_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(model_dir, 'checkpoints', '*.ckpt')",
                            "Call"
                        ],
                        [
                            "model_path_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "udh/udh/test3_f1.py": {
        "torch": {
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_90": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_104": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "model_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(model_dir, 'checkpoints', '*.ckpt')",
                            "Call"
                        ],
                        [
                            "model_path_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "udh/udh/test3_time.py": {
        "torch": {
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_114": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "model_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(model_dir, 'checkpoints', '*.ckpt')",
                            "Call"
                        ],
                        [
                            "model_path_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "synchronize_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "udh/udh/testywz.py": {
        "torch": {
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_96": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_55": {
                "variable": {
                    "value": "model_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "udh/udh/train.py": {
        "torch": {
            "stack_37": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_42": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SyntheticDataset(self.hparams.train_path, rho=self.hparams.rho, pic_size=self.hparams.picsize, patch_size=self.hparams.patchsize)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "safe_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SyntheticDataset(self.hparams.valid_path, rho=self.hparams.rho, pic_size=self.hparams.picsize, patch_size=self.hparams.patchsize)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "safe_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_72": {
                "variable": {
                    "value": "model_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "ywz/DSIC/mynet6.py": {
        "torch": {
            "MSELoss_117": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.global_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, F * C, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "temp3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_net(y1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3, self.F0, self.C, temp_y1.size()[-2], temp_y1.size()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.model1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(2 * self.N, self.N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_205": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "self.model2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels=self.F0, out_channels=self.F0, kernel_size=5, stride=1, padding=5 // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "self.model3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(self.F0 * self.C + self.N, self.N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "self.h_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_238": {
                "variable": {
                    "value": "self.d_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(cost.size()[-3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, d.size()[-3], d.size()[-2], d.size()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "self.d_up_3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.F0, self.C, self.d_up.size()[-2], self.d_up.size()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "variable": {
                    "value": "self.d_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d_out_3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.F0 * self.C, self.d_out_3d.size()[-2], self.d_out_3d.size()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "self.all_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.h_out, self.d_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.all_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_257": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.encode_hyper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_300": {
                "variable": {
                    "value": "self.y_abs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[X.size()[0], X.size()[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_329": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_353": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_375": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(z1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_376": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_377": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_389": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_403": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_415": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_430": {
                "variable": {
                    "value": "self.cat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up_z2, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_437": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(self.cat_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_438": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_439": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GroupNorm_163": {
                "num_channels": {
                    "value": "F * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_167": {
                "num_channels": {
                    "value": "F * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_171": {
                "num_channels": {
                    "value": "F * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_197": {
                "num_channels": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_201": {
                "num_channels": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_209": {
                "in_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_210": {
                "num_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_213": {
                "in_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_214": {
                "num_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_221": {
                "num_channels": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_225": {
                "num_channels": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_634": {
                "tensors": {
                    "value": "(y1_warp_1, pic2_g_a_g1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_641": {
                "tensors": {
                    "value": "(y1_warp_2, pic2_g_a_g2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_648": {
                "tensors": {
                    "value": "(y1_warp_3, pic2_g_a_g3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_669": {
                "tensors": {
                    "value": "(y1_warp_4, pic2_g_s_g1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_676": {
                "tensors": {
                    "value": "(y1_warp_5, pic2_g_s_g2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_683": {
                "tensors": {
                    "value": "(y1_warp_6, pic2_g_s_g3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_127": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/DSIC/mynet6_plus.py": {
        "torch": {
            "MSELoss_181": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "variable": {
                    "value": "self.global_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, F * C, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_244": {
                "variable": {
                    "value": "temp3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_net(y1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3, self.F0, self.C, temp_y1.size()[-2], temp_y1.size()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "variable": {
                    "value": "self.model1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(2 * self.N, self.N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_269": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "variable": {
                    "value": "self.model2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels=self.F0, out_channels=self.F0, kernel_size=5, stride=1, padding=5 // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_283": {
                "variable": {
                    "value": "self.model3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(self.F0 * self.C + self.N, self.N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "self.h_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_302": {
                "variable": {
                    "value": "self.d_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(cost.size()[-3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, d.size()[-3], d.size()[-2], d.size()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "self.d_up_3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.F0, self.C, self.d_up.size()[-2], self.d_up.size()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "variable": {
                    "value": "self.d_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d_out_3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.F0 * self.C, self.d_out_3d.size()[-2], self.d_out_3d.size()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "self.all_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.h_out, self.d_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_311": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.all_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_321": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_352": {
                "variable": {
                    "value": "self.encode_hyper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_364": {
                "variable": {
                    "value": "self.y_abs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[X.size()[0], X.size()[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_393": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_404": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_417": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_439": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(z1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_440": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_441": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_453": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_456": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_467": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_479": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "self.cat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up_z2, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_501": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(self.cat_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_502": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_503": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_781": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_1242": {
                "variable": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1306": {
                "variable": {
                    "value": "y2_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "synchronize_800": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_975": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1042": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1187": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1251": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GroupNorm_227": {
                "num_channels": {
                    "value": "F * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ],
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_231": {
                "num_channels": {
                    "value": "F * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ],
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_235": {
                "num_channels": {
                    "value": "F * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ],
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_261": {
                "num_channels": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_265": {
                "num_channels": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_273": {
                "in_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_274": {
                "num_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_277": {
                "in_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_278": {
                "num_channels": {
                    "value": "self.F0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_285": {
                "num_channels": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_289": {
                "num_channels": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_698": {
                "tensors": {
                    "value": "(y1_warp_1, pic2_g_a_g1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_705": {
                "tensors": {
                    "value": "(y1_warp_2, pic2_g_a_g2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_712": {
                "tensors": {
                    "value": "(y1_warp_3, pic2_g_a_g3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_733": {
                "tensors": {
                    "value": "(y1_warp_4, pic2_g_s_g1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_740": {
                "tensors": {
                    "value": "(y1_warp_5, pic2_g_s_g2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_747": {
                "tensors": {
                    "value": "(y1_warp_6, pic2_g_s_g3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_like_771": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "erfc_797": {
                "input": {
                    "value": "const * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_830": {
                "tensors": {
                    "value": "(y1_warp_1, pic2_g_a_g1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_837": {
                "tensors": {
                    "value": "(y1_warp_2, pic2_g_a_g2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_844": {
                "tensors": {
                    "value": "(y1_warp_3, pic2_g_a_g3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1318": {
                "tensors": {
                    "value": "(y1_warp_4, pic2_g_s_g1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1325": {
                "tensors": {
                    "value": "(y1_warp_5, pic2_g_s_g2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1332": {
                "tensors": {
                    "value": "(y1_warp_6, pic2_g_s_g3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_191": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/DSIC/mypriors.py": {
        "torch": {
            "exp_109": {
                "input": {
                    "value": "torch.linspace(math.log(min), math.log(max), levels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.h_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.h_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_109": {
                "start": {
                    "value": "math.log(min)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "math.log(max)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SCALES_LEVELS",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_172": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ywz/DSIC/mytrain2.py": {
        "torch": {
            "DataLoader_263": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_296": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_297": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_45": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': net.state_dict(), 'loss': 'none', 'optimizer': optimizer.state_dict(), 'aux_optimizer': aux_optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_287": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_238": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_279": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_331": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': net.state_dict(), 'loss': 'none', 'optimizer': optimizer.state_dict(), 'aux_optimizer': aux_optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ywz/DSIC/mytrain2_test.py": {
        "torch": {
            "DataLoader_292": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_298": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_326": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_327": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_43": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_183": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_317": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_267": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_309": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_56": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_57": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_58": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_59": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_53": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/DSIC/mytrain2_test_codec.py": {
        "torch": {
            "DataLoader_340": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_346": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_376": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_377": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_229": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_364": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_313": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_356": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/DSIC/mytrain2_test_save.py": {
        "torch": {
            "DataLoader_358": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_364": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_391": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_392": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_60": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_382": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_331": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_374": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_73": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_74": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_75": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_76": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_70": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/.trash/newnet9.py": {
        "torch": {
            "MSELoss_113": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_another_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.encode_hyper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_332": {
                "variable": {
                    "value": "self.y_abs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_343": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[X.size()[0], X.size()[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_372": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_385": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_407": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(z1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_408": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_409": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_421": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_424": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_435": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_447": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "self.cat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up_z2, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_469": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(self.cat_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_470": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_471": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "inverse_677": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_540": {
                "tensors": {
                    "value": "(x1_warp, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_583": {
                "tensors": {
                    "value": "(self.after1, x1_hat_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/codec-test/newnet1.py": {
        "torch": {
            "MSELoss_114": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_another_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_423": {
                "variable": {
                    "value": "self.encode_hyper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_435": {
                "variable": {
                    "value": "self.y_abs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[X.size()[0], X.size()[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_464": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_475": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_488": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_510": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(z1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_511": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_512": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_524": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_527": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_538": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_550": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_565": {
                "variable": {
                    "value": "self.cat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up_z2, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_572": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(self.cat_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_573": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_574": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_796": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_1106": {
                "variable": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1107": {
                "variable": {
                    "value": "y2_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "inverse_1268": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_911": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_979": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1112": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1177": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_535": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_544": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_552": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_557": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_643": {
                "tensors": {
                    "value": "(x1_warp, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_686": {
                "tensors": {
                    "value": "(self.after1, x1_hat_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_like_786": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "erfc_812": {
                "input": {
                    "value": "const * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_124": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/codec-test/newnet1_joint.py": {
        "torch": {
            "MSELoss_121": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_another_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_303": {
                "variable": {
                    "value": "self.encode_hyper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_315": {
                "variable": {
                    "value": "self.y_abs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[X.size()[0], X.size()[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_390": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(z1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_391": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_392": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_404": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_407": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_418": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "self.cat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up_z2, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_452": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(self.cat_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_453": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_583": {
                "input": {
                    "value": "torch.linspace(math.log(min), math.log(max), levels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_611": {
                "variable": {
                    "value": "self.h_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_619": {
                "variable": {
                    "value": "self.h_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, M, stride=2, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_627": {
                "variable": {
                    "value": "self.entropy_parameters1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(M * 12 // 3, M * 10 // 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_643": {
                "variable": {
                    "value": "self.h_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_651": {
                "variable": {
                    "value": "self.h_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, M, stride=2, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_659": {
                "variable": {
                    "value": "self.entropy_parameters2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(M * 18 // 3, M * 10 // 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_769": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_894": {
                "variable": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gaussian_conditional1._quantize(y1, 'noise' if self.training else 'dequantize')",
                            "Call"
                        ],
                        [
                            "self._quantize(y1, 'dequantize', means=None)",
                            "Call"
                        ],
                        [
                            "F.pad(y1_hat, (padding, padding, padding, padding))",
                            "Call"
                        ],
                        [
                            "np.zeros([1] + [self.M] + [y_shape[0] + 2 * padding, y_shape[1] + 2 * padding])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(y1_hat).to(device)",
                            "Call"
                        ],
                        [
                            "y1_hat[:, :, padding:-padding, padding:-padding]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_895": {
                "variable": {
                    "value": "y2_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y2_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gaussian_conditional2._quantize(y2, 'noise' if self.training else 'dequantize')",
                            "Call"
                        ],
                        [
                            "self.gaussian_conditional2._quantize(y2, 'noise' if self.training else 'dequantize')",
                            "Call"
                        ],
                        [
                            "F.pad(y2_hat, (padding, padding, padding, padding))",
                            "Call"
                        ],
                        [
                            "np.zeros([1] + [self.M] + [y_shape[0] + 2 * padding, y_shape[1] + 2 * padding])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(y2_hat).to(device)",
                            "Call"
                        ],
                        [
                            "y2_hat[:, :, padding:-padding, padding:-padding]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_1127": {
                "variable": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1128": {
                "variable": {
                    "value": "y2_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_1210": {
                "variable": {
                    "value": "y1_hat_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gaussian_conditional1._quantize(y1, 'noise' if self.training else 'dequantize')",
                            "Call"
                        ],
                        [
                            "self._quantize(y1, 'dequantize', means=None)",
                            "Call"
                        ],
                        [
                            "F.pad(y1_hat, (padding, padding, padding, padding))",
                            "Call"
                        ],
                        [
                            "np.zeros([1] + [self.M] + [y_shape[0] + 2 * padding, y_shape[1] + 2 * padding])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(y1_hat).to(device)",
                            "Call"
                        ],
                        [
                            "y1_hat[:, :, padding:-padding, padding:-padding]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "inverse_1321": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_583": {
                "start": {
                    "value": "math.log(min)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "math.log(max)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SCALES_LEVELS",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_424": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_523": {
                "tensors": {
                    "value": "(x1_warp, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_566": {
                "tensors": {
                    "value": "(self.after1, x1_hat_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_613": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_615": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_621": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_623": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_628": {
                "in_channels": {
                    "value": "M * 12 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_629": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_630": {
                "in_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_631": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_632": {
                "in_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 6 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_645": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_647": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_653": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_655": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_660": {
                "in_channels": {
                    "value": "M * 18 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_661": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_662": {
                "in_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_663": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_664": {
                "in_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 6 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_688": {
                "tensors": {
                    "value": "(params1, ctx_params1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_718": {
                "tensors": {
                    "value": "(params2, ctx_params2, ctx_params1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_759": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "erfc_785": {
                "input": {
                    "value": "const * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_909": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_996": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1148": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1231": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_131": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_905": {
                "tensors": {
                    "value": "(p1, ctx_p1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_992": {
                "tensors": {
                    "value": "(p2, ctx_p2, ctx_p1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1144": {
                "tensors": {
                    "value": "(p1, ctx_p1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1227": {
                "tensors": {
                    "value": "(p2, ctx_p2, ctx_p1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/codec-test/test2_codec.py": {
        "torch": {
            "DataLoader_382": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_388": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_433": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_434": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_70": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_272": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_412": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_355": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_399": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_206": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_207": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_208": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_209": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_203": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/model.py": {
        "torch": {
            "inverse_28": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_45": {
                "input": {
                    "value": "patch_b_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.warp_perspective(img_a, h_inv, (patch_b.shape[-2], patch_b.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "patch_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(2, 64, batch_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_109": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(corners, corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "128 * (patch_size // 8) * (patch_size // 8)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/newnet1.py": {
        "torch": {
            "MSELoss_114": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_another_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_423": {
                "variable": {
                    "value": "self.encode_hyper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_435": {
                "variable": {
                    "value": "self.y_abs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[X.size()[0], X.size()[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_464": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_475": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_488": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_510": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(z1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_511": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_512": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_524": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_527": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_538": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_550": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_565": {
                "variable": {
                    "value": "self.cat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up_z2, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_572": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(self.cat_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_573": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_574": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_804": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_1120": {
                "variable": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1121": {
                "variable": {
                    "value": "y2_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "inverse_1290": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_925": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_993": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1126": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1199": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_535": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_544": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_552": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_557": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_643": {
                "tensors": {
                    "value": "(x1_warp, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_686": {
                "tensors": {
                    "value": "(self.after1, x1_hat_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_like_794": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "erfc_820": {
                "input": {
                    "value": "const * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_124": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/newnet1_joint.py": {
        "torch": {
            "MSELoss_121": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_another_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_303": {
                "variable": {
                    "value": "self.encode_hyper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_315": {
                "variable": {
                    "value": "self.y_abs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[X.size()[0], X.size()[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_channels=N, out_channels=N, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_390": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(z1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_391": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_392": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_404": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_407": {
                "variable": {
                    "value": "self.gmm_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_418": {
                "variable": {
                    "value": "self.gmm_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.gmm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels=N + M, out_channels=N, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "self.cat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up_z2, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_452": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gmm_weights(self.cat_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.K, self.M, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_453": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.gmm_weights(z1), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.gmm_weights(self.cat_in), (-1, self.K, self.M, 1, 1))",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(temp, dim=-4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.M * self.K, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_583": {
                "input": {
                    "value": "torch.linspace(math.log(min), math.log(max), levels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_611": {
                "variable": {
                    "value": "self.h_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_619": {
                "variable": {
                    "value": "self.h_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, M, stride=2, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_627": {
                "variable": {
                    "value": "self.entropy_parameters1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(M * 12 // 3, M * 10 // 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_643": {
                "variable": {
                    "value": "self.h_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(M, N, stride=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_651": {
                "variable": {
                    "value": "self.h_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(N, M, stride=2, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_659": {
                "variable": {
                    "value": "self.entropy_parameters2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(5 * M, M * 10 // 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_774": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.clone()",
                            "Call"
                        ],
                        [
                            "outputs + means",
                            "BinOp"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_899": {
                "variable": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gaussian_conditional1._quantize(y1, 'noise' if self.training else 'dequantize')",
                            "Call"
                        ],
                        [
                            "self._quantize(y1, 'dequantize', means=None)",
                            "Call"
                        ],
                        [
                            "F.pad(y1_hat, (padding, padding, padding, padding))",
                            "Call"
                        ],
                        [
                            "np.zeros([1] + [self.M] + [y_shape[0] + 2 * padding, y_shape[1] + 2 * padding])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(y1_hat).to(device)",
                            "Call"
                        ],
                        [
                            "y1_hat[:, :, padding:-padding, padding:-padding]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_900": {
                "variable": {
                    "value": "y2_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y2_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gaussian_conditional2._quantize(y2, 'noise' if self.training else 'dequantize')",
                            "Call"
                        ],
                        [
                            "self.gaussian_conditional2._quantize(y2, 'noise' if self.training else 'dequantize')",
                            "Call"
                        ],
                        [
                            "F.pad(y2_hat, (padding, padding, padding, padding))",
                            "Call"
                        ],
                        [
                            "np.zeros([1] + [self.M] + [y_shape[0] + 2 * padding, y_shape[1] + 2 * padding])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(y2_hat).to(device)",
                            "Call"
                        ],
                        [
                            "y2_hat[:, :, padding:-padding, padding:-padding]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_1137": {
                "variable": {
                    "value": "y1_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1138": {
                "variable": {
                    "value": "y2_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "inverse_1336": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_583": {
                "start": {
                    "value": "math.log(min)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "math.log(max)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SCALES_LEVELS",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_424": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_523": {
                "tensors": {
                    "value": "(x1_warp, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_566": {
                "tensors": {
                    "value": "(self.after1, x1_hat_warp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_613": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_615": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_621": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_623": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_628": {
                "in_channels": {
                    "value": "M * 12 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_629": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_630": {
                "in_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_631": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_632": {
                "in_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 6 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_645": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_647": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_653": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_655": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_660": {
                "in_channels": {
                    "value": "5 * M",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_661": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_662": {
                "in_channels": {
                    "value": "M * 10 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_663": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_664": {
                "in_channels": {
                    "value": "M * 8 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "M * 6 // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_688": {
                "tensors": {
                    "value": "(params1, ctx_params1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_723": {
                "tensors": {
                    "value": "(params2, ctx_params2, y1_hat_warpf2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_764": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "erfc_790": {
                "input": {
                    "value": "const * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_914": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1006": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1158": {
                "variable": {
                    "value": "samples1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1247": {
                "variable": {
                    "value": "samples2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_131": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_910": {
                "tensors": {
                    "value": "(p1, ctx_p1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1002": {
                "tensors": {
                    "value": "(p2, ctx_p2, y1_hat_warpf2[0:1, :, h_idx:h_idx + 1, w_idx:w_idx + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1154": {
                "tensors": {
                    "value": "(p1, ctx_p1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1243": {
                "tensors": {
                    "value": "(p2, ctx_p2, y1_hat_warpf2[0:1, :, h_idx:h_idx + 1, w_idx:w_idx + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/newtrain1.py": {
        "torch": {
            "DataLoader_259": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_265": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_294": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_295": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_41": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_285": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_234": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_275": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/newtrain1_joint.py": {
        "torch": {
            "DataLoader_273": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, root_add=args.dataset_add, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_279": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, root_add=args.dataset_add, split='test', patch_size=args.test_patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_308": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_309": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_41": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_299": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_246": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_289": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/newtrain1_joint_real.py": {
        "torch": {
            "DataLoader_341": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, root_add=args.dataset_add, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_347": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, root_add=args.dataset_add, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_389": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_390": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_69": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_126": {
                "variable": {
                    "value": "h_matrix0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_217": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_370": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "homo_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_379": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_190": {
                "variable": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_314": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_357": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/newtrain1_real.py": {
        "torch": {
            "DataLoader_340": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, root_add=args.dataset_add, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_346": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, root_add=args.dataset_add, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_388": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_389": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_68": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_125": {
                "variable": {
                    "value": "h_matrix0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_216": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_369": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "homo_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_378": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_189": {
                "variable": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_313": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_356": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_78": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/newtrain6_joint_real.py": {
        "torch": {
            "DataLoader_382": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_388": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_441": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_442": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_70": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_148": {
                "variable": {
                    "value": "h_matrix0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_272": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'second_checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_411": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "homo_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_420": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_430": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "second_checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_224": {
                "variable": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_357": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_398": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_102": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_103": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_104": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_105": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_99": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/newtrain6_real.py": {
        "torch": {
            "DataLoader_382": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_388": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_441": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_442": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_70": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_148": {
                "variable": {
                    "value": "h_matrix0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_272": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'second_checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_411": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "homo_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_420": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_430": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "second_checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_224": {
                "variable": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ],
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_357": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_398": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_102": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_103": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_104": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_105": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_99": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/test2.py": {
        "torch": {
            "DataLoader_305": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_311": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_339": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_340": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_53": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_330": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_280": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_321": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_68": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_69": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/test2_joint.py": {
        "torch": {
            "DataLoader_305": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_311": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_339": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_340": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_53": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_330": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_280": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_321": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_68": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_69": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/test3.py": {
        "torch": {
            "DataLoader_270": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_276": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_320": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_321": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_54": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'second_checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_300": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_310": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "second_checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_245": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_286": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/test3_joint_real.py": {
        "torch": {
            "DataLoader_328": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_334": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_79": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'second_checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_361": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "homo_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_371": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_381": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "second_checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_172": {
                "variable": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_303": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_344": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_112": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_113": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_114": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_108": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/test3_real.py": {
        "torch": {
            "DataLoader_328": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_334": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_79": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'second_checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_361": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "homo_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_371": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_381": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "second_checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_172": {
                "variable": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_303": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_344": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_112": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_113": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_114": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_108": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/test3_save.py": {
        "torch": {
            "DataLoader_326": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_332": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_374": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_375": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.aux_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.aux_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_69": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'second_checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_354": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_364": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "second_checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_299": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_342": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_83": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_84": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_85": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_86": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/test3_savereal.py": {
        "torch": {
            "DataLoader_373": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_379": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms, need_file_name=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_97": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'second_checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_406": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "homo_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_416": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_426": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "second_checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_190": {
                "variable": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_346": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_389": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_112": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_113": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_114": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ywz/mywork/test3real.py": {
        "torch": {
            "DataLoader_337": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='train', patch_size=args.patch_size, transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_343": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.dataset, split='test', patch_size=args.patch_size, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_87": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_228": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'second_checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_370": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "homo_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_380": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_390": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "second_checkpoint_best_loss.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_180": {
                "variable": {
                    "value": "h_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kornia.get_perspective_transform(homo_corners, homo_corners_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_312": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_353": {
                "device": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_119": {
                "input": {
                    "value": "output['likelihoods']['y1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_120": {
                "input": {
                    "value": "output['likelihoods']['z1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_121": {
                "input": {
                    "value": "output['likelihoods']['y2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_122": {
                "input": {
                    "value": "output['likelihoods']['z2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_116": {
                "input": {
                    "value": "likelihoods",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}