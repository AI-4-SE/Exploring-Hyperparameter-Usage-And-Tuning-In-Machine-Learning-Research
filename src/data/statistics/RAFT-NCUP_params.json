{
    "core/corr.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_pyramid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fmap1.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "fmap2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fmap2.view(batch, dim, ht * wd)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_20": {
                "variable": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CorrBlock.corr(fmap1, fmap2)",
                            "Call"
                        ],
                        [
                            "corr.reshape(batch * h1 * w1, dim, h2, w2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(corr, 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.corr_pyramid[i]",
                            "Subscript"
                        ],
                        [
                            "bilinear_sampler(corr, coords_lvl)",
                            "Call"
                        ],
                        [
                            "corr.view(batch, h1, w1, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(fmap1.transpose(1, 2), fmap2)",
                            "Call"
                        ],
                        [
                            "corr.view(batch, ht, wd, 1, ht, wd)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_31": {
                "variable": {
                    "value": "dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-r",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.radius",
                            "Attribute"
                        ]
                    ]
                },
                "steps": {
                    "value": "2 * r + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_32": {
                "variable": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-r",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.radius",
                            "Attribute"
                        ]
                    ]
                },
                "steps": {
                    "value": "2 * r + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(dy, dx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_55": {
                "input": {
                    "value": "torch.tensor(dim).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "meshgrid_33": {
                "*tensors": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(-r, r, 2 * r + 1)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "dx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(-r, r, 2 * r + 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/datasets.py": {
        "torch": {
            "DataLoader_240": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FlyingChairs(aug_params, split='training')",
                            "Call"
                        ],
                        [
                            "clean_dataset + final_dataset",
                            "BinOp"
                        ],
                        [
                            "100 * sintel_clean + 100 * sintel_final + 200 * kitti + 5 * hd1k + things",
                            "BinOp"
                        ],
                        [
                            "KITTI(aug_params, split='training')",
                            "Call"
                        ],
                        [
                            "100 * sintel_clean + 100 * sintel_final + things",
                            "BinOp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.image_list[index][0])",
                            "Call"
                        ],
                        [
                            "np.array(img1).astype(np.uint8)[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img1).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "frame_utils.read_gen(self.image_list[index][0])",
                            "Call"
                        ],
                        [
                            "np.array(img1).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.tile(img1[..., None], (1, 1, 3))",
                            "Call"
                        ],
                        [
                            "img1[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img1).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_81": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.image_list[index][1])",
                            "Call"
                        ],
                        [
                            "np.array(img2).astype(np.uint8)[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img2).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "frame_utils.read_gen(self.image_list[index][1])",
                            "Call"
                        ],
                        [
                            "np.array(img2).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.tile(img2[..., None], (1, 1, 3))",
                            "Call"
                        ],
                        [
                            "img2[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img2).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_82": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.flow_list[index])",
                            "Call"
                        ],
                        [
                            "np.array(flow).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(flow).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_83": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.image_list[index][0])",
                            "Call"
                        ],
                        [
                            "np.array(img1).astype(np.uint8)[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img1).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "frame_utils.read_gen(self.image_list[index][0])",
                            "Call"
                        ],
                        [
                            "np.array(img1).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.tile(img1[..., None], (1, 1, 3))",
                            "Call"
                        ],
                        [
                            "img1[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img1).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_41": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.image_list[index][1])",
                            "Call"
                        ],
                        [
                            "np.array(img2).astype(np.uint8)[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img2).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "frame_utils.read_gen(self.image_list[index][1])",
                            "Call"
                        ],
                        [
                            "np.array(img2).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.tile(img2[..., None], (1, 1, 3))",
                            "Call"
                        ],
                        [
                            "img2[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img2).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_42": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.from_numpy(valid)",
                            "Call"
                        ],
                        [
                            "(flow[0].abs() < 1000) & (flow[1].abs() < 1000)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "worker_info.id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "core/extractor.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_17": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GroupNorm_18": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GroupNorm_72": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_73": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_74": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GroupNorm_124": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_148": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_165": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_190": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[batch_dim, batch_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_201": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_222": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_241": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_265": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[batch_dim, batch_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_20": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GroupNorm_76": {
                "variable": {
                    "value": "self.norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_204": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_29": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_30": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "self.norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_86": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_87": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_88": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_130": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_207": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_32": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_90": {
                "variable": {
                    "value": "self.norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/interp_weights_est.py": {
        "torch": {
            "rand_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 2, 100, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_ch[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_sz[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_pair(int(filter_sz[i] // 2 + (filter_sz[i] - 1) * (dilation[i] - 1) / 2))",
                            "Call"
                        ],
                        [
                            "_pair(int(filter_sz[-1] // 2 + (filter_sz[-1] - 1) * (dilation[-1] - 1) / 2))",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[(1, 1)] * len(num_ch)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[inconv(num_ch[0], num_ch[1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[up(in_ch1=num_ch[-i - 1], in_ch2=num_ch[-i - 2], out_ch=num_ch[-i - 2], bilinear=False) for i in range(self.num_downsampling)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.mpconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_146": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.final_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_133": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_135": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "nn.Conv2d(num_ch[i], num_ch[i + 1], filter_sz[i], padding=padding, dilation=dilation[i], stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "*args": {
                    "value": "nn.Conv2d(num_ch[i], num_ch[i + 1], filter_sz[i], padding=padding, dilation=dilation[i], stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "num_ch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_sz[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_pair(int(filter_sz[i] // 2 + (filter_sz[i] - 1) * (dilation[i] - 1) / 2))",
                            "Call"
                        ],
                        [
                            "_pair(int(filter_sz[-1] // 2 + (filter_sz[-1] - 1) * (dilation[-1] - 1) / 2))",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[(1, 1)] * len(num_ch)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "num_ch[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "num_ch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_sz[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_pair(int(filter_sz[i] // 2 + (filter_sz[i] - 1) * (dilation[i] - 1) / 2))",
                            "Call"
                        ],
                        [
                            "_pair(int(filter_sz[-1] // 2 + (filter_sz[-1] - 1) * (dilation[-1] - 1) / 2))",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[(1, 1)] * len(num_ch)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "core/nconv_modules.py": {
        "torch": {
            "rand_299": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 100, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_300": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 100, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(self.nconv_in, self.nconv_x2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[NConv2d(in_channels=2 * in_ch * channels_multiplier, out_channels=in_ch * channels_multiplier, kernel_size=decoder_filter_sz, stride=(1, 1), pos_fn=pos_fn, groups=groups, bias=use_bias) for _ in range(self.num_downsampling)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_pool2d_96": {
                "variable": {
                    "value": "(conf_ds, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inpt[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ds_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "ds_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_169": {
                "variable": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inpt[1]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_171": {
                "variable": {
                    "value": "nomin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data * conf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_259": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.view(p_sz[0], p_sz[1], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(p, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.nconv_x2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "NConv2d(in_channels=in_ch * channels_multiplier, out_channels=in_ch * channels_multiplier, kernel_size=encoder_filter_sz, stride=(1, 1), pos_fn=pos_fn, groups=groups, bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.nconv_x2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "NConv2d(in_channels=in_ch * channels_multiplier, out_channels=in_ch * channels_multiplier, kernel_size=encoder_filter_sz, stride=(1, 1), pos_fn=pos_fn, groups=groups, bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_189": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "k.view(k_sz[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_101": {
                "variable": {
                    "value": "data_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inpt[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ds_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "ds_factor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_129": {
                "variable": {
                    "value": "x_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[i + nds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "c[nds - i].shape[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[None] * (self.num_downsampling * 2 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_130": {
                "variable": {
                    "value": "c_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c[i + nds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "c[nds - i].shape[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[None] * (self.num_downsampling * 2 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_236": {
                "data": {
                    "value": "_pos(weight, pos_fn).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_248": {
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_262": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.view(p_sz[0], p_sz[1], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(p, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "self.nconv_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_264": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.view(p_sz[0], p_sz[1], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(p, -1)",
                            "Call"
                        ]
                    ]
                },
                "beta": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_266": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.view(p_sz[0], p_sz[1], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(p, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "(c_up, c[nds - i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "core/pac_modules.py": {
        "torch": {
            "conv_transpose2d_72": {
                "variable": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input_nd, w_one, stride=stride)",
                            "Call"
                        ],
                        [
                            "F.pad(input_nd, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_one",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_nd.new_ones(1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_73": {
                "variable": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input_nd, w_one, stride=stride)",
                            "Call"
                        ],
                        [
                            "F.pad(input_nd, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input_nd, w_one, stride=stride)",
                            "Call"
                        ],
                        [
                            "F.pad(input_nd, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kernel_size,) * n_dims if isinstance(kernel_size, Number) else kernel_size",
                            "IfExp"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "tuple(weight.shape[-2:])",
                            "Call"
                        ],
                        [
                            "tuple(weight.shape[-2:])",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(dilation,) * n_dims if isinstance(dilation, Number) else dilation",
                            "IfExp"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(padding,) * n_dims if isinstance(padding, Number) else padding",
                            "IfExp"
                        ],
                        [
                            "_pair(0)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "tuple(((k - 1) * d // 2 for (k, d) in zip(kernel_size, dilation)))",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unfold_100": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_107": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * diff_sq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unfold_118": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fold_128": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_diff.view(bs, ch * ctx.kernel_size[0] * ctx.kernel_size[1], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(in_h, in_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_151": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_224": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_226": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_228": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unfold_303": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_306": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn->ijmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(output,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(mask, dtype=input.dtype, device=input.device)",
                            "Call"
                        ],
                        [
                            "nd2col(mask, kernel_size, stride=stride, padding=padding, output_padding=output_padding, dilation=dilation, transposed=transposed)",
                            "Call"
                        ],
                        [
                            "mask_pattern",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_463": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_465": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_157": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,zykl->ijmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_159": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,ojkl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_181": {
                "variable": {
                    "value": "in_cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fold_187": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_im2col_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_in_mul_k * kernel",
                            "BinOp"
                        ],
                        [
                            "grad_im2col_output.view(bs, -1, out_sz[0] * out_sz[1])",
                            "Call"
                        ],
                        [
                            "grad_in_mul_k * kernel",
                            "BinOp"
                        ],
                        [
                            "grad_im2col_output.view(bs, -1, out_sz[0] * out_sz[1])",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijmn,izklmn->ijklmn', (grad_output, kernel))",
                            "Call"
                        ],
                        [
                            "grad_im2col_output.view(bs, -1, out_sz[0] * out_sz[1])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "ctx.input_size[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_200": {
                "variable": {
                    "value": "grad_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn->o",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_234": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,jokl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_236": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,jokl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv_transpose2d_261": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.in_ch",
                            "Attribute"
                        ],
                        [
                            "ctx.in_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_262": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1][0], pad[1][1], pad[0][0], pad[0][1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_263": {
                "variable": {
                    "value": "in_cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fold_270": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_im2col_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_in_mul_k * kernel",
                            "BinOp"
                        ],
                        [
                            "grad_im2col_output.view(bs, -1, out_sz[0] * out_sz[1])",
                            "Call"
                        ],
                        [
                            "grad_in_mul_k * kernel",
                            "BinOp"
                        ],
                        [
                            "grad_im2col_output.view(bs, -1, out_sz[0] * out_sz[1])",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijmn,izklmn->ijklmn', (grad_output, kernel))",
                            "Call"
                        ],
                        [
                            "grad_im2col_output.view(bs, -1, out_sz[0] * out_sz[1])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "im2col_input_sz[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_284": {
                "variable": {
                    "value": "grad_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn->o",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_317": {
                "variable": {
                    "value": "grad_im2col_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,izklmn->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, kernel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "fold_320": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_im2col_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_in_mul_k * kernel",
                            "BinOp"
                        ],
                        [
                            "grad_im2col_output.view(bs, -1, out_sz[0] * out_sz[1])",
                            "Call"
                        ],
                        [
                            "grad_in_mul_k * kernel",
                            "BinOp"
                        ],
                        [
                            "grad_im2col_output.view(bs, -1, out_sz[0] * out_sz[1])",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijmn,izklmn->ijklmn', (grad_output, kernel))",
                            "Call"
                        ],
                        [
                            "grad_im2col_output.view(bs, -1, out_sz[0] * out_sz[1])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "ctx.input_size[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_323": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_325": {
                "variable": {
                    "value": "grad_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,ijklmn->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, cols)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_385": {
                "variable": {
                    "value": "smoothed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_for_kernel_crop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(-1, 1, in_h, in_w)[:, :, crop[0]:_neg_idx(crop[0]), crop[1]:_neg_idx(crop[1])]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "smooth_kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smooth_1d",
                            "Name"
                        ],
                        [
                            "smooth_1d",
                            "Name"
                        ],
                        [
                            "smooth_kernel * smooth_1d.view(-1, *repeat(1, d))",
                            "BinOp"
                        ],
                        [
                            "smooth_kernel * smooth_1d.view(-1, *repeat(1, d))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "tuple(np.maximum(0, smooth_padding))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_390": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_394": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_440": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,zykl->ijmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(im_cols * kernel, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_442": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,ojkl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(im_cols * kernel, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_565": {
                "variable": {
                    "value": "self.smooth_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, *repeat(smooth_kernel_size, len(kernel_size)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_179": {
                "variable": {
                    "value": "grad_in_mul_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,ojkl->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_195": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,ijklmn->kl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_198": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,ijklmn->ojkl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_258": {
                "variable": {
                    "value": "grad_in_mul_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,jokl->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_279": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,ijklmn->kl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_282": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,ijklmn->jokl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_541": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_553": {
                "variable": {
                    "value": "inv_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(self.inv_alpha_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_554": {
                "variable": {
                    "value": "inv_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(self.inv_lambda_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_567": {
                "variable": {
                    "value": "smooth_1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.25, 0.5, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_535": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_574": {
                "variable": {
                    "value": "smooth_1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(1.0 / smooth_kernel_size,) * smooth_kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_401": {
                "input": {
                    "value": "x + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5 * inv_lambda.view(1, -1, 1, 1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_531": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*kernel_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_537": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_539": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_550": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_551": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_556": {
                "data": {
                    "value": "inv_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(float(self.inv_alpha_init))",
                            "Call"
                        ],
                        [
                            "self.inv_alpha_init * torch.ones(out_channels)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_557": {
                "data": {
                    "value": "inv_lambda",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(float(self.inv_lambda_init))",
                            "Call"
                        ],
                        [
                            "self.inv_lambda_init * torch.ones(out_channels)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_611": {
                "variable": {
                    "value": "self.weight.data[c, c, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_622": {
                "variable": {
                    "value": "self.weight.data[0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "gauss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np_gaussian_2d(self.kernel_size[0]) * self.kernel_size[0] * self.kernel_size[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_625": {
                "variable": {
                    "value": "self.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "compat.reshape(n_classes, n_classes, 1, 1) * gauss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_627": {
                "input": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "core/pac_upsampler.py": {
        "torch": {
            "arange_84": {
                "variable": {
                    "value": "hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "guide.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "guide.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_85": {
                "variable": {
                    "value": "ww",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "guide.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "guide.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "guide",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[guide * self.scale_color, hh.view(-1, 1).expand(bs, 1, -1, w) * self.scale_space, ww.expand(bs, 1, h, -1) * self.scale_space]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.branch_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channels, ns_tg[0], kernel_size=fs[0], padding=paddings_tg[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.branch_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(guide_channels, ns_tg[0], kernel_size=fs[0], padding=paddings_tg[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.branch_joint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ns_tg[2] * 2, ns_f[0], kernel_size=fs[0], padding=paddings[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.branch_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(t_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.branch_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(g_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.up_convts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_216": {
                "variable": {
                    "value": "self.up_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "self.branch_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(f_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_102": {
                "input": {
                    "value": "target_low",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(target_low, scale_factor=self.factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.branch_t(target_low)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_139": {
                "variable": {
                    "value": "target_low",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_low",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(target_low, scale_factor=self.factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.branch_t(target_low)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_248": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(bs * ch, 1, h, w)",
                            "Call"
                        ],
                        [
                            "x.reshape(bs_ch // ch, ch, h, w)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, ch, 1, 1).reshape(bs * ch, _ch, h, w)",
                            "Call"
                        ],
                        [
                            "self.convt(target_low, guide)",
                            "Call"
                        ],
                        [
                            "recover_from_single_channel(x, ch0)",
                            "Call"
                        ],
                        [
                            "self.branch_joint(th.cat((target_low, guide), dim=1))",
                            "Call"
                        ],
                        [
                            "recover_from_single_channel(x, ch0)",
                            "Call"
                        ],
                        [
                            "self.branch_t(target_low)",
                            "Call"
                        ],
                        [
                            "self.branch_f(x)",
                            "Call"
                        ],
                        [
                            "recover_from_single_channel(x, ch0)",
                            "Call"
                        ],
                        [
                            "self.up_convts[i](x, guide_cur)",
                            "Call"
                        ],
                        [
                            "self.up_bns[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ns_tg[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "fs[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings_tg[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(sum(paddings) // 3, sum(paddings) // 3, sum(paddings) - 2 * (sum(paddings) // 3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "ns_tg[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ns_tg[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "fs[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings_tg[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(sum(paddings) // 3, sum(paddings) // 3, sum(paddings) - 2 * (sum(paddings) // 3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "ns_tg[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ns_tg[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "fs[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings_tg[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(sum(paddings) // 3, sum(paddings) // 3, sum(paddings) - 2 * (sum(paddings) // 3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "guide_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ns_tg[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "fs[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings_tg[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(sum(paddings) // 3, sum(paddings) // 3, sum(paddings) - 2 * (sum(paddings) // 3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "ns_tg[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ns_tg[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "fs[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings_tg[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(sum(paddings) // 3, sum(paddings) // 3, sum(paddings) - 2 * (sum(paddings) // 3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "ns_tg[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ns_tg[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "fs[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings_tg[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(sum(paddings) // 3, sum(paddings) // 3, sum(paddings) - 2 * (sum(paddings) // 3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "ns_tg[2] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ns_f[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "fs[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tuple((f // 2 for f in fs))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "ns_f[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ns_f[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "fs[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tuple((f // 2 for f in fs))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "ns_f[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "fs[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tuple((f // 2 for f in fs))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "(target_low, guide)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_243": {
                "variable": {
                    "value": "guide_cur",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "guide_cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "guide[:, i * self.k_ch:(i + 1) * self.k_ch]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(guide_cur, scale_factor=scale, align_corners=False, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "repeat_for_channel(guide_cur, ch0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.pow(2, i + 1) / self.factor",
                            "BinOp"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "n_t_channels[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_t_channels[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "f_sz_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(f_sz_1 // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_205": {
                "in_channels": {
                    "value": "n_g_channels[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_g_channels[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "f_sz_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(f_sz_1 // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_222": {
                "num_features": {
                    "value": "n_f_channels[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "n_f_channels[l + num_ups]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_f_channels[l + num_ups + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "f_sz_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(f_sz_1 // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "n_t_channels[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_208": {
                "num_features": {
                    "value": "n_g_channels[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_230": {
                "num_features": {
                    "value": "n_f_channels[l + num_ups + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/raft.py": {
        "torch": {
            "softmax_77": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.view(N, 1, 9, 8, 8, H, W)",
                            "Call"
                        ],
                        [
                            "torch.softmax(mask, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_79": {
                "variable": {
                    "value": "up_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "8 * flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "up_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask * up_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_110": {
                "variable": {
                    "value": "(net, inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cnet",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.cnet(image1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[hdim, cdim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_111": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_112": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(inp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/raft_nc_dbl.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "self.update_block.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_110": {
                "variable": {
                    "value": "flow_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(flow_lr, scale_factor=2, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_pretrained",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_138": {
                "variable": {
                    "value": "(net, inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cnet",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.cnet(image1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[hdim, cdim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_139": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_140": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.relu(inp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/update.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "192 + 128",
                            "MethodArgument"
                        ],
                        [
                            "192 + 128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.convz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.convr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.convq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convz(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convr(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_28": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convq(torch.cat([r * h, x], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.convz1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.convr1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.convq1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.convz2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.convr2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.convq2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convz1(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convr1(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convq1(torch.cat([r * h, x], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convz2(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convr2(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convq2(torch.cat([r * h, x], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.convc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cor_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.corr_levels * (2 * args.corr_radius + 1) ** 2",
                            "BinOp"
                        ],
                        [
                            "args.corr_levels * (2 * args.corr_radius + 1) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.convf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.convf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "cor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convc1(corr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convf1(flow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convf2(flo)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "cor_flo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cor, flo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(cor_flo)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.convc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cor_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.corr_levels * (2 * args.corr_radius + 1) ** 2",
                            "BinOp"
                        ],
                        [
                            "args.corr_levels * (2 * args.corr_radius + 1) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.convc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.convf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.convf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 + 192",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128 - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "cor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convc1(corr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "cor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convc2(cor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convf1(flow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convf2(flo)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "cor_flo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cor, flo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(cor_flo)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inp, motion_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inp, motion_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[out, flow]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "[out, flow]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "[r * h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "[r * h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[r * h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "core/upsampler.py": {
        "torch": {
            "rand_247": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 3, 50, 50)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "out_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, ic, oh, ow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Upsample_217": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_150": {
                "variable": {
                    "value": "x_guidance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_guidance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(x_guidance, x_lowres.size()[2:], mode='area')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "x_lowres.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "(x_data_for_guidance, x_guidance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "core/utils/augmentor.py": {
        "torch": {}
    },
    "core/utils/utils.py": {
        "torch": {
            "cat_66": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xgrid, ygrid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_67": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.grid_sample(img, grid, align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([xgrid, ygrid], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "meshgrid_77": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(ht)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(wd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "coords[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flow.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.stack([flow_x, flow_y], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_77": {
                "start": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "input": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flow.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.stack([flow_x, flow_y], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(8 * flow.shape[2], 8 * flow.shape[3])",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ],
                        [
                            "'sintel'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "self._pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(imfile)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "img[0].permute(1, 2, 0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_22": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images, dim=0)",
                            "Call"
                        ],
                        [
                            "images.to(DEVICE)",
                            "Call"
                        ],
                        [
                            "glob.glob(os.path.join(args.path, '*.png')) + glob.glob(os.path.join(args.path, '*.jpg'))",
                            "BinOp"
                        ],
                        [
                            "load_image_list(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluate.py": {
        "torch": {
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "epe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(flow_pr[0].cpu() - flow_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_103": {
                "variable": {
                    "value": "epe",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "epe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(flow - flow_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_164": {
                "variable": {
                    "value": "epe",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_165": {
                "variable": {
                    "value": "mag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_165": {
                "variable": {
                    "value": "mag",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_246": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "epe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(flow - flow_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "variable": {
                    "value": "epe",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_248": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT_NC(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_257": {
                "f": {
                    "value": "args.restore_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_250": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT_NC_SEP(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_252": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT_NC_DBL(args)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "sum_53": {
                "variable": {
                    "value": "mag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_53": {
                "variable": {
                    "value": "mag",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "epe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(flow_preds[-1] - flow_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "variable": {
                    "value": "epe",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_192": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "args.mixed_precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OneCycleLR_93": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.AdamW(model.parameters(), lr=args.lr, weight_decay=args.wdecay, eps=args.epsilon)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.wdecay, eps=args.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "total_steps": {
                    "value": "args.num_steps + 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pct_start": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "cycle_momentum": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "anneal_strategy": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_169": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT(args)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoints/%s/final_model.pth' % args.name",
                            "BinOp"
                        ],
                        [
                            "'checkpoints/%s/%d_%s.pth' % (args.name, total_steps + 1, args.name)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_345": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_96": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.AdamW(model.parameters(), lr=args.lr, weight_decay=args.wdecay, eps=args.epsilon)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.wdecay, eps=args.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.scheduler_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SummaryWriter_135": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'checkpoints/%s' % args.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_156": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_171": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT_NC(args)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_173": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT_NC_SEP(args)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_180": {
                "f": {
                    "value": "args.restore_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__221": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_175": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT_NC_DBL(args)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "args.gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoints/%s/final_model.pth' % args.name",
                            "BinOp"
                        ],
                        [
                            "'checkpoints/%s/%d_%s.pth' % (args.name, total_steps + 1, args.name)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_212": {
                "*size": {
                    "value": "*image1.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_213": {
                "*size": {
                    "value": "*image2.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}