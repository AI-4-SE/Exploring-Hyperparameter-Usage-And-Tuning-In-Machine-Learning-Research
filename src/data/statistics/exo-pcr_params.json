{
    "metrics.py": {
        "sklearn": {}
    },
    "bert/create_pretraining_data.py": {
        "tensorflow": {
            "Feature_166": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_171": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_137": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_162": {
                "msg": {
                    "value": "Wrote %d total instances",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "total_written",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total_written + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_410": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_419": {
                "msg": {
                    "value": "*** Reading from input files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_430": {
                "msg": {
                    "value": "*** Writing to output files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_421": {
                "msg": {
                    "value": "  %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_files",
                            "Name"
                        ],
                        [
                            "input_files",
                            "Name"
                        ]
                    ]
                }
            },
            "info_432": {
                "msg": {
                    "value": "  %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_files",
                            "Name"
                        ],
                        [
                            "output_files",
                            "Name"
                        ]
                    ]
                }
            },
            "TFRecordWriter_97": {
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_files",
                            "Name"
                        ],
                        [
                            "output_files",
                            "Name"
                        ]
                    ]
                }
            },
            "info_145": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_146": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in instance.tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Int64List_166": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_171": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_188": {
                "name": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_files",
                            "Name"
                        ],
                        [
                            "input_files",
                            "Name"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_417": {
                "filename": {
                    "value": "input_pattern",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.input_file.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_137": {
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_156": {
                "msg": {
                    "value": "'%s: %s' % (feature_name, ' '.join([str(x) for x in values]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert/extract_features.py": {
        "tensorflow": {
            "RunConfig_353": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_377": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, layer_indexes=layer_indexes, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_one_hot_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(master=FLAGS.master, tpu_config=tf.contrib.tpu.TPUConfig(num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "predict_batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_171": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_202": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'unique_id': unique_ids}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "set_verbosity_343": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_186": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_322": {
                "name": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_184": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_191": {
                "msg": {
                    "value": "'  name = %s, shape = %s%s' % (var.name, var.shape, init_string)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_282": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_283": {
                "msg": {
                    "value": "'unique_id: %s' % example.unique_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_284": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_286": {
                "msg": {
                    "value": "'input_ids: %s' % ' '.join([str(x) for x in input_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_287": {
                "msg": {
                    "value": "'input_mask: %s' % ' '.join([str(x) for x in input_mask])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_288": {
                "msg": {
                    "value": "'input_type_ids: %s' % ' '.join([str(x) for x in input_type_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TPUConfig_355": {
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_125": {
                "value": {
                    "value": "all_unique_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_127": {
                "value": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_131": {
                "value": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_136": {
                "value": {
                    "value": "all_input_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_179": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Scaffold_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert/modeling.py": {
        "tensorflow": {
            "list_variables_334": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_362": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - dropout_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_414": {
                "variable": {
                    "value": "embedding_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_428": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_tensor, 1.0 - dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_input_ids, embedding_table)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embedding_table, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape[0:-1] + [input_shape[-1] * embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape[0:-1] + [input_shape[-1] * embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_546": {
                "variable": {
                    "value": "to_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(to_mask, [batch_size, 1, to_seq_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_554": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_671": {
                "variable": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "from_tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(from_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "query_act",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_679": {
                "variable": {
                    "value": "key_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "key_act",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_687": {
                "variable": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "value_act",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_706": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(from_tensor_2d, num_attention_heads * size_per_head, activation=query_act, name='query', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(query_layer, batch_size, num_attention_heads, from_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=key_act, name='key', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(key_layer, batch_size, num_attention_heads, to_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_707": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(size_per_head))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_725": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_732": {
                "variable": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, to_seq_length, num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_737": {
                "variable": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_740": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "dropout(attention_probs, attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_743": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_931": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_947": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_381": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_412": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_420": {
                "variable": {
                    "value": "flat_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_421": {
                "variable": {
                    "value": "one_hot_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_422": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_input_ids, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_table",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_424": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_481": {
                "variable": {
                    "value": "token_type_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embedding_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'token_type_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[token_type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_487": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_488": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(token_type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "token_type_vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_489": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_less_equal_495": {
                "variable": {
                    "value": "assert_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_636": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length, num_attention_heads, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_639": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_712": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_747": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_752": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_961": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_170": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_497": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_510": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_521": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_547": {
                "tensor": {
                    "value": "to_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_92": {
                "name": {
                    "value": "json_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_158": {
                "x": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_159": {
                "x": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_232": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_280": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_496": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_832": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_872": {
                "variable": {
                    "value": "intermediate_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "intermediate_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "3072",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "intermediate_act_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gelu",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_880": {
                "variable": {
                    "value": "layer_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "intermediate_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(attention_output, intermediate_size, activation=intermediate_act_fn, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_987": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_717": {
                "x": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_835": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_858": {
                "variable": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attention_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_863": {
                "variable": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_871": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_879": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_280": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_837": {
                "name_or_scope": {
                    "value": "self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_862": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "bert/modeling_test.py": {
        "tensorflow": {
            "main_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_138": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_160": {
                "value": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stack.pop()",
                            "Call"
                        ],
                        [
                            "all_names",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert/optimization.py": {
        "tensorflow": {
            "get_or_create_global_step_27": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_32": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_70": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_71": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_74": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_83": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(zip(grads, tvars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[global_step.assign(new_global_step)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "is_warmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'])",
                            "Call"
                        ],
                        [
                            "tf.contrib.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_157": {
                "*inputs": {
                    "value": "*assignments",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_132": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_134": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_135": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_137": {
                "x": {
                    "value": "next_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "bert/optimization_test.py": {
        "tensorflow": {
            "main_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer([0.1, -0.2, -0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.4, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_33": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_34": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(x - w))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_35": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_38": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_32": {
                "x": {
                    "value": "x - w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_30": {
                "value": {
                    "value": "[0.1, -0.2, -0.1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "bert/run_classifier.py": {
        "tensorflow": {
            "DEFINE_string_102": {
                "name": {
                    "value": "tpu_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_108": {
                "name": {
                    "value": "tpu_zone",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_114": {
                "name": {
                    "value": "gcp_project",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_120": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordWriter_483": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_594": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_598": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RunConfig_827": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_858": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_fn_builder(bert_config=bert_config, num_labels=len(label_list), init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_504": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_523": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([seq_length], tf.int64), 'segment_ids': tf.FixedLenFeature([seq_length], tf.int64), 'label_ids': tf.FixedLenFeature([], tf.int64), 'is_real_example': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_541": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_606": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.get_pooled_output()",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output_layer, keep_prob=0.9)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', [num_labels, hidden_size], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_607": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', [num_labels], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_608": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_609": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_611": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_614": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "trainable_variables_647": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_783": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_807": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_823": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_980": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_461": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_462": {
                "msg": {
                    "value": "'guid: %s' % example.guid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_463": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_465": {
                "msg": {
                    "value": "'input_ids: %s' % ' '.join([str(x) for x in input_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_466": {
                "msg": {
                    "value": "'input_mask: %s' % ' '.join([str(x) for x in input_mask])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_467": {
                "msg": {
                    "value": "'segment_ids: %s' % ' '.join([str(x) for x in segment_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_468": {
                "msg": {
                    "value": "'label: %s (id = %d)' % (example.label, label_id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Feature_493": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_514": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_515": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_516": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_517": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_518": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_601": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_604": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.get_pooled_output()",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output_layer, keep_prob=0.9)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "info_627": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_637": {
                "variable": {
                    "value": "is_real_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['is_real_example']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_639": {
                "variable": {
                    "value": "is_real_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(label_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_663": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_676": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "info_870": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_871": {
                "msg": {
                    "value": "  Num examples = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(train_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_872": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_873": {
                "msg": {
                    "value": "  Num steps = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "int(len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_897": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_898": {
                "msg": {
                    "value": "  Num examples = %d (%d actual, %d padding)",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "num_actual_eval_examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(eval_examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_901": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_943": {
                "msg": {
                    "value": "***** Running prediction*****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_944": {
                "msg": {
                    "value": "  Num examples = %d (%d actual, %d padding)",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(predict_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "num_actual_predict_examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(predict_examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_947": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_487": {
                "msg": {
                    "value": "'Writing example %d of %d' % (ex_index, len(examples))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_530": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_and_batch_547": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ],
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_596": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_613": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "info_629": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_668": {
                "msg": {
                    "value": "'  name = %s, shape = %s%s' % (var.name, var.shape, init_string)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_695": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(metric_fn, [per_example_loss, label_ids, logits, is_real_example])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_701": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "{'probabilities': probabilities}",
                    "type": "Dict",
                    "possible_values": []
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "info_773": {
                "msg": {
                    "value": "'Writing example %d of %d' % (ex_index, len(examples))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TPUConfig_832": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GFile_921": {
                "name": {
                    "value": "output_eval_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_922": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_959": {
                "name": {
                    "value": "output_predict_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'test_results.tsv')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_961": {
                "msg": {
                    "value": "***** Predict results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_504": {
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_639": {
                "input": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_661": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_684": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_685": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_687": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "per_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "weights": {
                    "value": "is_real_example",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(tf.shape(label_ids), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_737": {
                "value": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_741": {
                "value": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_746": {
                "value": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_751": {
                "value": {
                    "value": "all_label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_924": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_493": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_656": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Scaffold_657": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert/run_classifier_with_tfhub.py": {
        "tensorflow": {
            "get_variable_65": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RunConfig_186": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_214": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_fn_builder(num_labels=len(label_list), learning_rate=FLAGS.learning_rate, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps, use_tpu=FLAGS.use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bert_outputs['pooled_output']",
                            "Subscript"
                        ],
                        [
                            "tf.nn.dropout(output_layer, keep_prob=0.9)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', [num_labels, hidden_size], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_78": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', [num_labels], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_79": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_81": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "set_verbosity_156": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_167": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_182": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bert_outputs['pooled_output']",
                            "Subscript"
                        ],
                        [
                            "tf.nn.dropout(output_layer, keep_prob=0.9)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "info_96": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_115": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_224": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_225": {
                "msg": {
                    "value": "  Num examples = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(train_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_226": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_227": {
                "msg": {
                    "value": "  Num steps = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "int(len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_240": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_241": {
                "msg": {
                    "value": "  Num examples = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_242": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_67": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "info_98": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_131": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(metric_fn, [per_example_loss, label_ids, logits])",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Session_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TPUConfig_191": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GFile_263": {
                "name": {
                    "value": "output_eval_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_264": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_122": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_123": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_124": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "per_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "info_266": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "bert/run_pretraining.py": {
        "tensorflow": {
            "DEFINE_string_84": {
                "name": {
                    "value": "tpu_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_90": {
                "name": {
                    "value": "tpu_zone",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_96": {
                "name": {
                    "value": "gcp_project",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_102": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_314": {
                "variable": {
                    "value": "flat_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, dtype=tf.int32) * seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_316": {
                "variable": {
                    "value": "flat_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "positions + flat_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_317": {
                "variable": {
                    "value": "flat_sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_319": {
                "variable": {
                    "value": "output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_sequence_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_tensor, [batch_size * seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(positions + flat_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_392": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([max_seq_length], tf.int64), 'segment_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'masked_lm_positions': tf.FixedLenFeature([max_predictions_per_seq], tf.int64), 'masked_lm_ids': tf.FixedLenFeature([max_predictions_per_seq], tf.int64), 'masked_lm_weights': tf.FixedLenFeature([max_predictions_per_seq], tf.float32), 'next_sentence_labels': tf.FixedLenFeature([1], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "RunConfig_429": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_450": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=FLAGS.num_train_steps, num_warmup_steps=FLAGS.num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_150": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_258": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bert_config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_262": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_263": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_264": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_269": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "bert_config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_277": {
                "variable": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_weights * per_example_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_290": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, bert_config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_294": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_297": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_298": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_299": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_300": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_301": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_303": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "set_verbosity_406": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_413": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_419": {
                "msg": {
                    "value": "*** Input Files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_425": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_117": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_167": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_179": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_lm_loss + next_sentence_loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "cls/predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_248": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "modeling.get_activation(bert_config.hidden_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "cls/seq_relationship",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordDataset_370": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_files",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "to_int32_399": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_421": {
                "msg": {
                    "value": "'  %s' % input_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_458": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_459": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_468": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_469": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_119": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_172": {
                "msg": {
                    "value": "'  name = %s, shape = %s%s' % (var.name, var.shape, init_string)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_226": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_lm_loss + next_sentence_loss",
                            "BinOp"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(metric_fn, [masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids, masked_lm_weights, next_sentence_example_loss, next_sentence_log_probs, next_sentence_labels])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "input_tensor": {
                    "value": "log_probs * one_hot_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_278": {
                "input_tensor": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_302": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_315": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_336": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_338": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_340": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_342": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_344": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_346": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_348": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_and_batch_380": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sequence_shape[0]",
                            "Subscript"
                        ],
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "num_cpu_threads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Glob_417": {
                "filename": {
                    "value": "input_pattern",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.input_file.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUConfig_434": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GFile_481": {
                "name": {
                    "value": "output_eval_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_482": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_165": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "masked_lm_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, masked_lm_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_192": {
                "variable": {
                    "value": "masked_lm_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "masked_lm_example_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_197": {
                "variable": {
                    "value": "masked_lm_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_lm_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "masked_lm_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_201": {
                "variable": {
                    "value": "masked_lm_mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "masked_lm_example_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "next_sentence_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, next_sentence_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_206": {
                "variable": {
                    "value": "next_sentence_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_sentence_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "next_sentence_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_209": {
                "variable": {
                    "value": "next_sentence_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "next_sentence_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "next_sentence_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_sentence_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_211": {
                "variable": {
                    "value": "next_sentence_mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "next_sentence_example_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_354": {
                "value": {
                    "value": "input_files",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "parallel_interleave_364": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mode == tf.estimator.ModeKeys.TRAIN",
                            "Compare"
                        ]
                    ]
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(num_cpu_threads, len(input_files))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_484": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_160": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Scaffold_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert/run_squad.py": {
        "tensorflow": {
            "DEFINE_string_119": {
                "name": {
                    "value": "tpu_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_125": {
                "name": {
                    "value": "tpu_zone",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_131": {
                "name": {
                    "value": "gcp_project",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_137": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_568": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cls/squad/output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_572": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cls/squad/output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_575": {
                "variable": {
                    "value": "final_hidden_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "final_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.get_sequence_output()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * seq_length, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_577": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "final_hidden_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('cls/squad/output_weights', [2, hidden_size], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_578": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('cls/squad/output_bias', [2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_580": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_581": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_583": {
                "variable": {
                    "value": "unstacked_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RunConfig_1143": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_1179": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_617": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_697": {
                "variable": {
                    "value": "name_to_features[start_positions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_698": {
                "variable": {
                    "value": "name_to_features[end_positions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_702": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'unique_ids': tf.FixedLenFeature([], tf.int64), 'input_ids': tf.FixedLenFeature([seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([seq_length], tf.int64), 'segment_ids': tf.FixedLenFeature([seq_length], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_720": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_744": {
                "msg": {
                    "value": "'Writing predictions to: %s' % output_prediction_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_745": {
                "msg": {
                    "value": "'Writing nbest to: %s' % output_nbest_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_1064": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Example_1089": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_1126": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_1132": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_1139": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_1282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_598": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_634": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_664": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(start_loss + end_loss) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "FixedLenFeature_690": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_691": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_692": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_693": {
                "shape": {
                    "value": "[seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_915": {
                "name": {
                    "value": "output_prediction_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'predictions.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_918": {
                "name": {
                    "value": "output_nbest_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'nbest_predictions.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Feature_1071": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_1202": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_1203": {
                "msg": {
                    "value": "  Num orig examples = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(train_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_1204": {
                "msg": {
                    "value": "  Num split examples = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "train_writer.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_1205": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_1206": {
                "msg": {
                    "value": "  Num steps = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "int(len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_1239": {
                "msg": {
                    "value": "***** Running predictions *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_1240": {
                "msg": {
                    "value": "  Num orig examples = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_1241": {
                "msg": {
                    "value": "  Num split examples = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(eval_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_1242": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_570": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_600": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_639": {
                "msg": {
                    "value": "'  name = %s, shape = %s%s' % (var.name, var.shape, init_string)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_646": {
                "variable": {
                    "value": "one_hot_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "final_hidden_shape[1]",
                            "Subscript"
                        ],
                        [
                            "modeling.get_shape_list(input_ids)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_648": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, seq_length, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_675": {
                "variable": {
                    "value": "output_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'unique_ids': unique_ids, 'start_logits': start_logits, 'end_logits': end_logits}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "to_int32_709": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_and_batch_726": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "final_hidden_shape[0]",
                            "Subscript"
                        ],
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_922": {
                "name": {
                    "value": "output_null_log_odds_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'null_odds.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_976": {
                "msg": {
                    "value": "\"Unable to find text: '%s' in '%s'\" % (pred_text, orig_text)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_986": {
                "msg": {
                    "value": "\"Length not equal after stripping spaces: '%s' vs '%s'\"",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "orig_ns_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tok_ns_text",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_1004": {
                "msg": {
                    "value": "\"Couldn't map start position\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_1015": {
                "msg": {
                    "value": "\"Couldn't map end position\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUConfig_1148": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "info_431": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_432": {
                "msg": {
                    "value": "'unique_id: %s' % unique_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_433": {
                "msg": {
                    "value": "'example_index: %s' % example_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_434": {
                "msg": {
                    "value": "'doc_span_index: %s' % doc_span_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_435": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_437": {
                "msg": {
                    "value": "'token_to_orig_map: %s' % ' '.join(['%d:%d' % (x, y) for (x, y) in six.iteritems(token_to_orig_map)])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_439": {
                "msg": {
                    "value": "'token_is_max_context: %s' % ' '.join(['%d:%s' % (x, y) for (x, y) in six.iteritems(token_is_max_context)])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_442": {
                "msg": {
                    "value": "'input_ids: %s' % ' '.join([str(x) for x in input_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_443": {
                "msg": {
                    "value": "'input_mask: %s' % ' '.join([str(x) for x in input_mask])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_445": {
                "msg": {
                    "value": "'segment_ids: %s' % ' '.join([str(x) for x in segment_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_632": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Features_1089": {
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "example_index_to_features[example_index]",
                            "Subscript"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_1258": {
                "msg": {
                    "value": "'Processing example: %d' % len(all_results)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_448": {
                "msg": {
                    "value": "impossible example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_451": {
                "msg": {
                    "value": "'start_position: %d' % start_position",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_452": {
                "msg": {
                    "value": "'end_position: %d' % end_position",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_453": {
                "msg": {
                    "value": "'answer: %s' % tokenization.printable_text(answer_text)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_627": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Scaffold_628": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_649": {
                "input_tensor": {
                    "value": "tf.reduce_sum(one_hot_positions * log_probs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_1072": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_650": {
                "input_tensor": {
                    "value": "one_hot_positions * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "warning_288": {
                "msg": {
                    "value": "\"Could not find answer: '%s' vs. '%s'\"",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "actual_text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "' '.join(doc_tokens[start_position:end_position + 1])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "cleaned_answer_text",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "' '.join(tokenization.whitespace_tokenize(orig_answer_text))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bert/tokenization.py": {
        "tensorflow": {
            "GFile_125": {
                "name": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "bert/tokenization_test.py": {
        "tensorflow": {
            "main_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "coref_ops.py": {
        "tensorflow": {
            "load_op_library_8": {
                "variable": {
                    "value": "coref_op_library",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "./coref_kernels.so",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "independent.py": {
        "tensorflow": {
            "PaddingFIFOQueue_82": {
                "variable": {
                    "value": "queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "dtypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shapes": {
                    "value": "shapes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_88": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_106": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "self.max_eval_f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "max_eval_f1",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_145": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "equal_269": {
                "variable": {
                    "value": "same_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labeled_starts, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(candidate_starts, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_270": {
                "variable": {
                    "value": "same_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labeled_ends, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(candidate_ends, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_271": {
                "variable": {
                    "value": "same_span",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labeled_starts, 1), tf.expand_dims(candidate_starts, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "same_end",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labeled_ends, 1), tf.expand_dims(candidate_ends, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_272": {
                "variable": {
                    "value": "candidate_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.to_int32(same_span)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_273": {
                "variable": {
                    "value": "candidate_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidate_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(labels, 0), tf.to_int32(same_span))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_293": {
                "variable": {
                    "value": "(_, top_antecedents)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fast_antecedent_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_fast_antecedent_scores(top_span_emb)",
                            "Call"
                        ],
                        [
                            "fast_antecedent_scores + antecedent_distance_scores",
                            "BinOp"
                        ],
                        [
                            "self.get_fast_antecedent_scores_pool(top_span_emb, pool_span_emb)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(self.config['max_top_antecedents'], k)",
                            "Call"
                        ],
                        [
                            "util.shape(top_antecedents, 1)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_301": {
                "variable": {
                    "value": "antecedent_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(antecedent_offsets_pool, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_312": {
                "variable": {
                    "value": "(_, top_antecedents)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fast_antecedent_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_fast_antecedent_scores(top_span_emb)",
                            "Call"
                        ],
                        [
                            "fast_antecedent_scores + antecedent_distance_scores",
                            "BinOp"
                        ],
                        [
                            "self.get_fast_antecedent_scores_pool(top_span_emb, pool_span_emb)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(self.config['max_top_antecedents'], k)",
                            "Call"
                        ],
                        [
                            "util.shape(top_antecedents, 1)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_367": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.config['max_top_antecedents']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.shape(top_span_emb, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(candidate_starts, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(top_span_emb, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_374": {
                "variable": {
                    "value": "dummy_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_416": {
                "variable": {
                    "value": "top_antecedent_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dummy_scores, top_antecedent_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_418": {
                "variable": {
                    "value": "top_antecedent_cluster_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_span_cluster_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_cluster_ids",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_420": {
                "variable": {
                    "value": "same_cluster_indicator",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_antecedent_cluster_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(top_span_cluster_ids, top_antecedents)",
                            "Call"
                        ],
                        [
                            "top_antecedent_cluster_ids + tf.to_int32(tf.log(tf.to_float(top_antecedents_mask)))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(top_span_cluster_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_421": {
                "variable": {
                    "value": "non_dummy_indicator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_cluster_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_422": {
                "variable": {
                    "value": "pairwise_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_cluster_indicator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(top_antecedent_cluster_ids, tf.expand_dims(top_span_cluster_ids, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "non_dummy_indicator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_span_cluster_ids > 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_423": {
                "variable": {
                    "value": "dummy_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_any(pairwise_labels, 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_424": {
                "variable": {
                    "value": "top_antecedent_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dummy_labels, pairwise_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_426": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.softmax_loss(top_antecedent_scores, top_antecedent_labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ],
                        [
                            "loss + topic_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cond_509": {
                "variable": {
                    "value": "(top_antecedents_pool, top_antecedent_scores_pool, loss_pool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.reduce_any(coref_in_pool)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : get_predicion_and_loss_from_pool()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : zero_prediction_and_loss_from_pool()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "gather_527": {
                "variable": {
                    "value": "span_start_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_starts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_530": {
                "variable": {
                    "value": "span_end_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_ends",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_547": {
                "variable": {
                    "value": "span_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "span_emb_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_565": {
                "variable": {
                    "value": "span_start_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "starts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_569": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "span_start_emb * span_width_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_576": {
                "variable": {
                    "value": "doc_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(0, num_words), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_c, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_577": {
                "variable": {
                    "value": "mention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "doc_range >= tf.expand_dims(span_starts, 1)",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "doc_range <= tf.expand_dims(span_ends, 1)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_580": {
                "variable": {
                    "value": "mention_word_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(tf.to_float(mention_mask)) + tf.expand_dims(word_attn, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_586": {
                "variable": {
                    "value": "marginalized_gold_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gold_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "antecedent_scores + tf.log(tf.to_float(antecedent_labels))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_587": {
                "variable": {
                    "value": "log_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "antecedent_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_596": {
                "variable": {
                    "value": "use_identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distances <= 4",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "concat_615": {
                "variable": {
                    "value": "feature_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "feature_emb_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_616": {
                "variable": {
                    "value": "feature_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(feature_emb_list, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(feature_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_618": {
                "variable": {
                    "value": "target_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_span_emb",
                            "Name"
                        ],
                        [
                            "f * attended_span_emb + (1 - f) * top_span_emb",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_620": {
                "variable": {
                    "value": "target_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_span_emb, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(target_emb, [1, c, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, c, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_622": {
                "variable": {
                    "value": "pair_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_emb, top_antecedent_emb, similarity_emb, feature_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_626": {
                "variable": {
                    "value": "slow_antecedent_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slow_antecedent_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(slow_antecedent_scores, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_633": {
                "variable": {
                    "value": "target_top_span_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_span_emb",
                            "Name"
                        ],
                        [
                            "f * attended_span_emb + (1 - f) * top_span_emb",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_639": {
                "variable": {
                    "value": "target_top_span_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pool_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_span_emb(mention_doc_pool, mention_doc_pool, pool_starts, pool_ends)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_789": {
                "variable": {
                    "value": "max_eval_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.max_eval_f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "average_f1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "recall['unseen']['r@1']['nn']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "assign_790": {
                "variable": {
                    "value": "self.update_max_f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.max_eval_f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "max_eval_f1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(self.max_eval_f1, average_f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_285": {
                "x": {
                    "value": "tf.to_float(antecedents_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_290": {
                "variable": {
                    "value": "antecedent_distance_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.squeeze(distance_scores, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "antecedent_distance_buckets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bucket_distance(antecedent_offsets)",
                            "Call"
                        ],
                        [
                            "self.bucket_distance(antecedent_offsets)",
                            "Call"
                        ],
                        [
                            "self.bucket_distance(top_antecedent_offsets)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_309": {
                "variable": {
                    "value": "antecedent_distance_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.squeeze(distance_scores, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "antecedent_distance_buckets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bucket_distance(antecedent_offsets)",
                            "Call"
                        ],
                        [
                            "self.bucket_distance(antecedent_offsets)",
                            "Call"
                        ],
                        [
                            "self.bucket_distance(top_antecedent_offsets)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_331": {
                "variable": {
                    "value": "doc_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mention_doc[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_379": {
                "variable": {
                    "value": "top_span_speaker_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "speaker_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(speaker_ids)",
                            "Call"
                        ],
                        [
                            "self.flatten_emb_by_sentence(speaker_ids, input_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_starts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_starts",
                            "Name"
                        ],
                        [
                            "tensorized_example[5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_380": {
                "variable": {
                    "value": "top_antecedent_speaker_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_span_speaker_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(speaker_ids, top_span_starts)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_381": {
                "variable": {
                    "value": "same_speaker",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(top_span_speaker_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "top_antecedent_speaker_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(top_span_speaker_ids, top_antecedents)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_419": {
                "x": {
                    "value": "tf.log(tf.to_float(top_antecedents_mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_445": {
                "variable": {
                    "value": "antecedent_offsets_pool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "boolean_mask_446": {
                "variable": {
                    "value": "antecedent_offsets_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "antecedent_offsets_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(k)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(antecedent_offsets_pool, coref_in_pool)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "coref_in_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(gold_mentions), dtype=np.bool)",
                            "Call"
                        ],
                        [
                            "tensorized_example[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_447": {
                "variable": {
                    "value": "top_span_starts_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "candidate_starts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold_starts",
                            "Name"
                        ]
                    ]
                },
                "mask": {
                    "value": "coref_in_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(gold_mentions), dtype=np.bool)",
                            "Call"
                        ],
                        [
                            "tensorized_example[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_448": {
                "variable": {
                    "value": "top_span_ends_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "candidate_ends",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold_ends",
                            "Name"
                        ]
                    ]
                },
                "mask": {
                    "value": "coref_in_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(gold_mentions), dtype=np.bool)",
                            "Call"
                        ],
                        [
                            "tensorized_example[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_449": {
                "variable": {
                    "value": "top_span_emb_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "candidate_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_span_emb(mention_doc, mention_doc, candidate_starts, candidate_ends)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "coref_in_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(gold_mentions), dtype=np.bool)",
                            "Call"
                        ],
                        [
                            "tensorized_example[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_450": {
                "variable": {
                    "value": "top_span_cluster_ids_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "candidate_cluster_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_ids",
                            "Name"
                        ]
                    ]
                },
                "mask": {
                    "value": "coref_in_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(gold_mentions), dtype=np.bool)",
                            "Call"
                        ],
                        [
                            "tensorized_example[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_451": {
                "variable": {
                    "value": "include_indicator_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "include_indicator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones([len(gold_mentions), self.pool_size], dtype=np.bool)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "coref_in_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(gold_mentions), dtype=np.bool)",
                            "Call"
                        ],
                        [
                            "tensorized_example[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_456": {
                "variable": {
                    "value": "dummy_scores_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_pool, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_493": {
                "variable": {
                    "value": "top_antecedent_scores_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dummy_scores_pool, top_antecedent_scores_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_495": {
                "variable": {
                    "value": "top_antecedent_cluster_ids_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cluster_ids_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(self.pool_size)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents_pool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_496": {
                "variable": {
                    "value": "same_cluster_indicator_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_antecedent_cluster_ids_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(cluster_ids_pool, top_antecedents_pool)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(top_span_cluster_ids_pool, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_497": {
                "variable": {
                    "value": "non_dummy_indicator_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_cluster_ids_pool > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_498": {
                "variable": {
                    "value": "pairwise_labels_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_cluster_indicator_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(top_antecedent_cluster_ids_pool, tf.expand_dims(top_span_cluster_ids_pool, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "non_dummy_indicator_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_span_cluster_ids_pool > 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_499": {
                "variable": {
                    "value": "dummy_labels_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_any(pairwise_labels_pool, 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_500": {
                "variable": {
                    "value": "top_antecedent_labels_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dummy_labels_pool, pairwise_labels_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_502": {
                "variable": {
                    "value": "loss_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.softmax_loss(top_antecedent_scores_pool, top_antecedent_labels_pool)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss_pool)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_539": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "span_width_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02)), span_width_index)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(span_width_emb, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('span_width_prior_embeddings', [self.config['max_span_width'], self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.get_variable('start_width_embeddings', [self.config['max_span_width'], hidden], initializer=tf.truncated_normal_initializer(stddev=0.02)), distance)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_544": {
                "variable": {
                    "value": "head_attn_reps",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mention_word_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_masked_mention_word_scores(context_outputs, span_starts, span_ends)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_554": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "span_width_prior_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['max_span_width'], self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_558": {
                "variable": {
                    "value": "width_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "width_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.ffnn(span_width_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.gather(width_scores, span_width_index)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "span_width_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "span_width - 1",
                            "BinOp"
                        ],
                        [
                            "span_ends - span_starts",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_568": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('start_width_embeddings', [self.config['max_span_width'], hidden], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ends - starts",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_579": {
                "variable": {
                    "value": "word_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "util.projection(encoded_doc, 1, initializer=tf.truncated_normal_initializer(stddev=0.02))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_598": {
                "t": {
                    "value": "combined_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "use_identity * distances + (1 - use_identity) * logspace_idx",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_607": {
                "variable": {
                    "value": "speaker_pair_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('same_speaker_emb', [2, self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.to_int32(same_speaker)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_612": {
                "variable": {
                    "value": "antecedent_distance_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('antecedent_distance_emb', [10, self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "antecedent_distance_buckets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bucket_distance(antecedent_offsets)",
                            "Call"
                        ],
                        [
                            "self.bucket_distance(antecedent_offsets)",
                            "Call"
                        ],
                        [
                            "self.bucket_distance(top_antecedent_offsets)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_632": {
                "variable": {
                    "value": "source_top_span_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(top_span_emb, util.shape(top_span_emb, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_634": {
                "a": {
                    "value": "source_top_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(util.projection(top_span_emb, util.shape(top_span_emb, -1)), self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(util.projection(top_span_emb, util.shape(top_span_emb, -1)), self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "target_top_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(top_span_emb, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(pool_span_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_638": {
                "variable": {
                    "value": "source_top_span_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(top_span_emb, util.shape(top_span_emb, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_640": {
                "a": {
                    "value": "source_top_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(util.projection(top_span_emb, util.shape(top_span_emb, -1)), self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(util.projection(top_span_emb, util.shape(top_span_emb, -1)), self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "target_top_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(top_span_emb, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(pool_span_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_648": {
                "variable": {
                    "value": "flattened_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_653": {
                "tensor": {
                    "value": "flattened_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(emb, [num_sentences * max_sentence_length])",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb, [num_sentences * max_sentence_length, util.shape(emb, 2)])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.reshape(text_len_mask, [num_sentences * max_sentence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_269": {
                "input": {
                    "value": "candidate_starts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold_starts",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_270": {
                "input": {
                    "value": "candidate_ends",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold_ends",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_272": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_272": {
                "x": {
                    "value": "same_span",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(same_start, same_end)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_282": {
                "input": {
                    "value": "top_span_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(k)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_285": {
                "x": {
                    "value": "antecedents_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "antecedent_offsets >= 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "expand_dims_301": {
                "input": {
                    "value": "antecedent_offsets_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(k)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(antecedent_offsets_pool, coref_in_pool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_304": {
                "x": {
                    "value": "tf.to_float(include_indicator_pool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_364": {
                "variable": {
                    "value": "topic_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_365": {
                "variable": {
                    "value": "topic_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.config['num_lda_topics']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_419": {
                "x": {
                    "value": "tf.to_float(top_antecedents_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_420": {
                "input": {
                    "value": "top_span_cluster_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_cluster_ids",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_423": {
                "input_tensor": {
                    "value": "pairwise_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(same_cluster_indicator, non_dummy_indicator)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_463": {
                "variable": {
                    "value": "same_speaker_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_pool, c_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_469": {
                "variable": {
                    "value": "top_span_emb_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "top_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_span_emb",
                            "Name"
                        ],
                        [
                            "f * attended_span_emb + (1 - f) * top_span_emb",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "coref_in_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(gold_mentions), dtype=np.bool)",
                            "Call"
                        ],
                        [
                            "tensorized_example[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_any_509": {
                "input_tensor": {
                    "value": "coref_in_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(gold_mentions), dtype=np.bool)",
                            "Call"
                        ],
                        [
                            "tensorized_example[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_538": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_width_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "span_width - 1",
                            "BinOp"
                        ],
                        [
                            "span_ends - span_starts",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_551": {
                "name_or_scope": {
                    "value": "mention_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_567": {
                "name_or_scope": {
                    "value": "span_width",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_576": {
                "input": {
                    "value": "tf.range(0, num_words)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_578": {
                "name_or_scope": {
                    "value": "mention_word_attn",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_585": {
                "x": {
                    "value": "tf.to_float(antecedent_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_595": {
                "x": {
                    "value": "tf.floor(tf.log(tf.to_float(distances)) / math.log(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_624": {
                "name_or_scope": {
                    "value": "slow_antecedent_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_631": {
                "name_or_scope": {
                    "value": "src_projection",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_637": {
                "name_or_scope": {
                    "value": "src_projection",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_643": {
                "input": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_644": {
                "input": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_650": {
                "variable": {
                    "value": "flattened_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length, util.shape(emb, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_653": {
                "tensor": {
                    "value": "text_len_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_277": {
                "x": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "antecedent_distance",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_290": {
                "input": {
                    "value": "distance_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.projection(tf.nn.dropout(tf.get_variable('antecedent_distance_emb', [10, self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02)), self.dropout), 1, initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "util.projection(tf.nn.dropout(tf.get_variable('antecedent_distance_emb', [10, self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02)), self.dropout), 1, initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_304": {
                "x": {
                    "value": "include_indicator_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(include_indicator, coref_in_pool)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "antecedent_distance",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_309": {
                "input": {
                    "value": "distance_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.projection(tf.nn.dropout(tf.get_variable('antecedent_distance_emb', [10, self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02)), self.dropout), 1, initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "util.projection(tf.nn.dropout(tf.get_variable('antecedent_distance_emb', [10, self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02)), self.dropout), 1, initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_350": {
                "name_or_scope": {
                    "value": "topic_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_360": {
                "variable": {
                    "value": "topic_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "topic_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([1, self.config['num_lda_topics']])",
                            "Call"
                        ],
                        [
                            "util.projection(topic_emb, self.config['num_lda_topics'])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(topic_prediction, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_381": {
                "input": {
                    "value": "top_span_speaker_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(speaker_ids, top_span_starts)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_403": {
                "variable": {
                    "value": "top_antecedent_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_span_emb",
                            "Name"
                        ],
                        [
                            "f * attended_span_emb + (1 - f) * top_span_emb",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_419": {
                "x": {
                    "value": "top_antecedents_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.batch_gather(antecedents_mask, top_antecedents)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_441": {
                "x": {
                    "value": "text_len_pool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_488": {
                "variable": {
                    "value": "top_antecedent_emb_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pool_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_span_emb(mention_doc_pool, mention_doc_pool, pool_starts, pool_ends)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents_pool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_496": {
                "input": {
                    "value": "top_span_cluster_ids_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(candidate_cluster_ids, coref_in_pool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_499": {
                "input_tensor": {
                    "value": "pairwise_labels_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(same_cluster_indicator_pool, non_dummy_indicator_pool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_507": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_537": {
                "name_or_scope": {
                    "value": "use_features",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_556": {
                "name_or_scope": {
                    "value": "width_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_568": {
                "name": {
                    "value": "start_width_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['max_span_width'], hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_576": {},
            "expand_dims_577": {
                "input": {
                    "value": "span_ends",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_580": {
                "x": {
                    "value": "tf.to_float(mention_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_580": {
                "input": {
                    "value": "word_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(util.projection(encoded_doc, 1, initializer=tf.truncated_normal_initializer(stddev=0.02)), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_585": {
                "x": {
                    "value": "antecedent_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_595": {
                "x": {
                    "value": "tf.log(tf.to_float(distances)) / math.log(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_607": {
                "name": {
                    "value": "same_speaker_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_607": {
                "x": {
                    "value": "same_speaker",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(top_span_speaker_ids, 1), top_antecedent_speaker_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_variable_612": {
                "name": {
                    "value": "antecedent_distance_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_289": {
                "x": {
                    "value": "tf.get_variable('antecedent_distance_emb', [10, self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_308": {
                "x": {
                    "value": "tf.get_variable('antecedent_distance_emb', [10, self.config['feature_size']], initializer=tf.truncated_normal_initializer(stddev=0.02))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "topic_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_387": {
                "name_or_scope": {
                    "value": "coref_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "concat_392": {
                "variable": {
                    "value": "pair_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[projected_top_span_emb, tf.tile(topic_emb, [k, 1]), projected_top_span_emb * topic_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_396": {
                "variable": {
                    "value": "ant_topic_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "span_topic_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.projection(pair_emb, 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_397": {
                "variable": {
                    "value": "ant_topic_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ant_topic_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(span_topic_scores, top_antecedents)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ant_topic_scores, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_401": {
                "variable": {
                    "value": "topic_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_407": {
                "variable": {
                    "value": "top_antecedent_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.concat([dummy_scores, top_antecedent_scores], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_408": {
                "variable": {
                    "value": "top_antecedent_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(top_span_emb, 1), top_antecedent_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_409": {
                "variable": {
                    "value": "attended_span_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(top_antecedent_weights, 2) * top_antecedent_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_472": {
                "name_or_scope": {
                    "value": "coref_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_477": {
                "variable": {
                    "value": "pair_emb_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[projected_top_span_emb_pool, tf.tile(topic_emb, [self.pool_size, 1]), projected_top_span_emb_pool * topic_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_481": {
                "variable": {
                    "value": "ant_topic_scores_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pool_topic_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.projection(pair_emb_pool, 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents_pool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_482": {
                "variable": {
                    "value": "ant_topic_scores_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ant_topic_scores_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(pool_topic_scores, top_antecedents_pool)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ant_topic_scores_pool, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_486": {
                "variable": {
                    "value": "topic_scores_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_pool, c_pool]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_519": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_538": {
                "name": {
                    "value": "span_width_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['max_span_width'], self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_554": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_580": {
                "x": {
                    "value": "mention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(doc_range >= tf.expand_dims(span_starts, 1), doc_range <= tf.expand_dims(span_ends, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_289": {
                "name": {
                    "value": "antecedent_distance_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_289": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_308": {
                "name": {
                    "value": "antecedent_distance_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_308": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_362": {
                "t": {
                    "value": "topic_prediction - tf.expand_dims(topic_label, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_391": {
                "variable": {
                    "value": "projected_top_span_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(top_span_emb, self.config['topic_hidden_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_411": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(tf.concat([top_span_emb, attended_span_emb], 1), util.shape(top_span_emb, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_476": {
                "variable": {
                    "value": "projected_top_span_emb_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(pool_span_emb, self.config['topic_hidden_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_568": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_579": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_595": {
                "x": {
                    "value": "tf.to_float(distances)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_607": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_612": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "project_span_to_topic",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "topic_score",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_407": {
                "values": {
                    "value": "[dummy_scores, top_antecedent_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_410": {
                "name_or_scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_475": {
                "name_or_scope": {
                    "value": "project_span_to_topic",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_479": {
                "name_or_scope": {
                    "value": "topic_score",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_484": {
                "tensor": {
                    "value": "span_topic_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.projection(pair_emb, 1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "coref_in_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(gold_mentions), dtype=np.bool)",
                            "Call"
                        ],
                        [
                            "tensorized_example[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_538": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_595": {
                "x": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_362": {
                "input": {
                    "value": "topic_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.topic_labels[doc_key]",
                            "Subscript"
                        ],
                        [
                            "np.zeros([self.config['num_lda_topics']])",
                            "Call"
                        ],
                        [
                            "tensorized_example[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_392": {
                "input": {
                    "value": "topic_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.ffnn(doc_feat, num_hidden_layers=self.config['topic_hidden_layers'], hidden_size=self.config['topic_hidden_size'], output_size=self.config['topic_hidden_size'], dropout=self.dropout)",
                            "Call"
                        ],
                        [
                            "util.projection(doc_feat, self.config['topic_hidden_size'])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_408": {
                "input": {
                    "value": "top_span_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_span_emb",
                            "Name"
                        ],
                        [
                            "f * attended_span_emb + (1 - f) * top_span_emb",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_409": {
                "input": {
                    "value": "top_antecedent_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.concat([dummy_scores, top_antecedent_scores], 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_477": {
                "input": {
                    "value": "topic_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "util.ffnn(doc_feat, num_hidden_layers=self.config['topic_hidden_layers'], hidden_size=self.config['topic_hidden_size'], output_size=self.config['topic_hidden_size'], dropout=self.dropout)",
                            "Call"
                        ],
                        [
                            "util.projection(doc_feat, self.config['topic_hidden_size'])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.pool_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_411": {
                "values": {
                    "value": "[top_span_emb, attended_span_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimization.py": {
        "tensorflow": {
            "constant_9": {
                "variable": {
                    "value": "bert_learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bert_init_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_10": {
                "variable": {
                    "value": "task_learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "task_init_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_13": {
                "variable": {
                    "value": "bert_learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "bert_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(value=bert_init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(bert_learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * bert_learning_rate + is_warmup * bert_warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "polynomial_decay_20": {
                "variable": {
                    "value": "task_learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "task_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(value=task_init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(task_learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_81": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "bert_vars + task_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_86": {
                "variable": {
                    "value": "(bert_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "bert_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grads[:len(bert_vars)]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_87": {
                "variable": {
                    "value": "(task_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "task_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grads[len(bert_vars):]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_7": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_31": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "is_warmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_96": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "bert_train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bert_optimizer.apply_gradients(zip(bert_grads, bert_vars), global_step=global_step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "task_train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "task_optimizer.apply_gradients(zip(task_grads, task_vars), global_step=global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_98": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "bert_train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bert_optimizer.apply_gradients(zip(bert_grads, bert_vars), global_step=global_step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "task_train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "task_optimizer.apply_gradients(zip(task_grads, task_vars), global_step=global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_64": {
                "variable": {
                    "value": "task_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "task_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(value=task_init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(task_learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "predict.py": {
        "tensorflow": {
            "ConfigProto_93": {
                "variable": {
                    "value": "configtf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_95": {
                "config": {
                    "value": "configtf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_to_tf.py": {
        "tensorflow": {
            "list_variables_58": {
                "variable": {
                    "value": "tf_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_ckpt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_52": {
                "variable": {
                    "value": "init_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pt_model_with_tf_keys[name].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "array.transpose()",
                            "Call"
                        ],
                        [
                            "pt_model_with_tf_keys[k].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "array.transpose()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_39": {
                "variable": {
                    "value": "pytorch_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "pytorch_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_ckpt",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "FileWriter_45": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.log_dir, args.model)",
                            "Call"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_56": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_59": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.log_dir, args.model)",
                            "Call"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_63": {
                "variable": {
                    "value": "config_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_71": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.log_dir, args.model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_66": {
                "config": {
                    "value": "config_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "tensorflow": {
            "get_variable_112": {
                "variable": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape(current_inputs, 1), output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "output_weights_initializer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_114": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "current_outputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "weights": {
                    "value": "output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', [shape(current_inputs, 1), output_size], initializer=output_weights_initializer)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "output_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', [output_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "hidden_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "linear_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape(current_inputs, 1), output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "hidden_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_130": {
                "variable": {
                    "value": "current_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "current_outputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "weights": {
                    "value": "hidden_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden_weights_{}'.format(i), [shape(current_inputs, 1), hidden_size], initializer=hidden_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('linear_w', [shape(current_inputs, 1), output_size])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "hidden_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden_bias_{}'.format(i), [hidden_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "flattened_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seqlen, emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_156": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(batch_size) * seqlen",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_157": {
                "variable": {
                    "value": "gathered",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flattened_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(emb, [batch_size * seqlen, emb_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Summary_45": {
                "value": {
                    "value": "[tf.Summary.Value(tag=k, simple_value=v) for (k, v) in value_dict.items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_74": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_91": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "current_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f * j + (1 - f) * inputs",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * seqlen, emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "hidden_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_weights_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape(current_inputs, 1), hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "hidden_initializer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "hidden_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_bias_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "current_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(current_inputs, hidden_weights, hidden_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(current_inputs, output_weights, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [batch_size, seqlen, output_size])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seqlen, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "current_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f * j + (1 - f) * inputs",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * seqlen, emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_142": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f * j + (1 - f) * inputs",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [filter_size, input_size, num_filters])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_144": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b))",
                            "Call"
                        ],
                        [
                            "h * self._dropout_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_146": {
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(current_inputs, output_weights, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [batch_size, seqlen, output_size])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "variable": {
                    "value": "gathered",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gathered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(flattened_emb, indices + offset)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(gathered, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_235": {
                "variable": {
                    "value": "self._dropout_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones([batch_size, self.output_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_237": {
                "variable": {
                    "value": "initial_cell_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm_initial_cell_state",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_238": {
                "variable": {
                    "value": "initial_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm_initial_hidden_state",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_239": {
                "variable": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "initial_cell_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lstm_initial_cell_state', [1, self.output_size])",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "initial_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_80": {
                "variable": {
                    "value": "(j, f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "projection(inputs, 2 * shape(inputs, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_82": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(j)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(j, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "current_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.xw_plus_b(current_inputs, hidden_weights, hidden_bias))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current_outputs, dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(current_inputs, hidden_weights, hidden_bias)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, input_size, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_141": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_243": {
                "c": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_259": {
                "variable": {
                    "value": "(i, j, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "projection(tf.concat([inputs, h], 1), 3 * self.output_size, initializer=self._initializer)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_260": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(num_layers)",
                            "Call"
                        ],
                        [
                            "range(num_hidden_layers)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_263": {
                "variable": {
                    "value": "new_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - i) * c + i * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tanh(new_c) * tf.sigmoid(o)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "'highway_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_84": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(j)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(j, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_89": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_106": {
                "x": {
                    "value": "current_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "current_outputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "weights": {
                    "value": "hidden_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden_weights_{}'.format(i), [shape(current_inputs, 1), hidden_size], initializer=hidden_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('linear_w', [shape(current_inputs, 1), output_size])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "hidden_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden_bias_{}'.format(i), [hidden_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "'conv_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_143": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, w, stride=1, padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_235": {
                "shape": {
                    "value": "[batch_size, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "scope or type(self).__name__",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_258": {
                "values": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_262": {
                "x": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - i) * c + i * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_262": {
                "x": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_261": {
                "x": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(j)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(j, dropout)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}