{
    "src/trainers/zsl_trainer.py": {
        "sklearn": {
            "train_test_split_77": {
                "variable": {
                    "value": "(train_idx, val_pseudo_seen_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.config.hp.val_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "self.attrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "attrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(f'{self.config.data.dir}/attrs.npy').astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.ds_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "self.val_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.ds_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "self.test_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.ds_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_206": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.ds_train[:self.config.logging.save_grads.num_points]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.logging.save_grads.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_226": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_251": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.config.hp.optim.scheduler.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.config.hp.optim.scheduler.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_logits(feats, scope='train')",
                            "Call"
                        ],
                        [
                            "self.compute_logits(feats, scope='train')",
                            "Call"
                        ],
                        [
                            "[self.compute_logits(x.to(self.device_name), scope).cpu() for (x, _) in dataloader]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(logits, dim=0)",
                            "Call"
                        ],
                        [
                            "self.run_inference(self.val_dataloader, scope=self.val_scope)",
                            "Call"
                        ],
                        [
                            "self.run_inference(self.test_dataloader, scope='all')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_183": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits.log_softmax(dim=1)",
                            "Call"
                        ],
                        [
                            "logits.log_softmax(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones_like(logits) * other_prob_val",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_185": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_logits(feats, scope='train')",
                            "Call"
                        ],
                        [
                            "self.compute_logits(feats, scope='train')",
                            "Call"
                        ],
                        [
                            "[self.compute_logits(x.to(self.device_name), scope).cpu() for (x, _) in dataloader]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(logits, dim=0)",
                            "Call"
                        ],
                        [
                            "self.run_inference(self.val_dataloader, scope=self.val_scope)",
                            "Call"
                        ],
                        [
                            "self.run_inference(self.test_dataloader, scope='all')",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(f'{self.config.data.dir}/labels.npy').astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_212": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_214": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_logits(feats, scope='train')",
                            "Call"
                        ],
                        [
                            "self.compute_logits(feats, scope='train')",
                            "Call"
                        ],
                        [
                            "[self.compute_logits(x.to(self.device_name), scope).cpu() for (x, _) in dataloader]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(logits, dim=0)",
                            "Call"
                        ],
                        [
                            "self.run_inference(self.val_dataloader, scope=self.val_scope)",
                            "Call"
                        ],
                        [
                            "self.run_inference(self.test_dataloader, scope='all')",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(f'{self.config.data.dir}/labels.npy').astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_148": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'models/checkpoint-{self.config.dataset}-{self.config.hp.compute_hash()}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "clip_grad_norm__197": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.config.hp.grad_clip_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "norm_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if self.config.hp.grad_clip_norm_type == 'l2' else 'inf'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_179": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_logits(feats, scope='train')",
                            "Call"
                        ],
                        [
                            "self.compute_logits(feats, scope='train')",
                            "Call"
                        ],
                        [
                            "[self.compute_logits(x.to(self.device_name), scope).cpu() for (x, _) in dataloader]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(logits, dim=0)",
                            "Call"
                        ],
                        [
                            "self.run_inference(self.val_dataloader, scope=self.val_scope)",
                            "Call"
                        ],
                        [
                            "self.run_inference(self.test_dataloader, scope='all')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/dataloaders/cub.py": {
        "torch": {}
    },
    "src/dataloaders/dataset.py": {
        "torch": {}
    },
    "src/dataloaders/sun.py": {
        "torch": {}
    },
    "src/dataloaders/utils.py": {
        "torch": {
            "DataLoader_137": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[imgs[i] for i in shuffling]",
                            "ListComp"
                        ],
                        [
                            "[x for (x, _) in dataset]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/attrs_head.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.attrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(attrs)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "penultimate_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.hid_dim",
                            "Attribute"
                        ],
                        [
                            "self.attrs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.config.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.early_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.early_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.attrs.shape[1], penultimate_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "final_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.additional_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.additional_hidden_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Identity_51": {
                "variable": {
                    "value": "self.additional_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_61": {
                "variable": {
                    "value": "bn_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_66": {
                "variable": {
                    "value": "dn_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "attrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(attrs - attrs.mean(axis=0, keepdims=True)) / attrs.std(axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.config.attrs_additional_scale * np.sqrt(attrs.shape[1]) * attrs / (attrs ** 2).sum(axis=1, keepdims=True) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "self.attrs if attrs_mask is None else self.attrs[attrs_mask]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Identity_31": {
                "variable": {
                    "value": "self.early_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_38": {
                "variable": {
                    "value": "final_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_55": {
                "variable": {
                    "value": "bn_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "penultimate_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.hid_dim",
                            "Attribute"
                        ],
                        [
                            "self.attrs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "affine": {
                    "value": "self.config.bn_affine",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.attrs.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "penultimate_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.hid_dim",
                            "Attribute"
                        ],
                        [
                            "self.attrs.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_57": {
                "variable": {
                    "value": "bn_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "penultimate_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.hid_dim",
                            "Attribute"
                        ],
                        [
                            "self.attrs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "self.config.bn_affine",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "self.config.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_47": {
                "num_features": {
                    "value": "self.config.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/classifier.py": {
        "torch": {
            "flatten_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "resnet.layer1(x)",
                            "Call"
                        ],
                        [
                            "resnet.layer2(x)",
                            "Call"
                        ],
                        [
                            "resnet.layer3(x)",
                            "Call"
                        ],
                        [
                            "resnet.layer4(x)",
                            "Call"
                        ],
                        [
                            "resnet.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.config.hp.classifier.data_dim, self.config.hp.classifier.hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.data.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "ResNetLastBlock(self.config.input_type, self.config.pretrained)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "self.config.hp.classifier.data_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.hp.classifier.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/layers.py": {
        "torch": {
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.dummy_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_in_c, num_out_c, kernel_size, *conv_args, **conv_kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(num_in_c, num_out_c, kernel_size, *conv_args, **conv_kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(n_out, n_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.mi_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim * x_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_310": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "flatten_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.resnet.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer3(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.attrs.size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_177": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.config.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_331": {
                "n": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "num_in_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "*conv_args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "num_out_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_133": {
                "in_channels": {
                    "value": "num_in_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "*conv_args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "num_out_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_194": {
                "*size": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_264": {
                "tensors": {
                    "value": "[x, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers_sizes[0]",
                            "Subscript"
                        ],
                        [
                            "output_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers_sizes[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_119": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "attrs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "[x, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_319": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_like_163": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.resnet.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/upsampler.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(3, 128, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_24": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.config.hp.upsampler.mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_18": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_20": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/agem_task_trainer.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([x for (x, _) in batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[y for (_, y) in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "ref_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.grad.data.view(-1) for p in self.model.parameters() if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dot_71": {
                "variable": {
                    "value": "dot_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([p.grad.data.view(-1) for p in self.model.parameters() if p.requires_grad])",
                            "Call"
                        ],
                        [
                            "self.project_grad(grad, ref_grad)",
                            "Call"
                        ],
                        [
                            "grad[param.numel():]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "ref_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_ref_grad()",
                            "Call"
                        ],
                        [
                            "torch.cat([p.grad.data.view(-1) for p in self.model.parameters() if p.requires_grad])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_42": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.grad.data.view(-1) for p in self.model.parameters() if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "~output_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/basic_task_trainer.py": {
        "torch": {}
    },
    "src/trainers/dem_task_trainer.py": {
        "torch": {
            "from_numpy_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_37": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pruned_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prune_logits(logits, self.output_mask)",
                            "Call"
                        ],
                        [
                            "prune_logits(self.model(x), self.learned_classes_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_77": {
                "variable": {
                    "value": "downsampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(batch[0])).to(self.device_name)",
                            "Call"
                        ],
                        [
                            "self.transform_em_sample(x, no_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.config.hp.memory.downsample_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_91": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pruned_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prune_logits(logits, self.output_mask)",
                            "Call"
                        ],
                        [
                            "prune_logits(self.model(x), self.learned_classes_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_46": {
                "variable": {
                    "value": "cls_loss_lowres",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pruned_logits_lowres",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prune_logits(logits_lowres, self.output_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_56": {
                "variable": {
                    "value": "logits_matching_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "logits_lowres",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x_lowres)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/ewc_online_task_trainer.py": {
        "torch": {
            "cat_52": {
                "variable": {
                    "value": "weights_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.view(-1) for p in self.model.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dot_53": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(weights_curr - self.weights_prev).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.get_weights_importances()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "self.weights_prev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.data.view(-1) for p in self.model.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "variable": {
                    "value": "prev_fisher",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_fisher",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_importances(self.train_dataloader, prev_trainer.output_mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/trainers/icarl_task_trainer.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_22": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pruned_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prune_logits(logits, self.output_mask)",
                            "Call"
                        ],
                        [
                            "prune_logits(self.model(x), self.learned_classes_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_44": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pruned_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prune_logits(logits, self.output_mask)",
                            "Call"
                        ],
                        [
                            "prune_logits(self.model(x), self.learned_classes_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(extract_features(imgs, self.model.embedder, 256, verbose=False))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "prototype_gold",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(feats).mean(axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_69": {
                "variable": {
                    "value": "feats_selected",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(prototype_gold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "feats_selected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats_selected, feats_remaining[best_idx].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "feats_remaining",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats_remaining[:best_idx], feats_remaining[best_idx + 1:]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/joint_task_trainer.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.task_ds_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda b: list(zip(*b))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/lll_trainer.py": {
        "torch": {
            "DataLoader_184": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.get('inference_batch_size', self.config.hp.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.paths.checkpoints_path, f'{model_name}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "self.config.load_from_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_206": {
                "variable": {
                    "value": "feats_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats_train[idx] for idx in class_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "np.array([x for (x, _) in feats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "prototypes_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_class_centroids(ds_train_feats, self.config.data.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_203": {
                "ndarray": {
                    "value": "np.array([x for (x, _) in ds_train_feats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_213": {
                "ndarray": {
                    "value": "np.array(b)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/mas_task_trainer.py": {
        "torch": {}
    },
    "src/trainers/multi_task_trainer.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.task_ds_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda b: list(zip(*b))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/task_trainer.py": {
        "torch": {
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(targets)).to(self.device_name)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(batch[1])).to(self.device_name)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(y)).to(self.device_name)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y).to(self.device_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_65": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.main_trainer.paths.logs_path, f'task_{self.task_idx}')",
                    "type": "Call",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__69": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.config.hp.clip_grad.value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.hp.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size if replace else min(batch_size, len(dataset))",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda b: list(zip(*b))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(y)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/data_utils.py": {
        "torch": {
            "Subset_31": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[i for (i, y) in enumerate(dataset.labels) if y in subset_labels]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Subset_116": {
                "dataset": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx_to_add",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.sample(class_idx, min(size, len(class_idx)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/losses.py": {
        "torch": {
            "rand_18": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x_real.size(0)] + [1] * (x_real.dim() - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "cosines",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "protos.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "protos.permute(1, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_127": {
                "variable": {
                    "value": "weightedStructureLoss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(normalizedRealEigVals, structureLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_134": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(phi, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_135": {
                "variable": {
                    "value": "SB",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(phi, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "phi.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "symeig_136": {
                "variable": {
                    "value": "(eig_vals, eig_vecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "SB",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(phi, phi.t())",
                            "Call"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_171": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "feats.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_173": {
                "input": {
                    "value": "cov - eye",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "true_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits.log_softmax(dim=self.dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_85": {
                "input": {
                    "value": "torch.sum(-true_dist * logits, dim=self.dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_124": {
                "target": {
                    "value": "realEigVals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fakeEigVals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "torch.mul(fakeEigVecs, realEigVecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_127": {
                "input": {
                    "value": "normalizedRealEigVals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gdpp_normalize_min_max(realEigVals)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "structureLoss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-torch.sum(torch.mul(fakeEigVecs, realEigVecs), 0)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "min_142": {
                "input": {
                    "value": "eig_vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_142": {
                "input": {
                    "value": "eig_vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "-true_dist * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_125": {
                "input": {
                    "value": "fakeEigVecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "realEigVecs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_29": {
                "outputs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "discriminator(interpolations)",
                            "Call"
                        ],
                        [
                            "discriminator(interpolations, y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_real + alpha * (x_fake - x_real)",
                            "BinOp"
                        ],
                        [
                            "interpolations.to(x_real.device)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(outputs.size()).to(interpolations.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_103": {
                "n": {
                    "value": "n_protos",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cosines.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "outputs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/metrics.py": {
        "torch": {
            "cross_entropy_339": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(logits).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.from_numpy(targets).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_339": {
                "ndarray": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(targets)",
                            "Call"
                        ],
                        [
                            "targets[test_seen_idx]",
                            "Subscript"
                        ],
                        [
                            "np.array(targets)",
                            "Call"
                        ],
                        [
                            "np.array(targets)",
                            "Call"
                        ],
                        [
                            "np.array(targets)[data_idx]",
                            "Subscript"
                        ],
                        [
                            "np.array(remap_targets(targets, list(classes)))",
                            "Call"
                        ],
                        [
                            "np.array(remap_targets(targets, task_classes.tolist()))",
                            "Call"
                        ],
                        [
                            "targets[task_samples_idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/model_utils.py": {
        "torch": {}
    },
    "src/utils/plotting.py": {
        "torch": {
            "tensor_13": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "trainer.fixed_noise[:n_samples]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[y] * n_samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/scaling.py": {
        "torch": {
            "tensor_29": {
                "data": {
                    "value": "optimal_scalers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/training_utils.py": {
        "torch": {
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_21": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clf_model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y).to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_32": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "mask_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.nonzero(~output_mask)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_34": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/weights_importance.py": {
        "torch": {
            "zeros_56": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((p.numel() for p in model.parameters()))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "curr_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_grad(p).view(-1) for p in model.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}