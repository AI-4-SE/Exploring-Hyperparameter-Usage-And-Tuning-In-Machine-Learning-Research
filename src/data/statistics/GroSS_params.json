{
    "dataset/cifar10.py": {
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_splits[split](root=root_dir, train=is_train, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.BATCH_SIZE if split == 'train' else cfg.TEST.BATCH_SIZE",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split == 'train'",
                            "Compare"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.SYSTEM.NUM_WORKERS",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "dataset/imagenet.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageNet(root=root_dir, split=split, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.BATCH_SIZE if is_train else cfg.TEST.BATCH_SIZE",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split == 'train'",
                            "Compare"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.SYSTEM.NUM_WORKERS",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "engine/btd.py": {
        "torch": {
            "zeros_like_24": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_39": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "engine/eval.py": {
        "torch": {
            "DataParallel_9": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ],
                        [
                            "model.train()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ],
                        [
                            "model.train()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_39": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ],
                        [
                            "model.train()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ],
                        [
                            "model.train()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_20": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_22": {
                "variable": {
                    "value": "(_, predicted_5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_53": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "engine/train.py": {
        "torch": {
            "load_42": {
                "variable": {
                    "value": "load_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_60": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "out_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.OUT_DIR, str(run_number))",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_84": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_85": {
                "variable": {
                    "value": "optimiser",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.INITIAL_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_38": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': state_dict, 'epoch': epoch, 'optimiser': optimiser, 'scheduler': scheduler}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'decompnet_{}.pth'.format(0))",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'decompnet_{}.pth'.format(epoch + 1))",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'decompnet_high_acc.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "freeze_non_decomposed_layers(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.train()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_81": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'decompnet_{}.pth'.format(0))",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'decompnet_{}.pth'.format(epoch + 1))",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'decompnet_high_acc.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/decomp_resnet.py": {
        "torch": {
            "relu_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_16": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_2(self.conv2_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn2_3(self.conv2_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_4(self.conv2_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_1(self.conv3_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_2(self.conv3_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_3(self.conv3_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_4(self.conv3_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_1(self.conv4_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_2(self.conv4_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_3(self.conv4_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_4(self.conv4_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_1(self.conv5_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_2(self.conv5_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_3(self.conv5_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_4(self.conv5_4(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_2(self.conv2_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn2_3(self.conv2_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_4(self.conv2_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_1(self.conv3_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_2(self.conv3_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_3(self.conv3_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_4(self.conv3_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_1(self.conv4_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_2(self.conv4_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_3(self.conv4_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_4(self.conv4_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_1(self.conv5_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_2(self.conv5_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_3(self.conv5_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_4(self.conv5_4(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_2(self.conv2_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn2_3(self.conv2_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_4(self.conv2_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_1(self.conv3_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_2(self.conv3_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_3(self.conv3_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_4(self.conv3_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_1(self.conv4_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_2(self.conv4_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_3(self.conv4_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_4(self.conv4_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_1(self.conv5_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_2(self.conv5_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_3(self.conv5_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_4(self.conv5_4(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn3_d(self.downsample3(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn4_d(self.downsample4(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn5_d(self.downsample5(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_33": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_2(self.conv2_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn2_3(self.conv2_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_4(self.conv2_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_1(self.conv3_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_2(self.conv3_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_3(self.conv3_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_4(self.conv3_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_1(self.conv4_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_2(self.conv4_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_3(self.conv4_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_4(self.conv4_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_1(self.conv5_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_2(self.conv5_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_3(self.conv5_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_4(self.conv5_4(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_2(self.conv2_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn2_3(self.conv2_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_4(self.conv2_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_1(self.conv3_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_2(self.conv3_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_3(self.conv3_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_4(self.conv3_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_1(self.conv4_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_2(self.conv4_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_3(self.conv4_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_4(self.conv4_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_1(self.conv5_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_2(self.conv5_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_3(self.conv5_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_4(self.conv5_4(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn3_d(self.downsample3(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn4_d(self.downsample4(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn5_d(self.downsample5(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_2(self.conv2_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn2_3(self.conv2_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_4(self.conv2_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_1(self.conv3_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_2(self.conv3_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_3(self.conv3_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_4(self.conv3_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_1(self.conv4_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_2(self.conv4_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_3(self.conv4_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_4(self.conv4_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_1(self.conv5_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_2(self.conv5_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_3(self.conv5_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_4(self.conv5_4(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_2(self.conv2_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn2_3(self.conv2_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_4(self.conv2_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_1(self.conv3_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_2(self.conv3_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_3(self.conv3_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_4(self.conv3_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_1(self.conv4_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_2(self.conv4_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_3(self.conv4_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_4(self.conv4_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_1(self.conv5_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_2(self.conv5_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_3(self.conv5_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_4(self.conv5_4(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn3_d(self.downsample3(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn4_d(self.downsample4(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn5_d(self.downsample5(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2_1(self.conv2_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_2(self.conv2_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn2_3(self.conv2_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn2_4(self.conv2_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_1(self.conv3_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_2(self.conv3_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn3_3(self.conv3_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn3_4(self.conv3_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_1(self.conv4_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_2(self.conv4_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn4_3(self.conv4_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn4_4(self.conv4_4(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_1(self.conv5_1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_2(self.conv5_2(y))",
                            "Call"
                        ],
                        [
                            "self.bn5_3(self.conv5_3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.bn5_4(self.conv5_4(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn3_d(self.downsample3(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn4_d(self.downsample4(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self.bn5_d(self.downsample5(x)) + y",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x + y)",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_72": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_78": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "variable": {
                    "value": "self.bn2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv2_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn2_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.downsample3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn3_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.downsample4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn4_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "variable": {
                    "value": "self.bn4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.bn5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "variable": {
                    "value": "self.bn5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.downsample5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "variable": {
                    "value": "self.bn5_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.conv5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/decomp_vgg.py": {
        "torch": {
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x.view(-1, 512))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x.view(-1, 7 * 7 * 512))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "7 * 7 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_11": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_24": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv3_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_1(x)",
                            "Call"
                        ],
                        [
                            "self.conv5_2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv5_3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.pool5(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self._forward_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 7 * 7 * 512)))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.drop2(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/decompnet.py": {
        "torch": {
            "relu_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x.view(-1, 4 * 64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_131": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_134": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_137": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_93": {
                "variable": {
                    "value": "load_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.LOAD_PATH if load_path is None else load_path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_67": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 4 * 64)))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 4 * 64)))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_73": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 4 * 64)))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_76": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x.view(-1, 4 * 64)))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/series_decomp.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "g_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "g_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(g_w, dim=0).view(bottle_dim[1], -1, k1, k2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "p1_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "p1_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(p1_w, dim=0).unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_30": {
                "variable": {
                    "value": "p1_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "p2_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "p2_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(p2_w, dim=1).unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_31": {
                "variable": {
                    "value": "p2_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_50": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.init.normal_(weight.new_zeros((s, i, 1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s // target_group_size",
                            "BinOp"
                        ],
                        [
                            "in_channels // origin_group_size",
                            "BinOp"
                        ],
                        [
                            "self.bottle_dim[0] // group_size",
                            "BinOp"
                        ],
                        [
                            "self.bottle_dim // group_size",
                            "BinOp"
                        ],
                        [
                            "s // size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_51": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.init.normal_(weight.new_zeros((o, t, 1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s // target_group_size",
                            "BinOp"
                        ],
                        [
                            "in_channels // origin_group_size",
                            "BinOp"
                        ],
                        [
                            "self.bottle_dim[0] // group_size",
                            "BinOp"
                        ],
                        [
                            "self.bottle_dim // group_size",
                            "BinOp"
                        ],
                        [
                            "s // size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_52": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_group_conv(g.detach(), origin_group_size, target_group_size, s)",
                            "Call"
                        ],
                        [
                            "g.view(t, target_group_size, -1)",
                            "Call"
                        ],
                        [
                            "nn.init.normal_(weight.new_zeros((t, size, k1, k2)))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s // target_group_size",
                            "BinOp"
                        ],
                        [
                            "in_channels // origin_group_size",
                            "BinOp"
                        ],
                        [
                            "self.bottle_dim[0] // group_size",
                            "BinOp"
                        ],
                        [
                            "self.bottle_dim // group_size",
                            "BinOp"
                        ],
                        [
                            "s // size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_69": {
                "variable": {
                    "value": "split_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.view(o, i, -1).permute(1, 0, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "filters_per_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // num_groups",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "exp_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "exp_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(exp_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.layer_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ParameterList([nn.Parameter(p1), nn.Parameter(g), nn.Parameter(p2)]) for (p1, g, p2) in layer_weights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "conv2d_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, p1_w, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, g_w, groups=num_groups, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, p2_w, bias=self.bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "p1_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(p1_w, dim=0).unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, p1_w, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, g_w, groups=num_groups, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, p2_w, bias=self.bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "g_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(g_w, dim=0).view(bottle_dim[1], -1, k1, k2)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s // target_group_size",
                            "BinOp"
                        ],
                        [
                            "in_channels // origin_group_size",
                            "BinOp"
                        ],
                        [
                            "self.bottle_dim[0] // group_size",
                            "BinOp"
                        ],
                        [
                            "self.bottle_dim // group_size",
                            "BinOp"
                        ],
                        [
                            "s // size",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, p1_w, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, g_w, groups=num_groups, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, p2_w, bias=self.bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "p2_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(p2_w, dim=1).unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "self.layer_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ParameterList([nn.Parameter(p1), nn.Parameter(g), nn.Parameter(p2)])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "layer.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "to_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_106": {
                "parameters": {
                    "value": "[nn.Parameter(p1), nn.Parameter(g), nn.Parameter(p2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_142": {
                "parameters": {
                    "value": "[nn.Parameter(p1), nn.Parameter(g), nn.Parameter(p2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "data": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.init.normal_(weight.new_zeros((o, t, 1, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_142": {
                "data": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.init.normal_(weight.new_zeros((o, t, 1, 1)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test_config.py": {
        "torch": {}
    },
    "utils/lr_scheduler.py": {
        "torch": {}
    },
    "utils/thop.py": {
        "torch": {
            "randn_45": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}