{
    "docs/conf.py": {
        "sklearn": {}
    },
    "examples/python-guide/advanced_example.py": {
        "sklearn": {
            "mean_squared_error_87": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_test[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bst.predict(X_test)",
                            "Call"
                        ],
                        [
                            "pkl_bst.predict(X_test, num_iteration=7)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_100": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_test[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bst.predict(X_test)",
                            "Call"
                        ],
                        [
                            "pkl_bst.predict(X_test, num_iteration=7)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/python-guide/dask/binary-classification.py": {
        "sklearn": {
            "make_blobs_10": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "centers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/python-guide/dask/multiclass-classification.py": {
        "sklearn": {
            "make_blobs_10": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "centers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/python-guide/dask/prediction.py": {
        "sklearn": {
            "make_regression_11": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_46": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "actuals_local",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dy.compute()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds_local",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.compute()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/python-guide/dask/ranking.py": {
        "sklearn": {
            "load_svmlight_file_14": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(rank_example_dir / 'rank.train')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/python-guide/dask/regression.py": {
        "sklearn": {
            "make_regression_10": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/python-guide/simple_example.py": {
        "sklearn": {
            "mean_squared_error_53": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_test[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_test, num_iteration=gbm.best_iteration)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/python-guide/sklearn_example.py": {
        "sklearn": {
            "GridSearchCV_89": {
                "variable": {
                    "value": "gbm",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lgb.LGBMRegressor(num_leaves=31)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'learning_rate': [0.01, 0.1, 1], 'n_estimators': [20, 40]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_36": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_test[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_test, num_iteration=gbm.best_iteration_)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_test, num_iteration=gbm.best_iteration_)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "python-package/lightgbm/__init__.py": {
        "sklearn": {}
    },
    "python-package/lightgbm/compat.py": {
        "sklearn": {
            "check_consistent_length_89": {
                "*arrays_0": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python-package/lightgbm/dask.py": {
        "sklearn": {}
    },
    "python-package/lightgbm/plotting.py": {
        "sklearn": {}
    },
    "tests/distributed/_test_distributed.py": {
        "sklearn": {
            "make_blobs_47": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "centers": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[-4, -4], [4, 4]]",
                            "List"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_regression_49": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "accuracy_score_183": {
                "y_true": {
                    "value": "clf.label_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_probas > 0.5",
                            "Compare"
                        ],
                        [
                            "reg.predict()",
                            "Call"
                        ],
                        [
                            "np.loadtxt(str(TESTS_DIR / 'predictions.txt'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/python_package_test/test_basic.py": {
        "sklearn": {
            "train_test_split_21": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "*load_breast_cancer(return_X_y=True)",
                    "type": "Starred",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_220": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "*load_breast_cancer(return_X_y=True)",
                    "type": "Starred",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_234": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "*load_breast_cancer(return_X_y=True)",
                    "type": "Starred",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_svmlight_file_248": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(rank_example_dir / 'rank.train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dump_svmlight_file_61": {
                "X": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "[X_test[i * chunk_size:(i + 1) * chunk_size, :] for i in range(X_test.shape[0] // chunk_size + 1)]",
                            "ListComp"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "[X_test[i * chunk_size:(i + 1) * chunk_size, :] for i in range(X_test.shape[0] // chunk_size + 1)]",
                            "ListComp"
                        ]
                    ]
                },
                "y": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dump_svmlight_file_88": {
                "X": {
                    "value": "bad_X_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_test[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dump_svmlight_file_92": {
                "X": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "[X_test[i * chunk_size:(i + 1) * chunk_size, :] for i in range(X_test.shape[0] // chunk_size + 1)]",
                            "ListComp"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "[X_test[i * chunk_size:(i + 1) * chunk_size, :] for i in range(X_test.shape[0] // chunk_size + 1)]",
                            "ListComp"
                        ]
                    ]
                },
                "y": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "zero_based": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python_package_test/test_consistency.py": {
        "sklearn": {
            "load_svmlight_file_29": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(self.path(suffix))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zero_based": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python_package_test/test_dask.py": {
        "sklearn": {
            "make_blobs_156": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "centers": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[-4, -4], [4, 4]]",
                            "List"
                        ],
                        [
                            "[[-4, -4], [4, 4], [-4, 4]]",
                            "List"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_regression_158": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "n_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python_package_test/test_dual.py": {
        "sklearn": {
            "log_loss_25": {
                "variable": {
                    "value": "cpu_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "cpu_bst.predict(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_loss_31": {
                "variable": {
                    "value": "gpu_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gpu_bst.predict(X)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python_package_test/test_engine.py": {
        "sklearn": {
            "train_test_split_63": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_loss_80": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_88": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_loss_109": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_116": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_131": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_159": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.zeros(100)",
                            "Call"
                        ],
                        [
                            "np.ones(100)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, weight, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_187": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.zeros(100)",
                            "Call"
                        ],
                        [
                            "np.ones(100)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, weight, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_222": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.zeros(100)",
                            "Call"
                        ],
                        [
                            "np.ones(100)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, weight, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_257": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.zeros(100)",
                            "Call"
                        ],
                        [
                            "np.ones(100)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, weight, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_293": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.zeros(100)",
                            "Call"
                        ],
                        [
                            "np.ones(100)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, weight, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_333": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.zeros(100)",
                            "Call"
                        ],
                        [
                            "np.ones(100)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, weight, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_373": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.zeros(100)",
                            "Call"
                        ],
                        [
                            "np.ones(100)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, weight, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_413": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.zeros(100)",
                            "Call"
                        ],
                        [
                            "np.ones(100)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, weight, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_420": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_444": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_475": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_svmlight_file_716": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(rank_example_dir / 'rank.train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_svmlight_file_718": {
                "variable": {
                    "value": "(X_test, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(rank_example_dir / 'rank.test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_744": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_780": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_828": {
                "variable": {
                    "value": "(X_train, X_valid, y_train, y_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_881": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_absolute_error_903": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_925": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_absolute_error_944": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_951": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TimeSeriesSplit_1003": {
                "variable": {
                    "value": "tss",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_svmlight_file_1010": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(rank_example_dir / 'rank.train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_1030": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_loss_1062": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "avg_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(preds, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(preds, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_1073": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "avg_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(preds, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(preds, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_1079": {
                "variable": {
                    "value": "(X_train, X_test, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_1113": {
                "variable": {
                    "value": "(X_train, X_test, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_1333": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_multilabel_classification_1350": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_labels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_1356": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_multilabel_classification_1390": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_labels": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "train_test_split_1396": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_1798": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_loss_1807": {
                "variable": {
                    "value": "err_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_loss_1809": {
                "variable": {
                    "value": "new_err_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "new_gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_loss_1823": {
                "variable": {
                    "value": "non_weight_err_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_loss_1837": {
                "variable": {
                    "value": "weight_err_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "new_gbm.predict(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_1961": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_2345": {
                "variable": {
                    "value": "(X_train, X_validation, y_train, y_validation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_loss_2379": {
                "variable": {
                    "value": "logloss_error",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logistic_sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "logistic_sigmoid(booster.predict(X))",
                            "Call"
                        ],
                        [
                            "booster.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X_train)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_2380": {
                "variable": {
                    "value": "rocauc_error",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logistic_sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "logistic_sigmoid(booster.predict(X))",
                            "Call"
                        ],
                        [
                            "booster.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X_train)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_2399": {
                "variable": {
                    "value": "mse_error",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logistic_sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "logistic_sigmoid(booster.predict(X))",
                            "Call"
                        ],
                        [
                            "booster.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X_train)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_2481": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_blobs_2509": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "centers": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[-4, -4], [4, 4], [-4, 4]]",
                            "List"
                        ],
                        [
                            "[[-4, -4], [4, 4], [-4, 4]]",
                            "List"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_blobs_2534": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "centers": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[-4, -4], [4, 4], [-4, 4]]",
                            "List"
                        ],
                        [
                            "[[-4, -4], [4, 4], [-4, 4]]",
                            "List"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_2536": {
                "variable": {
                    "value": "(X_train, X_valid, y_train, y_valid, weight_train, weight_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_2718": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_2719": {
                "variable": {
                    "value": "(X_test1, X_test2, y_test1, y_test2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "73",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_2797": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_loss_2815": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_loss_2820": {
                "variable": {
                    "value": "ret2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm2.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_3001": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(x[1:, :1])",
                            "Call"
                        ],
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3005": {
                "variable": {
                    "value": "err_new",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3019": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(x[1:, :1])",
                            "Call"
                        ],
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(new_x)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3023": {
                "variable": {
                    "value": "err_new",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_3246": {
                "variable": {
                    "value": "(X_train, _, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "*load_breast_cancer(return_X_y=True)",
                    "type": "Starred",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_3258": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "*load_breast_cancer(return_X_y=True)",
                    "type": "Starred",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "average_precision_score_3405": {
                "variable": {
                    "value": "sklearn_ap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_3497": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_absolute_error_3522": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_1172": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_loss_2530": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_label()",
                            "Call"
                        ],
                        [
                            "ds.get_label()",
                            "Call"
                        ],
                        [
                            "ds.get_label()",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logistic_sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "logistic_sigmoid(booster.predict(X))",
                            "Call"
                        ],
                        [
                            "booster.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X_train)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full_like(y, 2)",
                            "Call"
                        ],
                        [
                            "ds.get_weight()",
                            "Call"
                        ],
                        [
                            "np.full_like(y, 2)",
                            "Call"
                        ],
                        [
                            "ds.get_weight()",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_3297": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_3544": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3098": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm3.predict(X_test)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3103": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm4.predict(X_test)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "booster.predict(X, start_iteration=10, num_iteration=-1)",
                            "Call"
                        ],
                        [
                            "booster.predict(X, start_iteration=10, num_iteration=-1, pred_leaf=True)",
                            "Call"
                        ],
                        [
                            "booster.predict(X, start_iteration=10, num_iteration=-1, pred_contrib=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3161": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm1.predict(X_test)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "booster.predict(X, start_iteration=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3182": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm1.predict(X_test)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "booster.predict(X, start_iteration=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_3292": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.zeros(100)",
                            "Call"
                        ],
                        [
                            "np.ones(100)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.train'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, weight, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logistic_sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "logistic_sigmoid(booster.predict(X))",
                            "Call"
                        ],
                        [
                            "booster.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X_train)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_3597": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "baseline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full_like(y, y.mean())",
                            "Call"
                        ],
                        [
                            "np.full_like(y, y.mean())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3649": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "baseline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full_like(y, y.mean())",
                            "Call"
                        ],
                        [
                            "np.full_like(y, y.mean())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3724": {
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(test_data, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "GroupKFold_1024": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_1180": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(*load_breast_cancer(return_X_y=True), test_size=0.1, random_state=2)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm_template.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_loss_2421": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "logistic_sigmoid(cb.predict(X))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_2447": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "cb.predict(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_3160": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm2.predict(X_test)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "booster.predict(X, num_iteration=booster.best_iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3181": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm2.predict(X_test)",
                            "Call"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "booster.predict(X, num_iteration=booster.best_iteration)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3199": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_3220": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "[1, 1, 1, 1, 0, 0, 0, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 1, 1, 0, 0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[0, 1, 0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1, 1, 0, 0]",
                            "List"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.array([0, 1])",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=10, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y[:10]",
                            "Subscript"
                        ],
                        [
                            "Xy[:, 0]",
                            "Subscript"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "np.random.permutation([0, 1] * 150)",
                            "Call"
                        ],
                        [
                            "pd.Series(pd.arrays.SparseArray(np.random.permutation([0, 1] * 150)))",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=2)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "make_multilabel_classification(n_samples=n_samples, sparse=True, n_features=n_features, n_classes=1, n_labels=n_labels)",
                            "Call"
                        ],
                        [
                            "y.flatten()",
                            "Call"
                        ],
                        [
                            "[1] * 25 + [0] * 25",
                            "BinOp"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "scales[0] * x1_positively_correlated_with_y + np.sin(scales[1] * np.pi * x1_positively_correlated_with_y) - scales[2] * x2_negatively_correlated_with_y - np.cos(scales[3] * np.pi * x2_negatively_correlated_with_y) - scales[4] * x3_negatively_correlated_with_y - np.cos(scales[5] * np.pi * x3_negatively_correlated_with_y) + zs",
                            "BinOp"
                        ],
                        [
                            "trainset_constrained_model.label",
                            "Attribute"
                        ],
                        [
                            "np.arange(0, 100)",
                            "Call"
                        ],
                        [
                            "np.random.choice([0, 1], 100)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=2, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_digits(n_class=3, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_blobs(n_samples=1000, centers=centers, random_state=42)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.arange(0, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.arange(0.01, 1, 0.01)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "np.random.random(100)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "np.random.rand(10)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "2 * x + np.random.normal(0, 0.1, len(x))",
                            "BinOp"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "load_iris(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "y.copy()",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_breast_cancer(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "load_boston(return_X_y=True)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "df['x1'] * (df['x2'] + df['x3'] + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "df['x1'] * df['x2'] + df['x3'] * (1 + df['x4'])",
                            "BinOp"
                        ],
                        [
                            "y.fillna(0)",
                            "Call"
                        ],
                        [
                            "np.array([1023.8, 1024.6, 1024.4, 1023.8, 1022.0, 1014.4], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "make_synthetic_regression()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X)",
                            "Call"
                        ],
                        [
                            "gbm.predict(X_train)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "est.predict(x)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(all_pred)",
                            "Call"
                        ],
                        [
                            "pred + booster.predict(X, start_iteration=start_iter, num_iteration=step, raw_score=True)",
                            "BinOp"
                        ],
                        [
                            "est.predict(X)",
                            "Call"
                        ],
                        [
                            "bst.predict(X, num_iteration=i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_error_899": {
                "y_true": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "d.get_label()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python_package_test/test_plotting.py": {
        "sklearn": {
            "train_test_split_20": {
                "*arrays_0": {
                    "value": "*load_breast_cancer(return_X_y=True)",
                    "type": "Starred",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python_package_test/test_sklearn.py": {
        "sklearn": {
            "train_test_split_106": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_loss_109": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.test'))",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(xendcg_example_dir / 'rank.test'))",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.test'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict_proba(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_116": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_119": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.test'))",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(xendcg_example_dir / 'rank.test'))",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.test'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_127": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_svmlight_file_140": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(rank_example_dir / 'rank.train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_svmlight_file_141": {
                "variable": {
                    "value": "(X_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(rank_example_dir / 'rank.test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_svmlight_file_164": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(xendcg_example_dir / 'rank.train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_svmlight_file_165": {
                "variable": {
                    "value": "(X_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(xendcg_example_dir / 'rank.test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_svmlight_file_189": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(rank_example_dir / 'rank.train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_svmlight_file_190": {
                "variable": {
                    "value": "(X_test, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "str(rank_example_dir / 'rank.test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_203": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_230": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_233": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.test'))",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(xendcg_example_dir / 'rank.test'))",
                            "Call"
                        ],
                        [
                            "load_svmlight_file(str(rank_example_dir / 'rank.test'))",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=42)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.1, random_state=42)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "gbm.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_240": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_253": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_263": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StackingClassifier_266": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimators": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[('gbm1', lgb.LGBMClassifier(n_estimators=3)), ('gbm2', lgb.LGBMClassifier(n_estimators=3))]",
                            "List"
                        ]
                    ]
                },
                "final_estimator": {
                    "value": "lgb.LGBMClassifier(n_estimators=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "passthrough": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_284": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StackingRegressor_287": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "estimators": {
                    "value": "regressors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[('gbm1', lgb.LGBMRegressor(n_estimators=3)), ('gbm2', lgb.LGBMRegressor(n_estimators=3))]",
                            "List"
                        ]
                    ]
                },
                "final_estimator": {
                    "value": "lgb.LGBMRegressor(n_estimators=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "passthrough": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_304": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_305": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_320": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "lgb.LGBMClassifier(**params)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "grid_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(boosting_type=['rf', 'gbdt'], n_estimators=[4, 6], reg_alpha=[0.01, 0.005])",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_338": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_340": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomizedSearchCV_351": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "lgb.LGBMClassifier(**params)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_distributions": {
                    "value": "param_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(boosting_type=['rf', 'gbdt'], n_estimators=[np.random.randint(low=3, high=10) for i in range(n_iter)], reg_alpha=[np.random.uniform(low=0.01, high=0.06) for i in range(n_iter)])",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "n_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_multilabel_classification_369": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_372": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiOutputClassifier_374": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "lgb.LGBMClassifier(n_estimators=10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_389": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiOutputRegressor_391": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "lgb.LGBMRegressor(n_estimators=10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "make_multilabel_classification_404": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_406": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ClassifierChain_409": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "lgb.LGBMClassifier(n_estimators=10)",
                    "type": "Call",
                    "possible_values": []
                },
                "order": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 0, 1]",
                            "List"
                        ],
                        [
                            "[2, 0, 1]",
                            "List"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_426": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RegressorChain_428": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "lgb.LGBMRegressor(n_estimators=10)",
                    "type": "Call",
                    "possible_values": []
                },
                "order": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 0, 1]",
                            "List"
                        ],
                        [
                            "[2, 0, 1]",
                            "List"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_446": {
                "variable": {
                    "value": "gbm_clone",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "gbm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lgb.LGBMClassifier(n_estimators=50, verbose=-1)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(n_estimators=50, verbose=-1)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(n_estimators=50, verbose=-1)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRanker(n_estimators=50)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRanker(n_estimators=50, objective='rank_xendcg', random_state=5, n_jobs=1)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRanker(n_estimators=5, **{alias: [1, 2, 3, 9]})",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(n_estimators=5, **{alias: obj})",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(n_estimators=50, verbose=-1, objective=objective_ls)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(n_estimators=50, verbose=-1, objective=logregobj)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(boosting_type='dart', n_estimators=50)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(n_estimators=10, verbose=-1)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(n_estimators=10, objective=custom_asymmetric_obj, verbose=-1, importance_type='split')",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(n_estimators=5)",
                            "Call"
                        ],
                        [
                            "lgb.sklearn.LGBMClassifier(n_estimators=10).fit(X, y)",
                            "Call"
                        ],
                        [
                            "lgb.train({'objective': 'multiclass', 'num_class': 3, 'verbose': -1}, lgb.Dataset(X_train, y_train))",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(n_estimators=10, verbose=-1)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(**params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(metric='mape', **params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(metric='None', **params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(**params).fit(eval_metric='mape', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(metric='gamma', **params).fit(eval_metric='mape', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(metric='gamma', **params).fit(eval_metric=['l2', 'mape'], **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(**params_classification).fit(eval_metric=['fair', 'error'], **params_fit_classification)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', **params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', metric='mape', **params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', metric='None', **params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', **params).fit(eval_metric='mape', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', metric='gamma', **params).fit(eval_metric='mape', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', metric='gamma', **params).fit(eval_metric=['l2', 'mape'], **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, **params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, metric='mape', **params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, metric=['l1', 'gamma'], **params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, metric='None', **params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, **params).fit(eval_metric='mape', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, metric='mape', **params).fit(eval_metric='gamma', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, metric=['l1', 'gamma'], **params).fit(eval_metric='l2', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, metric=['l1', 'gamma'], **params).fit(eval_metric=['l2', 'mape'], **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(**params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(metric='mape', **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(metric=['l1', 'gamma'], **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(metric='None', **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', metric='mape', **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', metric=['l1', 'gamma'], **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective='regression_l1', metric='None', **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, metric='mape', **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(objective=custom_dummy_obj, metric=['l2', 'mape'], **params).fit(eval_metric=constant_metric, **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(**params).fit(eval_metric='binary_error', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(**params).fit(eval_metric='binary_error', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(objective='ovr', **params).fit(eval_metric='binary_error', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(**params).fit(eval_metric='multi_error', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(objective=custom_dummy_obj, **params).fit(eval_metric='multi_logloss', **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(**params).fit(eval_metric=[constant_metric, decreasing_metric], **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(**params).fit(eval_metric=[constant_metric, decreasing_metric, 'fair'], **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(**params).fit(eval_metric=[], **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(**params).fit(eval_metric=['fair', 'error'], **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(**params).fit(eval_metric=['fair', 'error', None], **params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(**params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(**params).fit(**params_fit)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(n_estimators=10, class_weight='balanced', verbose=-1)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(n_estimators=5).fit(X_train, y_train, eval_set=(X_test, y_test), init_model=init_gbm)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMRegressor(n_estimators=n_estimators).fit(X, y)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(n_estimators=2, verbose=-1, n_jobs=-2).fit(X, y)",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier(n_estimators=2, verbose=-1, n_jobs=None).fit(X, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_461": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_509": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_641": {
                "variable": {
                    "value": "(X_train, X_test, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "iris.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "iris.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_720": {
                "variable": {
                    "value": "(X_train, X_test, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_755": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_1106": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_1107": {
                "variable": {
                    "value": "(X_test1, X_test2, y_test1, y_test2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "72",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_1187": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_1220": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "parametrize_with_checks_1258": {
                "estimators": {
                    "value": "[lgb.LGBMClassifier(), lgb.LGBMRegressor()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "make_blobs_1292": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "centers": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[-4, -4], [4, 4], [-4, 4]]",
                            "List"
                        ],
                        [
                            "[[-4, -4], [4, 4], [-4, 4]]",
                            "List"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_blobs_1315": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "centers": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[-4, -4], [4, 4], [-4, 4]]",
                            "List"
                        ],
                        [
                            "[[-4, -4], [4, 4], [-4, 4]]",
                            "List"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_loss_1311": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + np.exp(-y_pred))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + np.exp(-y_pred_raw))",
                            "BinOp"
                        ],
                        [
                            "reg.predict(X_test)",
                            "Call"
                        ],
                        [
                            "reg.predict(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_proba(X)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(nrows)",
                            "Call"
                        ],
                        [
                            "np.full_like(y, 2) if use_weight else None",
                            "IfExp"
                        ],
                        [
                            "np.full_like(y, 2)",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_89": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + np.exp(-y_pred))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + np.exp(-y_pred_raw))",
                            "BinOp"
                        ],
                        [
                            "reg.predict(X_test)",
                            "Call"
                        ],
                        [
                            "reg.predict(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_proba(X)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_is_fitted_1255": {
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "variable"
                        ],
                        [
                            "models",
                            "variable"
                        ],
                        [
                            "lgb.LGBMClassifier(**params)",
                            "Call"
                        ],
                        [
                            "task_to_model_factory[task](n_estimators=10, num_leaves=15, verbose=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_is_fitted_1249": {
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "variable"
                        ],
                        [
                            "models",
                            "variable"
                        ],
                        [
                            "lgb.LGBMClassifier(**params)",
                            "Call"
                        ],
                        [
                            "task_to_model_factory[task](n_estimators=10, num_leaves=15, verbose=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/python_package_test/utils.py": {
        "sklearn": {
            "check_random_state_79": {
                "variable": {
                    "value": "rnd_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}