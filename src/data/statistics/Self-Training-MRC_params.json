{
    "bert_model/bert_cls_hierarchical.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.extra_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "[doc_vec, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_81": {
                "input": {
                    "value": "yesno_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([doc_vec, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_84": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), sentence_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_88": {
                "input": {
                    "value": "extra_yesno_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.extra_predictor(cls_h.squeeze(1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_cls_negative.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_84": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_87": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_for_race.py": {
        "torch": {
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "sentence_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence_mask.new_ones(batch, 1), sentence_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "sentence_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence_sim.new_zeros(batch, 1), sentence_sim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_385": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_486": {
                "variable": {
                    "value": "sentence_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence_mask.new_ones(batch, 1), sentence_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_487": {
                "variable": {
                    "value": "sentence_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence_sim.new_zeros(batch, 1), sentence_sim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_513": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_642": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_37": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_115": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_208": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_306": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_441": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_564": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_698": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "kl_div_120": {
                "variable": {
                    "value": "kl_sentence_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_alpha * true_prob_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "sentence_prob * true_prob_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_213": {
                "variable": {
                    "value": "kl_sentence_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_alpha * true_prob_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "sentence_prob * true_prob_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_124": {
                "variable": {
                    "value": "sentence_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_masked_sentence_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rep_layers.masked_log_softmax(sentence_sim.squeeze(1), sentence_mask)",
                            "Call"
                        ],
                        [
                            "rep_layers.masked_log_softmax(sentence_sim.squeeze(1), sentence_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids.view(batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_224": {
                "variable": {
                    "value": "sentence_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_masked_sentence_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rep_layers.masked_log_softmax(sentence_sim.squeeze(1), sentence_mask)",
                            "Call"
                        ],
                        [
                            "rep_layers.masked_log_softmax(sentence_sim.squeeze(1), sentence_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids.view(batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_300": {
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_434": {
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_558": {
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_691": {
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_294": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_428": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_552": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_685": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_for_race_roberta.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_87": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_81": {
                "input": {
                    "value": "choice_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.hidden_size * 2, config.hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_99": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_185": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_279": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_270": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_103": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "rep_layers.masked_log_softmax(sentence_sim, sentence_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_189": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "rep_layers.masked_log_softmax(sentence_sim, sentence_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_for_sentence_pretrain.py": {
        "torch": {
            "nll_loss_87": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_half.py": {
        "torch": {
            "Linear_51": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.split_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_106": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_110": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "-torch.log(sentence_prob + 1e-15)",
                            "UnaryOp"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_121": {
                "input": {
                    "value": "sentence_prob + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_hard.py": {
        "torch": {
            "Linear_42": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_245": {
                "variable": {
                    "value": "_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expanded_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "expanded_label.masked_fill(ignore_mask, 0)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_261": {
                "variable": {
                    "value": "_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expanded_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "expanded_label.masked_fill(ignore_mask, 0)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_263": {
                "variable": {
                    "value": "_final_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_414": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_503": {
                "variable": {
                    "value": "_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expanded_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "expanded_label.masked_fill(ignore_mask, 0)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_519": {
                "variable": {
                    "value": "_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expanded_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "expanded_label.masked_fill(ignore_mask, 0)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_521": {
                "variable": {
                    "value": "_final_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_90": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_220": {
                "variable": {
                    "value": "_distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "_probability",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_softmax(_similarity, _mask)",
                            "Call"
                        ],
                        [
                            "rep_layers.masked_softmax(_similarity, _mask)",
                            "Call"
                        ],
                        [
                            "_probability.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_231": {
                "variable": {
                    "value": "_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_similarity",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_280": {
                "variable": {
                    "value": "_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_361": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_477": {
                "variable": {
                    "value": "_distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "_probability",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_softmax(_similarity, _mask)",
                            "Call"
                        ],
                        [
                            "rep_layers.masked_softmax(_similarity, _mask)",
                            "Call"
                        ],
                        [
                            "_probability.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_481": {
                "variable": {
                    "value": "_sample_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_sample_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_distribution.sample((self.sample_steps,))",
                            "Call"
                        ],
                        [
                            "_distribution.sample((self.sample_steps,))",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "_similarity.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_489": {
                "variable": {
                    "value": "_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_similarity",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_537": {
                "variable": {
                    "value": "_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q], dim=2)).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([h, q_vec], dim=2)).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_107": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_357": {
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_378": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_94": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_463": {
                "input": {
                    "value": "_yesno_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "[h, q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "[h, q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_278": {
                "tensors": {
                    "value": "[h, q_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_501": {
                "tensors": {
                    "value": "[h, q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_516": {
                "tensors": {
                    "value": "[h, q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_535": {
                "tensors": {
                    "value": "[h, q_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_hard_race.py": {
        "torch": {
            "Linear_47": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_241": {
                "variable": {
                    "value": "_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([h, q], dim=2)).view(label.size(0), self.num_choices, self.sample_steps).transpose(1, 2).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([h, q], dim=2)).view(label.size(0), self.num_choices, self.sample_steps).transpose(1, 2).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([h, q_vec], dim=2)).view(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expanded_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_260": {
                "variable": {
                    "value": "_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([h, q], dim=2)).view(label.size(0), self.num_choices, self.sample_steps).transpose(1, 2).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([h, q], dim=2)).view(label.size(0), self.num_choices, self.sample_steps).transpose(1, 2).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([h, q_vec], dim=2)).view(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expanded_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(1).expand(-1, self.sample_steps).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_262": {
                "variable": {
                    "value": "_final_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([h, q], dim=2)).view(label.size(0), self.num_choices, self.sample_steps).transpose(1, 2).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([h, q], dim=2)).view(label.size(0), self.num_choices, self.sample_steps).transpose(1, 2).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([h, q_vec], dim=2)).view(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_96": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1)).reshape(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nll_loss_100": {
                "variable": {
                    "value": "sentence_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rep_layers.masked_log_softmax(sentence_sim.squeeze(1), sentence_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids.view(batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_209": {
                "variable": {
                    "value": "_distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "_probability",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rep_layers.masked_softmax(_similarity, _mask)",
                            "Call"
                        ],
                        [
                            "_probability.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_214": {
                "variable": {
                    "value": "_sample_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_sample_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_distribution.sample((self.sample_steps,))",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "_similarity.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_224": {
                "variable": {
                    "value": "_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_similarity",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_281": {
                "variable": {
                    "value": "_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(torch.cat([h, q], dim=2)).view(label.size(0), self.num_choices, self.sample_steps).transpose(1, 2).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([h, q], dim=2)).view(label.size(0), self.num_choices, self.sample_steps).transpose(1, 2).reshape(-1, self.num_choices)",
                            "Call"
                        ],
                        [
                            "self.classifier(torch.cat([h, q_vec], dim=2)).view(-1, self.num_choices)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_113": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_279": {
                "tensors": {
                    "value": "[h, q_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "[h, q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "[h, q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_multiple.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "sentence_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence_mask.new_ones(batch, 1), sentence_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "sentence_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence_sim.new_zeros(batch, 1), sentence_sim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_84": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_225": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_219": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_221": {
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_negative.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_93": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_97": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "-torch.log(sentence_prob + 1e-15)",
                            "UnaryOp"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_108": {
                "input": {
                    "value": "sentence_prob + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_roberta.py": {
        "torch": {
            "Linear_41": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_89": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_220": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_213": {
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_single.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_105": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_109": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "-torch.log(sentence_prob + 1e-15)",
                            "UnaryOp"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_120": {
                "input": {
                    "value": "sentence_prob + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_single_rnn.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_107": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_111": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "-torch.log(sentence_prob + 1e-15)",
                            "UnaryOp"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_122": {
                "input": {
                    "value": "sentence_prob + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_hierarchical_twoview.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.yesno_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_105": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_215": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_337": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_206": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[sentence_hidden, que_vec.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_333": {
                "input": {
                    "value": "yesno_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.yesno_predictor(torch.cat([sentence_hidden, que_vec.squeeze(1)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_109": {
                "input": {
                    "value": "log_sentence_sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_log_softmax(sentence_sim.squeeze(1), 1 - sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "rep_layers.masked_log_softmax(sentence_sim, sentence_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "rep_layers.masked_log_softmax(sentence_sim, sentence_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_mlp.py": {
        "torch": {
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.answer_choice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_45": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.answer_choice(self.dropout(sequence_output[:, 0]))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "bert_model/bert_sentence.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.sent_label_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.sent_label_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_70": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_label.view(batch, max_sen_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "sentence_labels.reshape(batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_36": {
                "input": {
                    "value": "sent_label.view(batch * max_sen_num, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "sentence_labels.reshape(batch * max_sen_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/bert_transformer_hierarchical.py": {
        "torch": {
            "cross_entropy_43": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_score(que, doc).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label.reshape(batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_101": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_159": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_214": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_269": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_324": {
                "variable": {
                    "value": "choice_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ],
                        [
                            "self.predictor(torch.cat([que, attended_doc], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "answer_choice",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "[que, attended_doc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "[que, attended_doc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_206": {
                "tensors": {
                    "value": "[que, attended_doc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "[que, attended_doc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_316": {
                "tensors": {
                    "value": "[que, attended_doc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_104": {
                "input": {
                    "value": "attention_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_score(que, doc).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_162": {
                "input": {
                    "value": "attention_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_score(que, doc).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_217": {
                "input": {
                    "value": "attention_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_score(que, doc).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_272": {
                "input": {
                    "value": "attention_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_score(que, doc).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_327": {
                "input": {
                    "value": "attention_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_score(que, doc).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(que, doc)",
                            "Call"
                        ],
                        [
                            "attention_score.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sentence_ids",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/layers.py": {
        "torch": {
            "ModuleList_57": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "2 * hidden_size",
                            "BinOp"
                        ],
                        [
                            "input_size + add_feat",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "x1_rep.bmm(x2_rep.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.scoring(x1, x2)",
                            "Call"
                        ],
                        [
                            "scores + extra_scores",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "2 * hidden_size",
                            "BinOp"
                        ],
                        [
                            "input_size + add_feat",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_266": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "x1_rep.bmm(x2_rep.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.scoring(x1, x2)",
                            "Call"
                        ],
                        [
                            "scores + extra_scores",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.func_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size * 4, input_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_283": {
                "variable": {
                    "value": "self.func_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size * 4, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x - y, x * y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_338": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "len2",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn_score.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_356": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_360": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden_state.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_409": {
                "variable": {
                    "value": "unmasked_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_411": {
                "variable": {
                    "value": "doc_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_type_ids[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_449": {
                "variable": {
                    "value": "unmasked_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_451": {
                "variable": {
                    "value": "doc_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_type_ids[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_515": {
                "variable": {
                    "value": "unmasked_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_517": {
                "variable": {
                    "value": "doc_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_type_ids[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_615": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x1_rep.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_621": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x1_rep.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_30": {
                "input": {
                    "value": "(1 - p) * (x.new_zeros(x.size(0), x.size(2)) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "dropout(x, p=my_dropout_p, training=self.training)",
                            "Call"
                        ],
                        [
                            "dropout(x, p=my_dropout_p, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_98": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "2 * hidden_size",
                            "BinOp"
                        ],
                        [
                            "input_size + add_feat",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "2 * hidden_size",
                            "BinOp"
                        ],
                        [
                            "input_size + add_feat",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "2 * hidden_size",
                            "BinOp"
                        ],
                        [
                            "input_size + add_feat",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "2 * hidden_size",
                            "BinOp"
                        ],
                        [
                            "input_size + add_feat",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "2 * hidden_size",
                            "BinOp"
                        ],
                        [
                            "input_size + add_feat",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "2 * hidden_size",
                            "BinOp"
                        ],
                        [
                            "input_size + add_feat",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_216": {
                "variable": {
                    "value": "x1_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x1",
                            "Name"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "x1_rep * self.diagonal.expand_as(x1_rep)",
                            "BinOp"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "self.linear1(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_217": {
                "variable": {
                    "value": "x2_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x2",
                            "Name"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, dim)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear2(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_222": {
                "variable": {
                    "value": "x1_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x1",
                            "Name"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "x1_rep * self.diagonal.expand_as(x1_rep)",
                            "BinOp"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "self.linear1(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_223": {
                "variable": {
                    "value": "x2_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x2",
                            "Name"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, dim)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear2(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_262": {
                "variable": {
                    "value": "diag_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.data.new(scores.size(1)).zero_() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_262": {
                "variable": {
                    "value": "diag_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_304": {
                "variable": {
                    "value": "self.a_fuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size * 2, attention_hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "variable": {
                    "value": "self.b_fuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size * 2, attention_hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_652": {
                "input": {
                    "value": "bi_attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_bi_attn_score(que, doc)",
                            "Call"
                        ],
                        [
                            "get_bi_attn_score(que, doc)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_input, additional_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_170": {
                "variable": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, 1) / hidden_size ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_204": {
                "variable": {
                    "value": "x1_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x1",
                            "Name"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "x1_rep * self.diagonal.expand_as(x1_rep)",
                            "BinOp"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "self.linear1(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_205": {
                "variable": {
                    "value": "x2_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x2",
                            "Name"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, dim)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear2(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_280": {
                "in_features": {
                    "value": "input_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "2 * hidden_size",
                            "BinOp"
                        ],
                        [
                            "input_size + add_feat",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_284": {
                "in_features": {
                    "value": "input_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_304": {
                "in_features": {
                    "value": "input_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_304": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "input_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_305": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_330": {
                "tensors": {
                    "value": "[ex_doc, doc_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[ex_que, que_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_670": {
                "input": {
                    "value": "p + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "bert_model/rep_layers.py": {
        "torch": {
            "zeros_like_623": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_629": {
                "variable": {
                    "value": "final_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.rnn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[rnn_cls(input_size=input_size, hidden_size=hidden_size, bidirectional=bidirectional)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_114": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden_state.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_attention_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_heads_attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "dropout_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_softmax(query, x_mask)",
                            "Call"
                        ],
                        [
                            "masked_softmax(query, x_mask)",
                            "Call"
                        ],
                        [
                            "masked_softmax(query, x_mask)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "my_dropout_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p",
                            "Name"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_attention_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_heads_attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_293": {
                "variable": {
                    "value": "dropout_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masked_softmax(query, x_mask)",
                            "Call"
                        ],
                        [
                            "masked_softmax(query, x_mask)",
                            "Call"
                        ],
                        [
                            "masked_softmax(query, x_mask)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "my_dropout_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p",
                            "Name"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_attention_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_heads_attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_345": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_386": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log().to(dtype=vector.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "x1_rep.size(2)",
                            "Call"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "x1_rep.size(2)",
                            "Call"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_431": {
                "input": {
                    "value": "vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log().to(dtype=vector.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "x1_rep.size(2)",
                            "Call"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_446": {
                "variable": {
                    "value": "unmasked_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_448": {
                "variable": {
                    "value": "doc_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_type_ids[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_509": {
                "variable": {
                    "value": "unmasked_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_511": {
                "variable": {
                    "value": "doc_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_type_ids[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_613": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bernoulli_32": {
                "input": {
                    "value": "(1 - p) * (x.new_zeros(x.size(0), x.size(2)) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_43": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(x, p=my_dropout_p, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "outputs_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_188": {
                "variable": {
                    "value": "x1_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x1",
                            "Name"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "x1_rep * self.diagonal.expand_as(x1_rep)",
                            "BinOp"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "self.linear1(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_189": {
                "variable": {
                    "value": "x2_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x2",
                            "Name"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, dim)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear2(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_194": {
                "variable": {
                    "value": "x1_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x1",
                            "Name"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "x1_rep * self.diagonal.expand_as(x1_rep)",
                            "BinOp"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "self.linear1(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_195": {
                "variable": {
                    "value": "x2_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x2",
                            "Name"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, dim)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear2(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_212": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.attention_dim_per_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.attention_dim_per_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_605": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, 1) / hidden_size ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "x1_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x1",
                            "Name"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "x1_rep * self.diagonal.expand_as(x1_rep)",
                            "BinOp"
                        ],
                        [
                            "self.linear(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ],
                        [
                            "self.linear1(x1_rep.contiguous().view(-1, dim)).view(batch, word_num1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x1_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_177": {
                "variable": {
                    "value": "x2_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x2",
                            "Name"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, dim)",
                            "Call"
                        ],
                        [
                            "self.linear(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ],
                        [
                            "self.linear2(x2_rep.contiguous().view(-1, dim)).view(batch, word_num2, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "F.relu(x2_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_144": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_142": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "general_util/dist_scalar_mix/race.py": {
        "torch": {
            "softmax_31": {
                "input": {
                    "value": "torch.Tensor(mixed_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_31": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "general_util/utils.py": {
        "torch": {
            "softmax_511": {
                "variable": {
                    "value": "attn_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "attention_matrix.detach().cpu()",
                            "Call"
                        ],
                        [
                            "softmax(attn_matrix, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_520": {
                "variable": {
                    "value": "col_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "len1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_524": {
                "variable": {
                    "value": "row_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "len2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_634": {
                "start": {
                    "value": "gold_labels.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "label_main.py": {
        "torch": {
            "TensorDataset_323": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_324": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_325": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_426": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_177": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_180": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_195": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_257": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_343": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_348": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_437": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_438": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_439": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_480": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_481": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_482": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_179": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_197": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_273": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_345": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_347": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_418": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_496": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "TensorDataset_306": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_307": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_308": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_422": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_168": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_169": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_172": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_187": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_242": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_332": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_337": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_433": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_434": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_435": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_475": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_476": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_477": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_171": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_189": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_258": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_334": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_336": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_414": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main2_0.6.2_topk.py": {
        "torch": {
            "TensorDataset_323": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_324": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_325": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_201": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_202": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_205": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_220": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_276": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_356": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_361": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_467": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_468": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_469": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_538": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_539": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_540": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_204": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_222": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_314": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, output_model_file, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_358": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_360": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_483": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__380": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__383": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main2_0.6.2_topk_predict_sentences.py": {
        "torch": {
            "TensorDataset_323": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_324": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_325": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_201": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_202": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_205": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_220": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_538": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_539": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_540": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_204": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_222": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main2_multi_choice_top_k_evidence.py": {
        "torch": {
            "TensorDataset_305": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_306": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_307": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_185": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_186": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_189": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_204": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_259": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_338": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_343": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_546": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_547": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_548": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_188": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_206": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_297": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, output_model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, output_model_file, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_340": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_342": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_451": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_452": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_453": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__363": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__366": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_0.6.2.py": {
        "torch": {
            "TensorDataset_319": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_320": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_321": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_440": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_177": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_178": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_181": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_196": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_251": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_348": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_353": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_451": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_452": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_453": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_493": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_494": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_495": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_180": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_198": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_267": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_350": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_352": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_432": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_509": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_0.6.2_multiple.py": {
        "torch": {
            "TensorDataset_314": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_315": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_316": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_438": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_177": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_178": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_181": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_196": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_248": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_346": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_351": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_449": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_450": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_451": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_535": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_536": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_537": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_180": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_198": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_264": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_348": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_350": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_551": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_429": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_0.6.2_topk.py": {
        "torch": {
            "TensorDataset_321": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_322": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_323": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_445": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_182": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_183": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_186": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_201": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_254": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_353": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_358": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_456": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_457": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_458": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_527": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_528": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_529": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_574": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_575": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_576": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_185": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_203": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_270": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_355": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_357": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_543": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_590": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_436": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_0.6.2_topk_predict_sentences.py": {
        "torch": {
            "TensorDataset_321": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_322": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_323": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_445": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_183": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_184": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_187": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_202": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_529": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_530": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_531": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_186": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_204": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_0.6.2_topk_sent_pretrain.py": {
        "torch": {
            "TensorDataset_337": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_338": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_339": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_184": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_185": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_188": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_203": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_268": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_355": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_360": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_187": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_205": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_284": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_357": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_359": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_428": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_1.0.py": {
        "torch": {
            "TensorDataset_311": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_312": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_313": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_436": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_165": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_166": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_169": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_239": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_337": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_342": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_447": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_448": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_449": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_489": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_490": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_491": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_168": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_186": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_255": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_339": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_341": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_428": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_463": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__361": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__364": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_multi_choice.py": {
        "torch": {
            "TensorDataset_299": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_300": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_301": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_479": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_165": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_166": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_169": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_236": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_331": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_336": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_421": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_490": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_491": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_492": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_168": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_186": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_252": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_333": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_335": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_432": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_433": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_434": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_400": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_406": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_411": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_multi_choice_multiple_evidence.py": {
        "torch": {
            "TensorDataset_301": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_302": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_303": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_481": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_167": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_168": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_171": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_186": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_238": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_333": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_338": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_423": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_557": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_558": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_559": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_170": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_188": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_254": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_335": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_337": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_434": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_435": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_436": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_402": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_408": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_413": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_multi_choice_top_k_evidence.py": {
        "torch": {
            "TensorDataset_310": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_311": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_312": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_490": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_173": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_174": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_177": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_244": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_342": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_347": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_432": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_537": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_538": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_539": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_176": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_194": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_260": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_344": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_346": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_443": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_444": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_445": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_460": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_411": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_417": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_422": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_multi_choice_top_k_evidence_amp.py": {
        "torch": {
            "TensorDataset_313": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_314": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_315": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_495": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_173": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_174": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_177": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_244": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_345": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_350": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_437": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_542": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_543": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_544": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_176": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_194": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_260": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_347": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_349": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_448": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_449": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_450": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_558": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_416": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_422": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_427": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, output_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, f'pytorch_model_{eval_epoch}.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_loss_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_x2.py": {
        "torch": {
            "TensorDataset_308": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_309": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_310": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_426": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_168": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_169": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_172": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_187": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_242": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_334": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_339": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_437": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_438": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_439": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_479": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_480": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_481": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_171": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_189": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_258": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_336": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_338": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_418": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "predict_sentence_main0.6.2.py": {
        "torch": {
            "TensorDataset_314": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_315": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_316": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_435": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_172": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_173": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_191": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_446": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_447": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_448": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_175": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_193": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "predict_sentence_main2_0.6.2.py": {
        "torch": {
            "TensorDataset_317": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_318": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_319": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_195": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_196": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_199": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_214": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_461": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_462": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_463": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_198": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_216": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pretrain_attention_main.py": {
        "torch": {
            "TensorDataset_291": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_292": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_380": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_153": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_154": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_157": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_172": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_227": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_305": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_310": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_391": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_392": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_393": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_156": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_174": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_243": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_307": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_309": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_373": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reader/boolq_reader.py": {
        "torch": {
            "tensor_512": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_513": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_514": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_515": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_516": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/coqa_reader.py": {
        "torch": {
            "tensor_709": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_710": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_711": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_712": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_713": {
                "variable": {
                    "value": "all_sentence_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.sentence_id for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_714": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/coqa_reader_top_k.py": {
        "torch": {
            "tensor_704": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_705": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_706": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_707": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_709": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_717": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_718": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_719": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_720": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_722": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/coqa_reader_top_k_roberta.py": {
        "torch": {
            "tensor_704": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_705": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_706": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_707": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_709": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/coqa_sentence_reader.py": {
        "torch": {
            "tensor_652": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_653": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_654": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_655": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_656": {
                "variable": {
                    "value": "all_sentence_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.sentence_id for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_657": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/coqa_sep_reader.py": {
        "torch": {
            "tensor_514": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_515": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_516": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_517": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_518": {
                "variable": {
                    "value": "all_sentence_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.sentence_id for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_519": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/coqa_split.py": {
        "torch": {
            "tensor_258": {
                "variable": {
                    "value": "ques_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.ques_input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "variable": {
                    "value": "ques_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.ques_input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_273": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "ques_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/fever_reader.py": {
        "torch": {
            "arange_294": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/msmarco_cb_reader.py": {
        "torch": {
            "tensor_425": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_426": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_427": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_428": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_429": {
                "variable": {
                    "value": "all_sentence_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.sentence_id for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_430": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/msmarco_cb_topk_reader.py": {
        "torch": {
            "tensor_447": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_449": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_452": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/msmarco_reader.py": {
        "torch": {
            "tensor_419": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_421": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_422": {
                "variable": {
                    "value": "all_answer_choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_423": {
                "variable": {
                    "value": "all_sentence_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.sentence_id for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_424": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/multi_rc_multiple_reader.py": {
        "torch": {
            "arange_367": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/multi_rc_topk_reader.py": {
        "torch": {
            "arange_423": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_441": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/multi_rc_topk_reader_evidence_search.py": {
        "torch": {
            "arange_456": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_474": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/multi_rc_topk_reader_evidence_search_extended.py": {
        "torch": {
            "arange_456": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_474": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/multi_rc_topk_reader_roberta.py": {
        "torch": {
            "arange_425": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/race_multiple_reader.py": {
        "torch": {
            "arange_333": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/race_multiple_reader_roberta.py": {
        "torch": {
            "arange_343": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reader/race_reader.py": {
        "torch": {
            "zeros_351": {
                "variable": {
                    "value": "all_sentence_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "all_input_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_sentence_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "max(max_sentence_num, max(map(lambda x: len(x['sentence_span_list']), choice_features)))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_352": {
                "variable": {
                    "value": "all_sentence_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_sentence_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(all_input_ids.size(0), all_input_ids.size(1), max_sentence_num).fill_(-1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_353": {
                "variable": {
                    "value": "all_sentence_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "all_input_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_362": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_296": {
                "variable": {
                    "value": "sentence_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_output['sentence_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_309": {
                "variable": {
                    "value": "masked_sentence_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_output['sentence_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_310": {
                "variable": {
                    "value": "sentence_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_output['sentence_logits']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "reader/reader_w_evidence.py": {
        "torch": {}
    },
    "reader/squad_reader.py": {
        "torch": {
            "tensor_329": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "all_sentence_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.sentence_id for f in all_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_333": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "simple_main.py": {
        "torch": {
            "TensorDataset_299": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_300": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_301": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_400": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_161": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_162": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_165": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_180": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_235": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_319": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_324": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_411": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_412": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_413": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_454": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_455": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_456": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_164": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_182": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_251": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_321": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_323": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_392": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transfer_main.py": {
        "torch": {
            "TensorDataset_350": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_351": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_352": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_463": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_169": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_170": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_173": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_188": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_281": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_474": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_475": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_476": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_521": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_522": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_523": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_172": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_190": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_297": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, **model_params)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "initialize_model(args.bert_name, args.model_file, state_dict=model_state_dict, **model_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_374": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_366": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_376": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_378": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_368": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_370": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_379": {
                "dataset": {
                    "value": "train_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_455": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_537": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_371": {
                "dataset": {
                    "value": "train_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ],
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}