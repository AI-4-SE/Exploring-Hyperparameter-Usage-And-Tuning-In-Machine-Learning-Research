{
    "src/my_utils.py": {
        "sklearn": {
            "accuracy_score_215": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "lbls.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "balanced_accuracy_score_216": {
                "variable": {
                    "value": "bacc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "lbls.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "confusion_matrix_258": {
                "variable": {
                    "value": "p_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "lbls[p_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[p_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "confusion_matrix_259": {
                "variable": {
                    "value": "up_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "lbls[up_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[up_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "balanced_accuracy_score_135": {
                "variable": {
                    "value": "bacc_arr[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "lbls.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_248": {
                "y_true": {
                    "value": "lbls[p_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[p_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_249": {
                "y_true": {
                    "value": "lbls[up_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[up_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "balanced_accuracy_score_251": {
                "y_true": {
                    "value": "lbls[p_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[p_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "balanced_accuracy_score_252": {
                "y_true": {
                    "value": "lbls[up_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[up_idx].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_47": {
                "variable": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{data_dir}/{data}_pytorch/{data}_train.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{data_dir}/{data}_pytorch/{data}_val.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "test_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{data_dir}/{data}_pytorch/{data}_test.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "x_priv_fav",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.normal(mean=1, std=1, size=(n_priv_fav, 1)), torch.ones(n_priv_fav, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "x_unpriv_fav",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.normal(mean=1, std=1, size=(n_unpriv_fav, 1)), torch.zeros(n_unpriv_fav, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x_priv_unfav",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.normal(mean=0, std=1, size=(n_priv_unfav, 1)), torch.ones(n_priv_unfav, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x_unpriv_unfav",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.normal(mean=0, std=1, size=(n_unpriv_unfav, 1)), torch.zeros(n_unpriv_unfav, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "synth_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_priv_fav, x_unpriv_fav, x_priv_unfav, x_unpriv_unfav)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "synth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(n_priv_fav + n_unpriv_fav), torch.zeros(n_priv_unfav + n_unpriv_unfav))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "synth_metas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(n_priv_fav), torch.zeros(n_unpriv_fav), torch.ones(n_priv_unfav), torch.zeros(n_unpriv_unfav))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "tr_dem_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds[p_fav_idx][1][:sample_sizes[0]], tr_ds[p_unfav_idx][1][:sample_sizes[1]], tr_ds[up_fav_idx][1][:sample_sizes[2]], tr_ds[up_unfav_idx][1][:sample_sizes[3]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "tr_dem_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds[p_fav_idx][2][:sample_sizes[0]], tr_ds[p_unfav_idx][2][:sample_sizes[1]], tr_ds[up_fav_idx][2][:sample_sizes[2]], tr_ds[up_unfav_idx][2][:sample_sizes[3]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "tr_dem_metas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds[p_fav_idx][3][:sample_sizes[0]], tr_ds[p_unfav_idx][3][:sample_sizes[1]], tr_ds[up_fav_idx][3][:sample_sizes[2]], tr_ds[up_unfav_idx][3][:sample_sizes[3]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "tr_nondem_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds[p_fav_idx][1][sample_sizes[0]:], tr_ds[p_unfav_idx][1][sample_sizes[1]:], tr_ds[up_fav_idx][1][sample_sizes[2]:], tr_ds[up_unfav_idx][1][sample_sizes[3]:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "tr_nondem_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds[p_fav_idx][2][sample_sizes[0]:], tr_ds[p_unfav_idx][2][sample_sizes[1]:], tr_ds[up_fav_idx][2][sample_sizes[2]:], tr_ds[up_unfav_idx][2][sample_sizes[3]:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "tr_nondem_metas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds[p_fav_idx][3][sample_sizes[0]:], tr_ds[p_unfav_idx][3][sample_sizes[1]:], tr_ds[up_fav_idx][3][sample_sizes[2]:], tr_ds[up_unfav_idx][3][sample_sizes[3]:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "bacc_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "linspace_132": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "argmax_137": {
                "variable": {
                    "value": "best_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bacc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_thresh)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_209": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([], device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, logits))",
                            "Call"
                        ],
                        [
                            "get_logits(model, dataloader, device)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "lbls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([], device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((lbl, lbls))",
                            "Call"
                        ],
                        [
                            "get_logits(model, dataloader, device)",
                            "Call"
                        ],
                        [
                            "metas",
                            "variable"
                        ],
                        [
                            "lbls",
                            "Method Argument"
                        ],
                        [
                            "lbls",
                            "Method Argument"
                        ],
                        [
                            "lbls",
                            "Method Argument"
                        ],
                        [
                            "lbls",
                            "Method Argument"
                        ],
                        [
                            "lbls",
                            "Method Argument"
                        ],
                        [
                            "lbls",
                            "Method Argument"
                        ],
                        [
                            "lbls",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_236": {
                "variable": {
                    "value": "fav_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss[up_fav_idx].mean() - loss[p_fav_idx].mean()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_239": {
                "variable": {
                    "value": "unfav_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss[up_unfav_idx].mean() - loss[p_unfav_idx].mean()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "pr_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pr_yhat0_and_s0.reshape(1), pr_yhat0_and_s1.reshape(1), pr_yhat1_and_s0.reshape(1), pr_yhat1_and_s1.reshape(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "pr_marginals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pr_yhat0 * pr_s0.reshape(1), pr_yhat0 * pr_s1.reshape(1), pr_yhat1 * pr_s0.reshape(1), pr_yhat1 * pr_s1.reshape(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "ds.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ds.inputs, ds.metas.unsqueeze(dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_473": {
                "variable": {
                    "value": "pr_marginals_given_y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pr_yhat0_given_y0 * pr_s0_given_y0, pr_yhat0_given_y0 * pr_s1_given_y0, pr_yhat1_given_y0 * pr_s0_given_y0, pr_yhat1_given_y0 * pr_s1_given_y0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_481": {
                "variable": {
                    "value": "pr_joint_given_y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pr_yhat0_given_s0_and_y0 * pr_s0_given_y0, pr_yhat0_given_s1_and_y0 * pr_s1_given_y0, pr_yhat1_given_s0_and_y0 * pr_s0_given_y0, pr_yhat1_given_s1_and_y0 * pr_s1_given_y0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_489": {
                "variable": {
                    "value": "pr_marginals_given_y1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pr_yhat0_given_y1 * pr_s0_given_y1, pr_yhat0_given_y1 * pr_s1_given_y1, pr_yhat1_given_y1 * pr_s0_given_y1, pr_yhat1_given_y1 * pr_s1_given_y1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_496": {
                "variable": {
                    "value": "pr_joint_given_y1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pr_yhat0_given_s0_and_y1 * pr_s0_given_y1, pr_yhat0_given_s1_and_y1 * pr_s1_given_y1, pr_yhat1_given_s0_and_y1 * pr_s0_given_y1, pr_yhat1_given_s1_and_y1 * pr_s1_given_y1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_161": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "len(weights) // 4 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lbl, lbls)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "metas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meta, metas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "kl_div_370": {
                "input": {
                    "value": "inp.log()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_and_144": {
                "input": {
                    "value": "p_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metas == 1",
                            "Compare"
                        ],
                        [
                            "metas == 1",
                            "Compare"
                        ],
                        [
                            "metas == 1",
                            "Compare"
                        ],
                        [
                            "ds.metas == 1",
                            "Compare"
                        ]
                    ]
                },
                "other": {
                    "value": "unfav_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lbls == 0",
                            "Compare"
                        ],
                        [
                            "lbls == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "logical_and_145": {
                "input": {
                    "value": "up_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metas == 0",
                            "Compare"
                        ],
                        [
                            "metas == 0",
                            "Compare"
                        ],
                        [
                            "metas == 0",
                            "Compare"
                        ],
                        [
                            "ds.metas == 0",
                            "Compare"
                        ]
                    ]
                },
                "other": {
                    "value": "unfav_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lbls == 0",
                            "Compare"
                        ],
                        [
                            "lbls == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "logical_and_164": {
                "variable": {
                    "value": "p_fav_idx_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_fav_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tr_ds.metas == 1) & (tr_ds.labels == 1)",
                            "BinOp"
                        ],
                        [
                            "torch.logical_and(p_idx, fav_idx)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(probs >= thresholds[i]) & (probs < thresholds[i + 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_165": {
                "variable": {
                    "value": "p_unfav_idx_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_unfav_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tr_ds.metas == 1) & (tr_ds.labels == 0)",
                            "BinOp"
                        ],
                        [
                            "torch.logical_and(p_idx, unfav_idx)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(probs >= thresholds[i]) & (probs < thresholds[i + 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_166": {
                "variable": {
                    "value": "up_fav_idx_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_fav_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tr_ds.metas == 0) & (tr_ds.labels == 1)",
                            "BinOp"
                        ],
                        [
                            "torch.logical_and(up_idx, fav_idx)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(probs >= thresholds[i]) & (probs < thresholds[i + 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_167": {
                "variable": {
                    "value": "up_unfav_idx_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_unfav_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tr_ds.metas == 0) & (tr_ds.labels == 0)",
                            "BinOp"
                        ],
                        [
                            "torch.logical_and(up_idx, unfav_idx)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ],
                        [
                            "get_masks(lbls, metas)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(probs >= thresholds[i]) & (probs < thresholds[i + 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_179": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_356": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_64": {
                "mean": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_priv_fav, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "n_priv_fav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(ds_size // 2 * pr_priv_fav)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_65": {
                "mean": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_unpriv_fav, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "n_unpriv_fav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(ds_size // 2 * pr_unpriv_fav)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_67": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_priv_unfav, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "n_priv_unfav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(ds_size // 2 * (1 - pr_priv_fav))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_68": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_unpriv_unfav, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "n_unpriv_unfav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(ds_size // 2 * (1 - pr_unpriv_fav))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "n_priv_fav + n_unpriv_fav",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "n_priv_unfav + n_unpriv_unfav",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "n_priv_unfav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(ds_size // 2 * (1 - pr_priv_fav))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "n_unpriv_unfav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(ds_size // 2 * (1 - pr_unpriv_fav))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_401": {
                "input": {
                    "value": "pr_s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_idx.sum().float() / len(metas)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_504": {
                "input": {
                    "value": "pr_s1_given_y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_stats[1]",
                            "Subscript"
                        ],
                        [
                            "(p_unfav_idx.sum().float() / unfav_idx.sum()).reshape(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_505": {
                "input": {
                    "value": "pr_s1_given_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_stats[3]",
                            "Subscript"
                        ],
                        [
                            "p_fav_idx.sum().float() / fav_idx.sum().reshape(1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/baseline_ARL.py": {
        "torch": {
            "SummaryWriter_32": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "f'logs/{f_name}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "tr_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tr_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ],
                        [
                            "ut.get_dem_data(tr_ds, dem_size=0, dem_ratio=args.dem_ratio, equal_dist=args.equal_dist)",
                            "Call"
                        ],
                        [
                            "ut.add_random_noise_to_labels(tr_ds, noise_ratio=args.label_noise)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "v_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "v_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "te_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "te_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "opt_learner",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_learner.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "opt_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_adv.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "tr_ds.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.inputs, tr_dem_ds.inputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "tr_ds.metas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.metas, tr_dem_ds.metas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "tr_ds.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.labels, tr_dem_ds.labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "adv_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_inp, tr_lbl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_79": {
                "variable": {
                    "value": "tr_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tr_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_learner(tr_inp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tr_lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tr_lbl.to(args.device, non_blocking=True).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/baseline_classic.py": {
        "torch": {
            "SummaryWriter_34": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "f'logs/{f_name}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "tr_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tr_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ],
                        [
                            "ut.get_dem_data(tr_ds, dem_size=0, dem_ratio=args.dem_ratio, equal_dist=args.equal_dist)",
                            "Call"
                        ],
                        [
                            "ut.add_random_noise_to_labels(tr_ds, noise_ratio=args.label_noise)",
                            "Call"
                        ],
                        [
                            "fair.fill_demographics(model, args, tr_loader)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "v_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "v_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "te_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "te_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.outer_wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "dem_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tr_dem_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_dem_data(tr_ds, dem_size=0, dem_ratio=args.dem_ratio, equal_dist=args.equal_dist)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dem_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.outer_wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "tr_ds.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.inputs, tr_dem_ds.inputs.to(args.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "tr_ds.metas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.metas, tr_dem_ds.metas.to(args.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "tr_ds.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.labels, tr_dem_ds.labels.to(args.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "tr_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tr_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ],
                        [
                            "ut.get_dem_data(tr_ds, dem_size=0, dem_ratio=args.dem_ratio, equal_dist=args.equal_dist)",
                            "Call"
                        ],
                        [
                            "ut.add_random_noise_to_labels(tr_ds, noise_ratio=args.label_noise)",
                            "Call"
                        ],
                        [
                            "fair.fill_demographics(model, args, tr_loader)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_133": {
                "variable": {
                    "value": "tr_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tr_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tr_inp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tr_lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tr_lbl.to(args.device, non_blocking=True).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "tr_ds.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.inputs, tr_dem_ds.inputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "tr_ds.metas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.metas, tr_dem_ds.metas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "tr_ds.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.labels, tr_dem_ds.labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_86": {
                "variable": {
                    "value": "dem_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dem_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(dem_inp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "dem_meta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dem_meta.to(args.device, non_blocking=True).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/bifair_with_iter.py": {
        "torch": {
            "SummaryWriter_32": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "f'logs/{f_name}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "tr_ds.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.inputs, tr_dem_ds.inputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "tr_ds.metas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.metas, tr_dem_ds.metas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "tr_ds.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_ds.labels, tr_dem_ds.labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "tr_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tr_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ],
                        [
                            "ut.get_dem_data(tr_ds, dem_size=0, dem_ratio=args.dem_ratio, equal_dist=args.equal_dist)",
                            "Call"
                        ],
                        [
                            "ut.add_random_noise_to_labels(tr_ds, noise_ratio=args.label_noise)",
                            "Call"
                        ],
                        [
                            "ut.add_random_noise_to_dems(tr_ds, noise_ratio=args.dem_noise)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "v_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "v_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "te_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "te_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_data(args.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.tr_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "dem_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tr_dem_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ut.get_dem_data(tr_ds, dem_size=0, dem_ratio=args.dem_ratio, equal_dist=args.equal_dist)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dem_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.inner_wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_68": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tr_ds)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "opt_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.outer_wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_100": {
                "variable": {
                    "value": "dem_util_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dem_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmodel(dem_inp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "dem_lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dem_lbl.to(args.device, non_blocking=True).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_88": {
                "variable": {
                    "value": "tr_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tr_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmodel(tr_inp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tr_lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tr_lbl.to(args.device, non_blocking=True).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grad_105": {
                "outputs": {
                    "value": "dem_total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dem_fair_loss + args.util_lambda * dem_util_loss.mean()",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(len(tr_ds), 1, requires_grad=False, device=args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/fair_algs.py": {
        "torch": {
            "zeros_45": {
                "variable": {
                    "value": "fair_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_margins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                }
            },
            "linspace_46": {
                "variable": {
                    "value": "roc_margins",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "min(threshold, 1 - threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_margins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                }
            },
            "argmin_63": {
                "variable": {
                    "value": "best_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fair_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_margins)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_68": {
                "variable": {
                    "value": "low_conf_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "te_probs >= threshold - best_roc_margin",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "te_probs <= threshold + best_roc_margin",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_71": {
                "variable": {
                    "value": "low_conf_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low_conf_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_and(v_probs >= threshold - roc_margin, v_probs <= threshold + roc_margin)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(te_probs >= threshold - best_roc_margin, te_probs <= threshold + best_roc_margin)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_metas == 1",
                            "Compare"
                        ],
                        [
                            "te_metas == 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "logical_and_72": {
                "variable": {
                    "value": "low_conf_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low_conf_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_and(v_probs >= threshold - roc_margin, v_probs <= threshold + roc_margin)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(te_probs >= threshold - best_roc_margin, te_probs <= threshold + best_roc_margin)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "up_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_metas == 0",
                            "Compare"
                        ],
                        [
                            "te_metas == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "logical_and_50": {
                "variable": {
                    "value": "low_conf_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_probs >= threshold - roc_margin",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "v_probs <= threshold + roc_margin",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_52": {
                "variable": {
                    "value": "low_conf_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low_conf_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_and(v_probs >= threshold - roc_margin, v_probs <= threshold + roc_margin)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(te_probs >= threshold - best_roc_margin, te_probs <= threshold + best_roc_margin)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_metas == 1",
                            "Compare"
                        ],
                        [
                            "te_metas == 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "logical_and_53": {
                "variable": {
                    "value": "low_conf_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low_conf_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_and(v_probs >= threshold - roc_margin, v_probs <= threshold + roc_margin)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(te_probs >= threshold - best_roc_margin, te_probs <= threshold + best_roc_margin)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "up_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_metas == 0",
                            "Compare"
                        ],
                        [
                            "te_metas == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_inp, inputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_lbl, lbls)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "metas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_pred_meta, metas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/my_models.py": {
        "torch": {
            "AdaptiveAvgPool2d_9": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/options.py": {
        "torch": {
            "device_71": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}