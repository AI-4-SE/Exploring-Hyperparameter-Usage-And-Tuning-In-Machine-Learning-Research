{
    "evolution/discriminator.py": {
        "sklearn": {
            "accuracy_score_87": {
                "y_true": {
                    "value": "np.zeros(fake_decision.size()[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "fake_decision.cpu().data.numpy().flatten() > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "accuracy_score_88": {
                "y_true": {
                    "value": "np.ones(real_decision.size()[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "real_decision.cpu().data.numpy().flatten() > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "rand_133": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_data.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_140": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools.cuda(self(interpolates))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ],
                        [
                            "autograd.Variable(interpolates, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "tools.cuda(torch.ones(disc_interpolates.size()))",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_data.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_67": {
                "*size": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_106": {
                "input": {
                    "value": "(real_decision - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "fake_decision ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_141": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_74": {
                "input": {
                    "value": "fake_decision.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/generator.py": {
        "sklearn": {
            "accuracy_score_86": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools.cuda(Variable(torch.ones(images.size(0))))",
                            "Call"
                        ],
                        [
                            "np.ones(images.size(0))",
                            "Call"
                        ],
                        [
                            "tools.cuda(Variable(torch.ones(images.size(0))))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "decision.cpu() > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_136": {
                "variable": {
                    "value": "Generator.fid_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "noise_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator_noise.pt'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_114": {
                "mode": {
                    "value": "not volatile",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_143": {
                "obj": {
                    "value": "Generator.fid_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "noise_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator_noise.pt'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_97": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_115": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.noise_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "(fake_decision - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_79": {
                "input": {
                    "value": "decision.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/gan_train.py": {
        "torch": {
            "SequentialSampler_40": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.gan.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.SequentialSampler(self.train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_43": {
                "variable": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "validation_indexes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "self.validation_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.gan.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.SubsetRandomSampler(validation_indexes)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.gan.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evolution/genes/conv2d.py": {
        "torch": {
            "Conv2d_39": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools.resize_activations(self.module.weight, module.weight.size())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "evolution/genes/deconv2d.py": {
        "torch": {
            "Parameter_79": {
                "variable": {
                    "value": "layer.module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools.resize_activations(self.module.module.weight, layer.module.weight.size())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "evolution/genes/deconv2d_upsample.py": {
        "torch": {
            "Upsample_18": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ZeroPad2d_19": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "*args": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/genes/dropout.py": {
        "torch": {
            "Dropout_20": {
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/genes/dropout2d.py": {
        "torch": {
            "Dropout2d_12": {
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/genes/layer.py": {
        "torch": {
            "Sequential_68": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout2d_67": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/genes/layer2d.py": {
        "torch": {
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/genes/linear.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/genes/optimizer.py": {
        "torch": {
            "Adam_16": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "phenotype.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.optimizer.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_18": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "phenotype.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.optimizer.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_20": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "phenotype.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.optimizer.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_22": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "phenotype.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.optimizer.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/layers/convupsample.py": {
        "torch": {
            "ConvTranspose2d_16": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.has_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/layers/fadein.py": {
        "torch": {
            "add_16": {
                "input": {
                    "value": "x[0].mul(1.0 - self.alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x[1].mul(self.alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/layers/minibatch_stddev.py": {
        "torch": {
            "sqrt_23": {
                "input": {
                    "value": "torch.mean((x - torch.mean(x, **kwargs)) ** 2, **kwargs) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_40": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adjusted_std(x, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(vals, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "vals.expand(*target_shape)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(vals, 2, keepdim=True), 3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(torch.mean(x, 2, keepdim=True), 3, keepdim=True), 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([self.adjusted_std(x)])",
                            "Call"
                        ],
                        [
                            "vals.view(self.n, self.shape[1] / self.n, self.shape[2], self.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.mean(vals, 0, keepdim=True).view(1, self.n, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "[x, vals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_44": {
                "input": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adjusted_std(x, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(vals, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "vals.expand(*target_shape)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(vals, 2, keepdim=True), 3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(torch.mean(x, 2, keepdim=True), 3, keepdim=True), 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([self.adjusted_std(x)])",
                            "Call"
                        ],
                        [
                            "vals.view(self.n, self.shape[1] / self.n, self.shape[2], self.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.mean(vals, 0, keepdim=True).view(1, self.n, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_59": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adjusted_std(x, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(vals, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "vals.expand(*target_shape)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(vals, 2, keepdim=True), 3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(torch.mean(x, 2, keepdim=True), 3, keepdim=True), 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([self.adjusted_std(x)])",
                            "Call"
                        ],
                        [
                            "vals.view(self.n, self.shape[1] / self.n, self.shape[2], self.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.mean(vals, 0, keepdim=True).view(1, self.n, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/layers/pixelwise_norm.py": {
        "torch": {
            "sqrt_12": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_12": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/layers/reshape.py": {
        "torch": {}
    },
    "evolution/layers/wscale.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gain / math.sqrt(fan)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "evolution/phenotype.py": {
        "torch": {
            "Sequential_189": {
                "variable": {
                    "value": "current_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_41": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_43": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "self.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_214": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "self.input_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "int(np.prod(self.input_shape[1:]))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/fid/fid_score.py": {
        "torch": {
            "from_numpy_103": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch, batch, batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_117": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/fid/inception.py": {
        "torch": {
            "ModuleList_60": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_69": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_78": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_102": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/generative_score.py": {
        "torch": {
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/rmse_score.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_images + list(images.numpy())",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(train_images)",
                            "Call"
                        ],
                        [
                            "train_images[:sample_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MSELoss_25": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss(generated_images, train_images)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_evolution.py": {
        "torch": {
            "randn_21": {
                "*size": {
                    "value": "input_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "int(np.prod(input_shape[1:]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_38": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_53": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_62": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_74": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_84": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1 * 32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_91": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_170": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "144",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_218": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_288": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "out.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_104": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_121": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_139": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_154": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_296": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_319": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_344": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_379": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_390": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_400": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_410": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_420": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_gan.py": {
        "torch": {
            "randn_26": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/folder.py": {
        "torch": {}
    },
    "util/inception_score.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cifar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.CIFAR10(root='data/CIFAR10', download=True, transform=transforms.Compose([transforms.Scale(32), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_32": {
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x, x, x), 1)",
                            "Call"
                        ],
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/stats.py": {
        "torch": {
            "is_available_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "(test_images[k, :].data.cpu().numpy().reshape(self.input_shape) + 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_allocated_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_cached_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_cached_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/tensor_constants.py": {
        "torch": {
            "tensor_4": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_5": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "util/tools.py": {
        "torch": {
            "save_10": {
                "obj": {
                    "value": "discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/D_epoch_%d' % (out_dir, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_11": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/G_epoch_%d' % (out_dir, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_80": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[:, :so[1]]",
                            "Subscript"
                        ],
                        [
                            "v[:so[0], :]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(v, kernel_size=ks, stride=ks, ceil_mode=False, padding=0, count_include_pad=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(v, scale_factor=so[2] // si[2], mode='nearest', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, z], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, z], 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(si[2] // so[2], si[3] // so[3])",
                            "Tuple"
                        ]
                    ]
                },
                "stride": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(si[2] // so[2], si[3] // so[3])",
                            "Tuple"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_93": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[:, :so[1]]",
                            "Subscript"
                        ],
                        [
                            "v[:so[0], :]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(v, kernel_size=ks, stride=ks, ceil_mode=False, padding=0, count_include_pad=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(v, scale_factor=so[2] // si[2], mode='nearest', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, z], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, z], 0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "so[2] // si[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[v.shape[0], so[1] - si[1]] + so[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[so[0] - si[0], v.shape[1]] + so[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}