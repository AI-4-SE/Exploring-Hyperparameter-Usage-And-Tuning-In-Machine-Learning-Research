{
    "analyzer.py": {
        "tensorflow": {
            "DEFINE_string_14": {
                "name": {
                    "value": "dir_to_wav",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/wav",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Dir to *.wav",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_15": {
                "name": {
                    "value": "dir_to_bin",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/bin",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Dir to output *.bin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_16": {
                "name": {
                    "value": "dir_to_features",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../emotion_features",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Dir to emotion features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_17": {
                "name": {
                    "value": "fs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Global sampling frequency",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_18": {
                "name": {
                    "value": "f0_ceil",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Global f0 ceiling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_88": {
                "filename": {
                    "value": "join(dir_to_wav, '*', '*', '*.wav')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_153": {
                "device_name": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_155": {
                "variable": {
                    "value": "files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "string_input_producer_156": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "files",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gfile.Glob(file_pattern)",
                            "Call"
                        ],
                        [
                            "tf.gfile.Glob(file_pattern)",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLengthRecordReader_159": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RECORD_BYTES",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "decode_raw_161": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(value, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, [FEAT_DIM])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(value, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, [-1, FEAT_DIM])",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(value, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, [FEAT_DIM])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(value, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, [-1, FEAT_DIM])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FEAT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_179": {
                "variable": {
                    "value": "f0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value[-259]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_203": {
                "device_name": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_205": {
                "variable": {
                    "value": "files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "string_input_producer_207": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "files",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gfile.Glob(file_pattern)",
                            "Call"
                        ],
                        [
                            "tf.gfile.Glob(file_pattern)",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "WholeFileReader_208": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_raw_211": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(value, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, [FEAT_DIM])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(value, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, [-1, FEAT_DIM])",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(value, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, [FEAT_DIM])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(value, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, [-1, FEAT_DIM])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, FEAT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MakeDirs_94": {
                "dirname": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "join(dir_to_bin, d, s)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_154": {
                "name": {
                    "value": "InputSpectralFrame",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value[:SP_DIM]",
                            "Subscript"
                        ],
                        [
                            "normalizer.forward_process(feature)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [1, SP_DIM, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [SP_DIM, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, SP_DIM, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_batch_188": {
                "tensors": {
                    "value": "[feature, speaker, f0]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_after_dequeue",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1536",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_204": {
                "name": {
                    "value": "InputPipline",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_132": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - self.xmin) / self.xscale",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value[:SP_DIM]",
                            "Subscript"
                        ],
                        [
                            "normalizer.forward_process(feature)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [1, SP_DIM, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [SP_DIM, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[SP_DIM, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "build.py": {
        "tensorflow": {
            "DEFINE_string_9": {
                "name": {
                    "value": "corpus_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "emotion_vc",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Corpus Name",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_10": {
                "name": {
                    "value": "speaker_list",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../vaw_original/etc/speakers.tsv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Speaker list (one speaker per line)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_13": {
                "name": {
                    "value": "train_file_pattern",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../vaw_original/data_multi/bin/training_set/*/*.bin",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "training dir (to *.bin)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Supervisor_27": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_80": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_90": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MkDir_20": {
                "dirname": {
                    "value": "./etc",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "convert-vawgan-cwt.py": {
        "tensorflow": {
            "DEFINE_string_16": {
                "name": {
                    "value": "corpus_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "emotion_vc",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Corpus name",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_17": {
                "name": {
                    "value": "checkpoint",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./logdir/train/0921-2112-44-2020/model.ckpt-46860",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "root of log dir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "src",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "Neutral",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "source speaker [SF1 - SM2]",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "trg",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "Angry",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "target speaker [SF1 - TM3]",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./logdir",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "root of output dir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_21": {
                "name": {
                    "value": "module",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "model.vawgan",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Module",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "VAWGAN",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "file_pattern",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/bin/evaluation_set/{}/*.bin",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "file pattern",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "speaker_list",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "../vaw_original/etc/speakers.tsv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Speaker list (one speaker per line)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "lf0",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "f0 > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(f0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "f0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_54": {
                "variable": {
                    "value": "lf0",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "lf0 > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(lf0 - mu_s) / std_s * std_t + mu_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "lf0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(f0 > 1.0, tf.log(f0), f0)",
                            "Call"
                        ],
                        [
                            "tf.where(lf0 > 1.0, (lf0 - mu_s) / std_s * std_t + mu_t, lf0)",
                            "Call"
                        ],
                        [
                            "tf.where(lf0 > 1.0, tf.exp(lf0), lf0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_55": {
                "variable": {
                    "value": "lf0",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "lf0 > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(lf0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "lf0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(f0 > 1.0, tf.log(f0), f0)",
                            "Call"
                        ],
                        [
                            "tf.where(lf0 > 1.0, (lf0 - mu_s) / std_s * std_t + mu_t, lf0)",
                            "Call"
                        ],
                        [
                            "tf.where(lf0 > 1.0, tf.exp(lf0), lf0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_92": {
                "variable": {
                    "value": "arch",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(_path_to_arch, 'architecture*.json')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_123": {
                "variable": {
                    "value": "f0_t_convert",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_f0(f0_s, args.src, args.trg)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "machine.decode(z, y_t, f0_t_convert)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_t)",
                            "Call"
                        ],
                        [
                            "normalizer.backward_process(x_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_142": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_143": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_default_output(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "normalizer.forward_process(features['sp'])",
                            "Call"
                        ],
                        [
                            "nh_to_nhwc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_53": {
                "x": {
                    "value": "f0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_55": {
                "x": {
                    "value": "lf0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(f0 > 1.0, tf.log(f0), f0)",
                            "Call"
                        ],
                        [
                            "tf.where(lf0 > 1.0, (lf0 - mu_s) / std_s * std_t + mu_t, lf0)",
                            "Call"
                        ],
                        [
                            "tf.where(lf0 > 1.0, tf.exp(lf0), lf0)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_60": {
                "name": {
                    "value": "NH_to_NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_62": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "normalizer.forward_process(features['sp'])",
                            "Call"
                        ],
                        [
                            "nh_to_nhwc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "NH_to_NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "normalizer.forward_process(features['sp'])",
                            "Call"
                        ],
                        [
                            "nh_to_nhwc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "main-vawgan.py": {
        "tensorflow": {
            "DEFINE_string_13": {
                "name": {
                    "value": "corpus_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "emotion_vc",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Corpus name",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_15": {
                "name": {
                    "value": "logdir_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "root of log dir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_17": {
                "name": {
                    "value": "logdir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "log dir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "restore_from",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "restore from dir (not from *.ckpt)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_21": {
                "name": {
                    "value": "gpu_cfg",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU configuration",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "summary_freq",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Update summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "specify the ckpt in restore_from (if there are multiple ckpts)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "architecture",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "architecture-vawgan-vcc2016.json",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "network architecture",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "model_module",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "model.vawgan",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Model module",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "VAWGAN",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Model: ConvVAE, VAWGAN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "trainer_module",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "trainer.vawgan",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Trainer module",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "trainer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "VAWGANTrainer",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Trainer: VAETrainer, VAWGANTrainer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_45": {
                "dirname": {
                    "value": "dirs['logdir']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/vae.py": {
        "tensorflow": {
            "make_template_26": {
                "variable": {
                    "value": "self._generate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Generator",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_30": {
                "variable": {
                    "value": "self._encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "conv2d_nchw_layernorm(x, o, k, s, lrelu, name='Conv2d-{}'.format(i))",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], h * w * c)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, o, k, s, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'ConvT-LN{}'.format(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_80": {
                "variable": {
                    "value": "z_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "conv2d_nchw_layernorm(x, o, k, s, lrelu, name='Conv2d-{}'.format(i))",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], h * w * c)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, o, k, s, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'ConvT-LN{}'.format(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.arch['z_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dense_81": {
                "variable": {
                    "value": "z_lv",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "conv2d_nchw_layernorm(x, o, k, s, lrelu, name='Conv2d-{}'.format(i))",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], h * w * c)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, o, k, s, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'ConvT-LN{}'.format(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.arch['z_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "conv2d_nchw_layernorm(x, o, k, s, lrelu, name='Conv2d-{}'.format(i))",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], h * w * c)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, o, k, s, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'ConvT-LN{}'.format(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, c, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ],
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_class, h_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_47": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=var_name, shape=[n_class, h_dim])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, dim=-1, name=var_name + 'normalized')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=var_name, shape=[n_class, h_dim], regularizer=slim.l2_regularizer(1e-06))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name + 'normalized'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_61": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "conv2d_nchw_layernorm(x, o, k, s, lrelu, name='Conv2d-{}'.format(i))",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], h * w * c)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, o, k, s, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'ConvT-LN{}'.format(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ],
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_class, h_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "slim.l2_regularizer(1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_89": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.y_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.y_emb, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "conv2d_nchw_layernorm(x, o, k, s, lrelu, name='Conv2d-{}'.format(i))",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], h * w * c)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, o, k, s, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'ConvT-LN{}'.format(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "D_KL",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "GaussianKLD(slim.flatten(z_mu), slim.flatten(z_lv), slim.flatten(tf.zeros_like(z_mu)), slim.flatten(tf.zeros_like(z_lv)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "logPx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "GaussianLogDensity(slim.flatten(x), slim.flatten(xh), tf.zeros_like(slim.flatten(xh)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_134": {
                "name": {
                    "value": "KL-div",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "D_KL",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(GaussianKLD(slim.flatten(z_mu), slim.flatten(z_lv), slim.flatten(tf.zeros_like(z_mu)), slim.flatten(tf.zeros_like(z_lv))))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_135": {
                "name": {
                    "value": "logPx",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "logPx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(GaussianLogDensity(slim.flatten(x), slim.flatten(xh), tf.zeros_like(slim.flatten(xh))))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_137": {
                "name": {
                    "value": "xh",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "xh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._generate(z, y)",
                            "Call"
                        ],
                        [
                            "self._generate(z, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_138": {
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "conv2d_nchw_layernorm(x, o, k, s, lrelu, name='Conv2d-{}'.format(i))",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], h * w * c)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, o, k, s, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'ConvT-LN{}'.format(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_20": {
                "name": {
                    "value": "SpeakerRepr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "conv2d_nchw_layernorm(x, o, k, s, lrelu, name='Conv2d-{}'.format(i))",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], h * w * c)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, o, k, s, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'ConvT-LN{}'.format(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_116": {
                "structure": {
                    "value": "z_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, self.arch['z_dim'])",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_117": {
                "structure": {
                    "value": "z_lv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, self.arch['z_dim'])",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_118": {
                "structure": {
                    "value": "tf.zeros_like(z_mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_119": {
                "structure": {
                    "value": "tf.zeros_like(z_lv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_124": {
                "structure": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "conv2d_nchw_layernorm(x, o, k, s, lrelu, name='Conv2d-{}'.format(i))",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], h * w * c)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, c, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, o, k, s, padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'ConvT-LN{}'.format(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_125": {
                "structure": {
                    "value": "xh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._generate(z, y)",
                            "Call"
                        ],
                        [
                            "self._generate(z, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_126": {
                "input": {
                    "value": "slim.flatten(xh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "input": {
                    "value": "z_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, self.arch['z_dim'])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_119": {
                "input": {
                    "value": "z_lv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, self.arch['z_dim'])",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_126": {
                "structure": {
                    "value": "xh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._generate(z, y)",
                            "Call"
                        ],
                        [
                            "self._generate(z, y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/vaegan.py": {
        "tensorflow": {
            "make_template_25": {
                "variable": {
                    "value": "self._generate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Generator",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_28": {
                "variable": {
                    "value": "self._discriminate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._discriminator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_31": {
                "variable": {
                    "value": "self._encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_105": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_124": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.y_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.y_emb, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_221": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_222": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "intermediate[subnet['feature_layer'] - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ],
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_class, h_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_48": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=var_name, shape=[n_class, h_dim])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, dim=-1, name=var_name + 'normalized')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=var_name, shape=[n_class, h_dim], regularizer=slim.l2_regularizer(1e-06))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name + 'normalized'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ],
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_class, h_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "slim.l2_regularizer(1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_19": {
                "name": {
                    "value": "SpeakerRepr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_transpose_159": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "subnet['kernel'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['stride'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "tanh_169": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_202": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['kernel'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "subnet['stride'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_290": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['kernel'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "subnet['stride'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_transpose_150": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "subnet['kernel'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['stride'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_210": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['kernel'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "subnet['stride'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_295": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logit, truth * tf.ones_like(logit))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_304": {
                "input_tensor": {
                    "value": "t['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_305": {
                "input_tensor": {
                    "value": "t['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_309": {
                "input_tensor": {
                    "value": "s['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_310": {
                "input_tensor": {
                    "value": "s['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_314": {
                "input_tensor": {
                    "value": "t['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_315": {
                "input_tensor": {
                    "value": "s2t['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "input_tensor": {
                    "value": "t['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_320": {
                "input_tensor": {
                    "value": "s['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_327": {
                "input_tensor": {
                    "value": "GaussianKLD(s['z_mu'], s['z_lv'], tf.zeros_like(s['z_mu']), tf.zeros_like(s['z_lv']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_331": {
                "input_tensor": {
                    "value": "GaussianKLD(t['z_mu'], t['z_lv'], tf.zeros_like(t['z_mu']), tf.zeros_like(t['z_lv']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_339": {
                "input_tensor": {
                    "value": "GaussianLogDensity(slim.flatten(x_t), slim.flatten(t['xh']), tf.zeros_like(slim.flatten(x_t)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_344": {
                "input_tensor": {
                    "value": "GaussianLogDensity(slim.flatten(x_s), slim.flatten(s['xh']), tf.zeros_like(slim.flatten(x_s)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_374": {
                "name": {
                    "value": "Summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_376": {
                "name": {
                    "value": "DKL_z",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['KL(z)']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_377": {
                "name": {
                    "value": "MMSE",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['Dis']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_382": {
                "name": {
                    "value": "WGAN",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['WGAN']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_383": {
                "name": {
                    "value": "WGAN-s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['reconst_s']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_384": {
                "name": {
                    "value": "WGAN-t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['reconst_t']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_385": {
                "name": {
                    "value": "WGAN-s2t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['conv_s2t']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_386": {
                "name": {
                    "value": "WGAN-t-s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['real_s_t']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_389": {
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(0, [y_t, y_s])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_394": {
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(0, [s['z'], t['z']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_395": {
                "name": {
                    "value": "z_s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "s['z']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_396": {
                "name": {
                    "value": "z_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['z']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_398": {
                "name": {
                    "value": "z_mu",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(0, [s['z_mu'], t['z_mu']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_399": {
                "name": {
                    "value": "z_mu_s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "s['z_mu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_400": {
                "name": {
                    "value": "z_mu_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['z_mu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_402": {
                "name": {
                    "value": "z_lv",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(0, [s['z_lv'], t['z_lv']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_403": {
                "name": {
                    "value": "z_lv_s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "s['z_lv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_404": {
                "name": {
                    "value": "z_lv_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['z_lv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_412": {
                "name": {
                    "value": "logit_t_from_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_413": {
                "name": {
                    "value": "logit_t_from_s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "s2t['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_414": {
                "name": {
                    "value": "logit_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_420": {
                "name": {
                    "value": "logit_t_True_FromT_FromS",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(0, [t['x_logit'], t['xh_logit'], s2t['xh_logit']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_423": {
                "name": {
                    "value": "logit_s_v_sh",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(0, [s['x_logit'], s['xh_logit']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_426": {
                "name": {
                    "value": "logit_t_v_th",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(0, [t['x_logit'], t['xh_logit']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_101": {
                "name": {
                    "value": "'down-sample{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.transpose(x[:, :, :, 0:3], [2, 1, 0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_216": {
                "name": {
                    "value": "'upsampling{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.transpose(x[:, :, :, 0:3], [2, 1, 0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_296": {
                "labels": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "logits": {
                    "value": "truth * tf.ones_like(logit)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_389": {
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[y_t, y_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_394": {
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[s['z'], t['z']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_398": {
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[s['z_mu'], t['z_mu']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_402": {
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[s['z_lv'], t['z_lv']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_422": {
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[t['x_logit'], t['xh_logit'], s2t['xh_logit']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_425": {
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[s['x_logit'], s['xh_logit']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_428": {
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[t['x_logit'], t['xh_logit']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "a": {
                    "value": "x[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 1, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_218": {
                "a": {
                    "value": "x[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 1, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_330": {
                "input": {
                    "value": "s['z_lv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_334": {
                "input": {
                    "value": "t['z_lv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_341": {
                "structure": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_342": {
                "structure": {
                    "value": "t['xh']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_343": {
                "input": {
                    "value": "slim.flatten(x_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_346": {
                "structure": {
                    "value": "x_s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_347": {
                "structure": {
                    "value": "s['xh']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_348": {
                "input": {
                    "value": "slim.flatten(x_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_298": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "flatten_343": {
                "structure": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_348": {
                "structure": {
                    "value": "x_s",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/vawgan.py": {
        "tensorflow": {
            "make_template_29": {
                "variable": {
                    "value": "self._generate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Generator",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_32": {
                "variable": {
                    "value": "self._discriminate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._discriminator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_35": {
                "variable": {
                    "value": "self._encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y, f], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y, f], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_129": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.f_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.f_emb, f)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_218": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y, f], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_219": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "intermediate[subnet['feature_layer'] - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ],
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_class, h_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_52": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=var_name, shape=[n_class, h_dim])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, dim=-1, name=var_name + 'normalized')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=var_name, shape=[n_class, h_dim], regularizer=slim.l2_regularizer(1e-06))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name + 'normalized'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ],
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_class, h_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "slim.l2_regularizer(1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y, f], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_19": {
                "name": {
                    "value": "Generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_transpose_164": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y, f], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "subnet['kernel'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['stride'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "tanh_173": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_199": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y, f], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['kernel'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "subnet['stride'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_264": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y, f], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['kernel'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "subnet['stride'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_transpose_155": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y, f], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "subnet['kernel'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['stride'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_207": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "x + slim.fully_connected(var)",
                            "BinOp"
                        ],
                        [
                            "slim.bias_add(x)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "self._merge([z, y, f], subnet['merge_dim'])",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, h * w * c, normalizer_fn=slim.batch_norm, activation_fn=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, c])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.conv2d_transpose(x, subnet['output'][-1], subnet['kernel'][-1], subnet['stride'][-1], normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(logit)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][0], subnet['kernel'][0], subnet['stride'][0], normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, subnet['output'][i], subnet['kernel'][i], subnet['stride'][i])",
                            "Call"
                        ],
                        [
                            "slim.flatten(x)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(x, 1, weights_regularizer=slim.l2_regularizer(subnet['l2-reg']), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "subnet['output'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "subnet['kernel'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "subnet['stride'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_269": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logit, truth * tf.ones_like(logit))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_278": {
                "input_tensor": {
                    "value": "t['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_279": {
                "input_tensor": {
                    "value": "t['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_283": {
                "input_tensor": {
                    "value": "s['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_284": {
                "input_tensor": {
                    "value": "s['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_288": {
                "input_tensor": {
                    "value": "t['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_289": {
                "input_tensor": {
                    "value": "s2t['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_293": {
                "input_tensor": {
                    "value": "t['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_294": {
                "input_tensor": {
                    "value": "s['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_301": {
                "input_tensor": {
                    "value": "GaussianKLD(s['z_mu'], s['z_lv'], tf.zeros_like(s['z_mu']), tf.zeros_like(s['z_lv']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_305": {
                "input_tensor": {
                    "value": "GaussianKLD(t['z_mu'], t['z_lv'], tf.zeros_like(t['z_mu']), tf.zeros_like(t['z_lv']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_313": {
                "input_tensor": {
                    "value": "GaussianLogDensity(slim.flatten(x_t), slim.flatten(t['xh']), tf.zeros_like(slim.flatten(x_t)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_318": {
                "input_tensor": {
                    "value": "GaussianLogDensity(slim.flatten(x_s), slim.flatten(s['xh']), tf.zeros_like(slim.flatten(x_s)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_326": {
                "name": {
                    "value": "Summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_327": {
                "name": {
                    "value": "DKL_z",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['KL(z)']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_328": {
                "name": {
                    "value": "MMSE",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['Dis']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_331": {
                "name": {
                    "value": "WGAN",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['WGAN']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_332": {
                "name": {
                    "value": "WGAN-s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['reconst_s']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_333": {
                "name": {
                    "value": "WGAN-t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['reconst_t']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_334": {
                "name": {
                    "value": "WGAN-s2t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['conv_s2t']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_335": {
                "name": {
                    "value": "WGAN-t-s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss['real_s_t']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_337": {
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([y_t, y_s], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_338": {
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([s['z'], t['z']], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_340": {
                "name": {
                    "value": "z_s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "s['z']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_341": {
                "name": {
                    "value": "z_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['z']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_343": {
                "name": {
                    "value": "z_mu",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([s['z_mu'], t['z_mu']], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_344": {
                "name": {
                    "value": "z_mu_s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "s['z_mu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_345": {
                "name": {
                    "value": "z_mu_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['z_mu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_347": {
                "name": {
                    "value": "z_lv",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([s['z_lv'], t['z_lv']], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_348": {
                "name": {
                    "value": "z_lv_s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "s['z_lv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_349": {
                "name": {
                    "value": "z_lv_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['z_lv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_351": {
                "name": {
                    "value": "logit_t_from_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_352": {
                "name": {
                    "value": "logit_t_from_s",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "s2t['xh_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_353": {
                "name": {
                    "value": "logit_t",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "t['x_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_355": {
                "name": {
                    "value": "logit_t_True_FromT_FromS",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([t['x_logit'], t['xh_logit'], s2t['xh_logit']], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_358": {
                "name": {
                    "value": "logit_s_v_sh",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([s['x_logit'], s['xh_logit']], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_361": {
                "name": {
                    "value": "logit_t_v_th",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([t['x_logit'], t['xh_logit']], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_105": {
                "name": {
                    "value": "'down-sample{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.transpose(x[:, :, :, 0:3], [2, 1, 0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_213": {
                "name": {
                    "value": "'upsampling{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.transpose(x[:, :, :, 0:3], [2, 1, 0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_270": {
                "labels": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "logits": {
                    "value": "truth * tf.ones_like(logit)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_337": {
                "values": {
                    "value": "[y_t, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_338": {
                "values": {
                    "value": "[s['z'], t['z']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_343": {
                "values": {
                    "value": "[s['z_mu'], t['z_mu']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_347": {
                "values": {
                    "value": "[s['z_lv'], t['z_lv']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_357": {
                "values": {
                    "value": "[t['x_logit'], t['xh_logit'], s2t['xh_logit']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_360": {
                "values": {
                    "value": "[s['x_logit'], s['xh_logit']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_363": {
                "values": {
                    "value": "[t['x_logit'], t['xh_logit']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "a": {
                    "value": "x[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 1, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_215": {
                "a": {
                    "value": "x[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 1, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_304": {
                "input": {
                    "value": "s['z_lv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_308": {
                "input": {
                    "value": "t['z_lv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_315": {
                "structure": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_316": {
                "structure": {
                    "value": "t['xh']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_317": {
                "input": {
                    "value": "slim.flatten(x_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_320": {
                "structure": {
                    "value": "x_s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_321": {
                "structure": {
                    "value": "s['xh']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_322": {
                "input": {
                    "value": "slim.flatten(x_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_272": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "flatten_317": {
                "structure": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_322": {
                "structure": {
                    "value": "x_s",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {
            "make_template_29": {
                "variable": {
                    "value": "self._decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Decoder",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_30": {
                "variable": {
                    "value": "self._encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_52": {
                "variable": {
                    "value": "z_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, c], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.arch['z_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "z_mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_53": {
                "variable": {
                    "value": "z_lv",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, c], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.arch['z_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "z_lv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_71": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.speaker_repr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'y_emb'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_class, h_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.keras.regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, c], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['encoder']['output']",
                            "Subscript"
                        ],
                        [
                            "self.arch['decoder']['output']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "lrelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dense_74": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, c], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['encoder']['output']",
                            "Subscript"
                        ],
                        [
                            "self.arch['decoder']['output']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "lrelu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dense_76": {
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, c], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.arch['x_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "xh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_107": {
                "name": {
                    "value": "L_x",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "L_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1.0 * tf.reduce_mean(GaussianLogDensity(x, xh, tf.zeros_like(x)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_108": {
                "name": {
                    "value": "L_z",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "L_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(GaussianKLD(z_mu, z_lv, tf.zeros_like(z_mu), tf.zeros_like(z_lv)))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "variable": {
                    "value": "L_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "GaussianKLD(z_mu, z_lv, tf.zeros_like(z_mu), tf.zeros_like(z_lv))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_91": {
                "name": {
                    "value": "E_log_p_x_zy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_95": {
                "name": {
                    "value": "D_KL_z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "input_tensor": {
                    "value": "GaussianLogDensity(x, xh, tf.zeros_like(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "input": {
                    "value": "z_lv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=self.arch['z_dim'], name='z_lv')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_93": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, c], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=o, activation=lrelu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer/gan.py": {
        "tensorflow": {
            "Variable_30": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "beta1": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ]
                    ]
                },
                "beta2": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trainable_variables_37": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-np.pi, np.pi, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.cos(z)",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, 1.0, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_78": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n, 1])",
                            "Call"
                        ],
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n])",
                            "Call"
                        ]
                    ]
                }
            },
            "RunMetadata_111": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_115": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.dirs['logdir']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.opt['global_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_125": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_161": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_167": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "beta1": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ]
                    ]
                },
                "beta2": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_168": {
                "variable": {
                    "value": "optimizer_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['rho']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['rho']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['rho']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trainable_variables_170": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_196": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-np.pi, np.pi, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.cos(z)",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, 1.0, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-np.pi, np.pi, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.cos(z)",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, 1.0, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_198": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-np.pi, np.pi, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.cos(z)",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, 1.0, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_201": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_202": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n, 1])",
                            "Call"
                        ],
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_203": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n, 1])",
                            "Call"
                        ],
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_231": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-np.pi, np.pi, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.cos(z)",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, 1.0, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_232": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n, 1])",
                            "Call"
                        ],
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_245": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_251": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "beta1": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ]
                    ]
                },
                "beta2": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_252": {
                "variable": {
                    "value": "optimizer_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['rho']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['rho']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['rho']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trainable_variables_254": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_291": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_297": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "beta1": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ]
                    ]
                },
                "beta2": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_298": {
                "variable": {
                    "value": "optimizer_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['rho']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['rho']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['rho']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trainable_variables_300": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_382": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_387": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "beta1": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ]
                    ]
                },
                "beta2": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trainable_variables_389": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_430": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-np.pi, np.pi, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.cos(z)",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, 1.0, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_431": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-np.pi, np.pi, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.cos(z)",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, 1.0, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_432": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-np.pi, np.pi, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.cos(z)",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, 1.0, size=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "np.concatenate([z] * n, axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(z, [N, -1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[n, self.arch['z_dim']])",
                            "Call"
                        ],
                        [
                            "tf.tile(z, [1, n])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [N, -1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(z, trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_435": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_436": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n, 1])",
                            "Call"
                        ],
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_437": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n, 1])",
                            "Call"
                        ],
                        [
                            "np.asarray([[5, 0, 0], [9, 0, 0], [12, 0, 0], [17, 0, 0], [19, 0, 0], [161, 0, 0], [170, 0, 0], [170, 16, 0], [161, 9, 4], [19, 24, 50]], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate([y] * n, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.range(0, 10, 1, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [n])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RunMetadata_446": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_448": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.dirs['logdir']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.opt['global_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_458": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_45": {
                "name": {
                    "value": "Update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_179": {
                "name": {
                    "value": "Update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_270": {
                "name": {
                    "value": "Update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_313": {
                "name": {
                    "value": "Update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_393": {
                "name": {
                    "value": "Update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GPUOptions_127": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_182": {
                "control_inputs": {
                    "value": "[opt_l]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_272": {
                "control_inputs": {
                    "value": "[opt_e]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_276": {
                "control_inputs": {
                    "value": "[opt_l]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_318": {
                "control_inputs": {
                    "value": "[opt_e, opt_j, opt_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_322": {
                "control_inputs": {
                    "value": "[opt_l]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GPUOptions_460": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GFile_143": {
                "name": {
                    "value": "os.path.join(self.dirs['logdir'], 'img-anime-{:03d}k.png'.format(step // 1000))",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_474": {
                "name": {
                    "value": "os.path.join(self.dirs['logdir'], 'img-anime-{:03d}k.png'.format(step // 1000))",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/vae.py": {
        "tensorflow": {
            "Variable_15": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "beta1": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ]
                    ]
                },
                "beta2": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trainable_variables_21": {
                "variable": {
                    "value": "g_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunMetadata_76": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_78": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.dirs['logdir']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.opt['global_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_88": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_121": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "beta1": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta1']",
                            "Subscript"
                        ]
                    ]
                },
                "beta2": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ],
                        [
                            "self.arch['training']['beta2']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trainable_variables_128": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunMetadata_152": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_156": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.dirs['logdir']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.opt['global_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_166": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "Update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_137": {
                "name": {
                    "value": "Update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GPUOptions_90": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "[opt_e]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GPUOptions_168": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/vawgan.py": {
        "tensorflow": {
            "Variable_19": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_22": {
                "variable": {
                    "value": "optimizer_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "lr_schedule(ep, hyperp['lr_schedule'])",
                            "Call"
                        ],
                        [
                            "lr_schedule(ep, hyperp['lr_schedule'])",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_23": {
                "variable": {
                    "value": "optimizer_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "lr_schedule(ep, hyperp['lr_schedule'])",
                            "Call"
                        ],
                        [
                            "lr_schedule(ep, hyperp['lr_schedule'])",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_25": {
                "variable": {
                    "value": "trainables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_33": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hyperp['clamping']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_66": {
                "variable": {
                    "value": "vae_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_67": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.dirs['logdir']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.opt['global_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_72": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_45": {
                "control_inputs": {
                    "value": "opt_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[opt_d]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "Clamping",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_48": {
                "variable": {
                    "value": "v_clamped",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_vars",
                            "Name"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-k",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(hyperp['clamping'], shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_49": {
                "variable": {
                    "value": "clamping",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_vars",
                            "Name"
                        ]
                    ]
                },
                "value": {
                    "value": "v_clamped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(v, -k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "GPUOptions_74": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "util/image.py": {
        "tensorflow": {
            "minimum_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "line1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "line2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "minimum_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maxval",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "minval",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_5": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_9": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, n, h, w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n * h, n * w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "saturate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "encode_png_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, n, h, w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n * h, n * w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "saturate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "encode_png_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ],
                        [
                            "tf.minimum(line1, line2)",
                            "Call"
                        ],
                        [
                            "tf.minimum(x, maxval)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, minval)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n, n, h, w, c])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [n * h, n * w, c])",
                            "Call"
                        ],
                        [
                            "x / 2.0 + 0.5",
                            "BinOp"
                        ],
                        [
                            "gray2jet(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.uint8, saturate=True)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_22": {
                "name": {
                    "value": "MakeThumbnail",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "Gray2Jet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_66": {
                "values": {
                    "value": "[r, g, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_79": {
                "name": {
                    "value": "MakeThumbnail",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "util/io.py": {
        "tensorflow": {
            "Int64List_10": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_20": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_30": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FeatureList_8": {
                "feature": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.train.Feature(int64_list=tf.train.Int64List(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.Int64List(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(bytes_list=tf.train.BytesList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.BytesList(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(float_list=tf.train.FloatList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.FloatList(value=[value])",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_11": {
                "int64_list": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.train.Feature(int64_list=tf.train.Int64List(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.Int64List(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(bytes_list=tf.train.BytesList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.BytesList(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(float_list=tf.train.FloatList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.FloatList(value=[value])",
                            "Call"
                        ]
                    ]
                }
            },
            "FeatureList_18": {
                "feature": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.train.Feature(int64_list=tf.train.Int64List(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.Int64List(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(bytes_list=tf.train.BytesList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.BytesList(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(float_list=tf.train.FloatList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.FloatList(value=[value])",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_21": {
                "bytes_list": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.train.Feature(int64_list=tf.train.Int64List(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.Int64List(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(bytes_list=tf.train.BytesList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.BytesList(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(float_list=tf.train.FloatList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.FloatList(value=[value])",
                            "Call"
                        ]
                    ]
                }
            },
            "FeatureList_28": {
                "feature": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.train.Feature(int64_list=tf.train.Int64List(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.Int64List(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(bytes_list=tf.train.BytesList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.BytesList(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(float_list=tf.train.FloatList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.FloatList(value=[value])",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_31": {
                "float_list": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.train.Feature(int64_list=tf.train.Int64List(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.Int64List(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(bytes_list=tf.train.BytesList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.BytesList(value=[value])",
                            "Call"
                        ],
                        [
                            "[tf.train.Feature(float_list=tf.train.FloatList(value=[v])) for v in value]",
                            "ListComp"
                        ],
                        [
                            "tf.train.FloatList(value=[value])",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_6": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[v])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_16": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[v])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_26": {
                "float_list": {
                    "value": "tf.train.FloatList(value=[v])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_7": {
                "value": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_17": {
                "value": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_27": {
                "value": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "util/layers.py": {
        "tensorflow": {
            "constant_7": {
                "variable": {
                    "value": "EPSILON",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_8": {
                "variable": {
                    "value": "PI",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_32": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=o, kernel_size=k, strides=s, padding='same', data_format='channels_first', name=name)",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'layernorm')",
                            "Call"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "tf.divide(x, x_sum)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '.offset'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_neurons] + [1 for _ in range(len(axis) - 1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '.scale'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_neurons] + [1 for _ in range(len(axis) - 1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_126": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(y)[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(k, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "sum_p_over_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.divide(p, tf.pow(y, tau))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "lgamma_131": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(y)[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(k, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_140": {
                "variable": {
                    "value": "EPS",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "EPS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(EPS, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "1e-10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "x_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=o, kernel_size=k, strides=s, padding='same', data_format='channels_first', name=name)",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'layernorm')",
                            "Call"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "tf.divide(x, x_sum)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_143": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=o, kernel_size=k, strides=s, padding='same', data_format='channels_first', name=name)",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'layernorm')",
                            "Call"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "tf.divide(x, x_sum)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x, -1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_44": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=o, kernel_size=k, strides=s, padding='same', data_format='channels_first', name=name)",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'layernorm')",
                            "Call"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "tf.divide(x, x_sum)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(log_var)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '.offset', shape=[n_neurons] + [1 for _ in range(len(axis) - 1)], initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '.scale', shape=[n_neurons] + [1 for _ in range(len(axis) - 1)], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "1.0507009873554805",
                            "Constant"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=o, kernel_size=k, strides=s, padding='same', data_format='channels_first', name=name)",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'layernorm')",
                            "Call"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "tf.divide(x, x_sum)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(y)[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(k, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianSampleLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianLogDensity'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "VarianceScaling_76": {
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "fan_in",
                    "type": "str",
                    "possible_values": []
                },
                "distribution": {
                    "value": "normal",
                    "type": "str",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_86": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "quantization_channels - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_90": {
                "variable": {
                    "value": "safe_audio_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(audio)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_92": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(audio)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "magnitude",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.log1p(mu * safe_audio_abs) / tf.log1p(mu)",
                            "BinOp"
                        ],
                        [
                            "1 / mu * ((1 + mu) ** abs(signal) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "mulaw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_149": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=o, kernel_size=k, strides=s, padding='same', data_format='channels_first', name=name)",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'layernorm')",
                            "Call"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "tf.divide(x, x_sum)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianSampleLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianLogDensity'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_155": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(z_lv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_161": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * PI",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_162": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_163": {
                "variable": {
                    "value": "x_mu2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x - mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_164": {
                "variable": {
                    "value": "x_mu2_over_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_mu2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(x - mu)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "var + EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_166": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-0.5 * (c + log_var + x_mu2_over_var)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(log_prob, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_178": {
                "variable": {
                    "value": "v1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lv1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_179": {
                "variable": {
                    "value": "v2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lv2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_180": {
                "variable": {
                    "value": "mu_diff_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu1 - mu2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianSampleLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianLogDensity'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "selu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "encode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_119": {
                "x": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(minval=0.0, maxval=1.0, shape=tf.shape(y_mu))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_125": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normalize_to_unit_sum(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_130": {
                "x": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.pow(y, tau)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_153": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianSampleLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianLogDensity'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_156": {
                "x": {
                    "value": "z_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(eps, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_160": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianSampleLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'GaussianLogDensity'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_177": {
                "name": {
                    "value": "GaussianKLD",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "dimwise_kld",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 * (lv2 - lv1 + tf.div(v1 + mu_diff_sq, v2 + EPSILON) - 1.0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_73": {
                "condition": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=o, kernel_size=k, strides=s, padding='same', data_format='channels_first', name=name)",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'layernorm')",
                            "Call"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "tf.divide(x, x_sum)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha * tf.nn.elu(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_90": {
                "x": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log1p_91": {
                "x": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(quantization_channels - 1)",
                            "Call"
                        ],
                        [
                            "quantization_channels - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_92": {
                "x": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sign_110": {
                "x": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.sign(audio), magnitude, name='mulaw')",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "y_mu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_130": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normalize_to_unit_sum(y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tau",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_132": {
                "x": {
                    "value": "tau",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_133": {
                "x": {
                    "value": "sum_p_over_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.divide(p, tf.pow(y, tau)), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_154": {
                "input": {
                    "value": "z_mu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_155": {
                "x": {
                    "value": "z_lv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_156": {
                "x": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(z_mu))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.exp(z_lv))",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_73": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=o, kernel_size=k, strides=s, padding='same', data_format='channels_first', name=name)",
                            "Call"
                        ],
                        [
                            "Layernorm(x, [1, 2, 3], 'layernorm')",
                            "Call"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "tf.divide(x, x_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_182": {
                "x": {
                    "value": "v1 + mu_diff_sq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "v2 + EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "util/mnist.py": {
        "tensorflow": {
            "load_data_10": {
                "variable": {
                    "value": "((x, y), (_, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_11": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_12": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_14": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.Variable(y, trainable=False, name='label', dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant(y, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_data_68": {
                "variable": {
                    "value": "((x, y), (_, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.Variable(y, trainable=False, name='label', dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant(y, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_74": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "resize_bilinear_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[16, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_batch_16": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_after_dequeue",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "enqueue_many": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_data_34": {
                "variable": {
                    "value": "((x, y), (_, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[16, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "keras.layers.Flatten()(x) / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "x / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.Variable(x, trainable=False, name='image', dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(x - x_mu) / (x_std + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -5, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, [16, 16])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.Variable(y, trainable=False, name='label', dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant(y, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_48": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_batch_80": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_after_dequeue",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "enqueue_many": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "MNIST_nchw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_50": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/wrapper.py": {
        "tensorflow": {
            "get_checkpoint_state_11": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_default_logdir(logdir_root)",
                            "Call"
                        ],
                        [
                            "os.path.join(logdir_root, 'train', STARTED_DATESTRING)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_49": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_default_logdir(logdir_root)",
                            "Call"
                        ],
                        [
                            "os.path.join(logdir_root, 'train', STARTED_DATESTRING)",
                            "Call"
                        ]
                    ]
                }
            },
            "GPUOptions_71": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "cfg['per_process_gpu_memory_fraction']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_73": {
                "variable": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "cfg['allow_soft_placement']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "log_device_placement": {
                    "value": "cfg['log_device_placement']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "cfg['inter_op_parallelism_threads']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "cfg['intra_op_parallelism_threads']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=cfg['per_process_gpu_memory_fraction'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "validate.py": {
        "tensorflow": {
            "DEFINE_string_13": {
                "name": {
                    "value": "logdir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "logdir",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "log dir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_14": {
                "name": {
                    "value": "target_id",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "target id (SF1 = 1, TM3 = 9)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_15": {
                "name": {
                    "value": "file_pattern",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "filename filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_44": {
                "variable": {
                    "value": "pre_train_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Supervisor_47": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "init_fn": {
                    "value": "load_pretrain",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GPUOptions_48": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_49": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_62": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}