{
    "cifar10dvs/smodels.py": {
        "torch": {
            "Sequential_7": {
                "*args": {
                    "value": "layer.SeqToANNContainer(nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, stride=1, bias=False), nn.BatchNorm2d(out_channels))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "layer.SeqToANNContainer(nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, bias=False), nn.BatchNorm2d(out_channels))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, mid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, mid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, mid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.numel() * in_channels",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Flatten_117": {
                "start_dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg_dict['mid_channels']",
                            "Subscript"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                }
            },
            "MaxPool2d_115": {
                "kernel_size": {
                    "value": "k_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg_dict['k_pool']",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "k_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg_dict['k_pool']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cifar10dvs/train.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "_seed_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "_seed_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(train_set_pth)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(test_set_pth)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SummaryWriter_200": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(out_dir, 'logs')",
                    "type": "Call",
                    "possible_values": []
                },
                "purge_step": {
                    "value": "start_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "checkpoint['epoch'] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_121": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.optim.SGD(net.parameters(), lr=args.lr, momentum=args.momentum)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(net.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_130": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "train_set_pth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.dts_cache, f'train_set_{args.T}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_131": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_set_pth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.dts_cache, f'test_set_{args.T}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "GradScaler_159": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_165": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Subset_66": {
                "dataset": {
                    "value": "origin_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "test_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_123": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.optim.SGD(net.parameters(), lr=args.lr, momentum=args.momentum)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(net.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.T_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_138": {
                "obj": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(train_set_pth)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "train_set_pth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.dts_cache, f'train_set_{args.T}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_139": {
                "obj": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(test_set_pth)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "test_set_pth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.dts_cache, f'test_set_{args.T}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_280": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(args.resume, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "{'net': net.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'epoch': epoch, 'max_test_acc': max_test_acc}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(pt_dir, 'checkpoint_latest.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_227": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(frame)",
                            "Call"
                        ],
                        [
                            "net(frame)",
                            "Call"
                        ],
                        [
                            "net(frame)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label.to(args.device)",
                            "Call"
                        ],
                        [
                            "label.to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_252": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(frame)",
                            "Call"
                        ],
                        [
                            "net(frame)",
                            "Call"
                        ],
                        [
                            "net(frame)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label.to(args.device)",
                            "Call"
                        ],
                        [
                            "label.to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_278": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(args.resume, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "{'net': net.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'epoch': epoch, 'max_test_acc': max_test_acc}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(pt_dir, 'checkpoint_max.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_221": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(frame)",
                            "Call"
                        ],
                        [
                            "net(frame)",
                            "Call"
                        ],
                        [
                            "net(frame)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label.to(args.device)",
                            "Call"
                        ],
                        [
                            "label.to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dvsgesture/smodels.py": {
        "torch": {
            "Sequential_7": {
                "*args": {
                    "value": "layer.SeqToANNContainer(nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, stride=1, bias=False), nn.BatchNorm2d(out_channels))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "layer.SeqToANNContainer(nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, bias=False), nn.BatchNorm2d(out_channels))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, mid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, mid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, mid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.numel() * in_channels",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "11",
                            "Constant"
                        ],
                        [
                            "11",
                            "Constant"
                        ],
                        [
                            "11",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Flatten_117": {
                "start_dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg_dict['mid_channels']",
                            "Subscript"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                }
            },
            "MaxPool2d_115": {
                "kernel_size": {
                    "value": "k_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg_dict['k_pool']",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "k_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg_dict['k_pool']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "dvsgesture/train.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "_seed_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_19": {
                "seed": {
                    "value": "_seed_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_171": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dvs128_gesture.DVS128Gesture(root=dataset_dir, train=True, data_type='frame', frames_number=T, split_by='number')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dvs128_gesture.DVS128Gesture(root=dataset_dir, train=False, data_type='frame', frames_number=T, split_by='number')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_test)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_193": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_207": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_124": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dvs128_gesture.DVS128Gesture(root=dataset_dir, train=True, data_type='frame', frames_number=T, split_by='number')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_125": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dvs128_gesture.DVS128Gesture(root=dataset_dir, train=False, data_type='frame', frames_number=T, split_by='number')",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_127": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dvs128_gesture.DVS128Gesture(root=dataset_dir, train=True, data_type='frame', frames_number=T, split_by='number')",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_128": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dvs128_gesture.DVS128Gesture(root=dataset_dir, train=False, data_type='frame', frames_number=T, split_by='number')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_196": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_199": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_203": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_211": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "smodels.__dict__[args.model](args.connect_f)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_215": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SummaryWriter_232": {
                "variable": {
                    "value": "train_tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "output_dir + '_logs/train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "purge_step": {
                    "value": "purge_step_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.start_epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SummaryWriter_233": {
                "variable": {
                    "value": "te_tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "output_dir + '_logs/te'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "purge_step": {
                    "value": "purge_step_te",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.start_epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dvsgesture/utils.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_248": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_228": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imagenet/sew_resnet.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_222": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "x.repeat(self.T, 1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.sn1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "layer.SeqToANNContainer(conv1x1(self.inplanes, planes * block.expansion, stride), norm_layer(planes * block.expansion))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_160": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_169": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet/spiking_resnet.py": {
        "torch": {
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_209": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand([2, 1, 64, 16, 16], device=device)",
                            "Call"
                        ],
                        [
                            "(x >= 0.5).float()",
                            "Call"
                        ],
                        [
                            "torch.rand([2, 1, 64, 16, 16], device=device)",
                            "Call"
                        ],
                        [
                            "(x >= 0.5).float()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "x.repeat(self.T, 1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.sn1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_256": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 1, 64, 16, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_264": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 1, 64, 16, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_194": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_150": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_159": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet/train.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "_seed_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "_seed_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_213": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_221": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_test)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_244": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_259": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.cos_lr_T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_132": {
                "variable": {
                    "value": "(dataset, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join('~', '.torch', 'vision', 'datasets', 'imagefolder', h[:10] + '.pt')",
                            "Call"
                        ],
                        [
                            "os.path.expanduser(cache_path)",
                            "Call"
                        ],
                        [
                            "_get_cache_path(traindir)",
                            "Call"
                        ],
                        [
                            "_get_cache_path(valdir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_153": {
                "variable": {
                    "value": "(dataset_test, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join('~', '.torch', 'vision', 'datasets', 'imagefolder', h[:10] + '.pt')",
                            "Call"
                        ],
                        [
                            "os.path.expanduser(cache_path)",
                            "Call"
                        ],
                        [
                            "_get_cache_path(traindir)",
                            "Call"
                        ],
                        [
                            "_get_cache_path(valdir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_170": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_171": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_173": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_174": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_248": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_251": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_255": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_265": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sew_resnet.__dict__[args.model](zero_init_residual=args.zero_init_residual, T=args.T, connect_f=args.connect_f)",
                            "Call"
                        ],
                        [
                            "spiking_resnet.__dict__[args.model](zero_init_residual=args.zero_init_residual, T=args.T)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_269": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SummaryWriter_286": {
                "variable": {
                    "value": "train_tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "output_dir + '_logs/train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "purge_step": {
                    "value": "purge_step_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.start_epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SummaryWriter_287": {
                "variable": {
                    "value": "te_tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "output_dir + '_logs/te'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "purge_step": {
                    "value": "purge_step_te",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.start_epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imagenet/utils.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_248": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_228": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}