{
    "Encoded-CGAN/data.py": {
        "torch": {
            "from_numpy_85": {
                "ndarray": {
                    "value": "_d",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "_d",
                    "possible_values": []
                }
            }
        }
    },
    "Encoded-CGAN/main.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "torch_devs",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "L1Loss_64": {
                "variable": {
                    "value": "gene_criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCELoss_65": {
                "variable": {
                    "value": "disc_criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "gene_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "gene_model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                }
            },
            "Adam_68": {
                "variable": {
                    "value": "disc_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "disc_model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                }
            },
            "LambdaLR_72": {
                "variable": {
                    "value": "gene_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "gene_optimizer",
                    "possible_values": [
                        [
                            "torch.optim.Adam(gene_model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lrdecay_lambda",
                    "possible_values": [
                        [
                            "lambda epoch: cosine_decay(epoch, warmup=args.warmup, max_epoch=args.maxep)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "LambdaLR_73": {
                "variable": {
                    "value": "disc_lr_scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "disc_optimizer",
                    "possible_values": [
                        [
                            "torch.optim.Adam(disc_model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lrdecay_lambda",
                    "possible_values": [
                        [
                            "lambda epoch: cosine_decay(epoch, warmup=args.warmup, max_epoch=args.maxep)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "ele_12km",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ele_12km",
                    "possible_values": [
                        [
                            "h5py.File('../dataset/elevation_12km_resized.hdf5', 'r')['elevation']",
                            "Subscript"
                        ],
                        [
                            "np.array([ele_12km] * mb_size)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(ele_12km, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ele_12km).to(torch_devs)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_86": {
                "variable": {
                    "value": "true_label",
                    "possible_values": []
                },
                "*size": {
                    "value": "dsc_out_size",
                    "possible_values": [
                        [
                            "(mb_size, 1, 4, 8)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "false_label",
                    "possible_values": []
                },
                "*size": {
                    "value": "dsc_out_size",
                    "possible_values": [
                        [
                            "(mb_size, 1, 4, 8)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "disc_label",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_label, false_label)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "disc_mb",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_mb, pred.detach())",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "gene_model",
                    "possible_values": []
                },
                "module": {
                    "value": "gene_model",
                    "possible_values": [
                        [
                            "encodedGenerator(in_ch=1, ncvar=len(args.cvars), use_ele=True, sam=args.sam, cam=args.cam, stage_chs=[args.mdlsz // 2 ** _d for _d in range(3)])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(gene_model)",
                            "Call"
                        ],
                        [
                            "gene_model.to(torch_devs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "disc_model",
                    "possible_values": []
                },
                "module": {
                    "value": "disc_model",
                    "possible_values": [
                        [
                            "discModel()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(disc_model)",
                            "Call"
                        ],
                        [
                            "disc_model.to(torch_devs)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_138": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "gene_model.module.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/mdl-it%05d.pth' % (itr_out_dir, epoch)",
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "gene_model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/mdl-it%05d.pth' % (itr_out_dir, epoch)",
                    "possible_values": []
                }
            }
        }
    },
    "Encoded-CGAN/models.py": {
        "torch": {
            "CAM_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_14": {
                    "variable": {
                        "value": "self.amlp_layer",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.mlp_ops",
                        "possible_values": []
                    }
                },
                "Sigmoid_15": {
                    "variable": {
                        "value": "self.out_act",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "SAM_42": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_50": {
                    "variable": {
                        "value": "self.attention_layer",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.cnn_ops",
                        "possible_values": []
                    }
                }
            },
            "inception_box_65": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_96": {
                    "variable": {
                        "value": "self.conv1b1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.conv1b1_ops",
                        "possible_values": []
                    }
                },
                "Sequential_97": {
                    "variable": {
                        "value": "self.conv3b3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.conv3b3_ops",
                        "possible_values": []
                    }
                },
                "Sequential_98": {
                    "variable": {
                        "value": "self.conv5b5",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.conv5b5_ops",
                        "possible_values": []
                    }
                },
                "Sequential_99": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.maxpool_ops",
                        "possible_values": []
                    }
                }
            },
            "encodedGenerator_121": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_ch": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.use_sam": {
                    "value": "sam",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.use_cam": {
                    "value": "cam",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_169": {
                    "variable": {
                        "value": "self.cvar_inceps",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.cvar_inceps",
                        "possible_values": []
                    }
                },
                "Sequential_171": {
                    "variable": {
                        "value": "self.ich_layers",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.in_norm_ops",
                        "possible_values": []
                    }
                },
                "Sequential_177": {
                    "variable": {
                        "value": "self.up1_layers",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.up1_ops",
                        "possible_values": []
                    }
                },
                "Sequential_183": {
                    "variable": {
                        "value": "self.up2_layers",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.up2_ops",
                        "possible_values": []
                    }
                },
                "Sequential_201": {
                    "variable": {
                        "value": "self.out_layers",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.out_ops",
                        "possible_values": []
                    }
                }
            },
            "discModel_270": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_293": {
                    "variable": {
                        "value": "self.layers",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.operations",
                        "possible_values": []
                    }
                }
            },
            "max_18": {
                "variable": {
                    "value": "(_max_out, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "max_19": {
                "variable": {
                    "value": "(_max_out, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "_max_out",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "mean_21": {
                "variable": {
                    "value": "_avg_out",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "_avg_out",
                    "possible_values": []
                },
                "input": {
                    "value": "_avg_out",
                    "possible_values": [
                        [
                            "torch.mean(x, 2, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(_avg_out, -1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "max_53": {
                "variable": {
                    "value": "(_max_out, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "_avg_out",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_max_out, _avg_out)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "out_tmp",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_tmp] + cvar_outs",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "[_out_conv1b1, _out_conv3b3, _out_conv5b5, _out_maxpool]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.ele_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.ele_ops",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "out_tmp",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_tmp, ele_tmp]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_ch // r",
                    "possible_values": []
                }
            },
            "LeakyReLU_10": {
                "negative_slope": {
                    "value": "relu_a",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "in_ch // r",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Sigmoid_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o_ch // 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "negative_slope": {
                    "value": "relu_a",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o_ch // 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "relu_a",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "o_ch // 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "o_ch // 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "negative_slope": {
                    "value": "relu_a",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o_ch // 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_85": {
                "negative_slope": {
                    "value": "relu_a",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "o_ch // 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "o_ch // 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "negative_slope": {
                    "value": "relu_a",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_91": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o_ch // 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_94": {
                "negative_slope": {
                    "value": "relu_a",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.norm_chs",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "self.norm_chs",
                    "possible_values": []
                }
            },
            "LeakyReLU_136": {
                "negative_slope": {
                    "value": "relu_a",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_139": {
                "in_channels": {
                    "value": "stage_chs[0] + cvar_ch * ncvar",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "stage_chs[0]",
                    "possible_values": [
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_141": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_144": {
                "in_channels": {
                    "value": "stage_chs[1]",
                    "possible_values": [
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "stage_chs[1]",
                    "possible_values": [
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_146": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "in_channels": {
                    "value": "stage_chs[2]",
                    "possible_values": [
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "num_features": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "LeakyReLU_161": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_165": {
                "modules": {
                    "value": "[inception_box(in_ch=1, o_ch=cvar_ch), inception_box(in_ch=cvar_ch, o_ch=cvar_ch), inception_box(in_ch=cvar_ch, o_ch=cvar_ch), inception_box(in_ch=cvar_ch, o_ch=cvar_ch)]",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_276": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Conv2d_290": {
                "in_channels": {
                    "value": "out_chs[-1]",
                    "possible_values": [
                        [
                            "(128, 256, 512, 512)",
                            "Tuple"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sigmoid_291": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_152": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_155": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "Conv2d_283": {
                "in_channels": {
                    "value": "ic",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_285": {
                "num_features": {
                    "value": "oc",
                    "possible_values": []
                }
            },
            "LeakyReLU_286": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            }
        }
    },
    "Encoded-CGAN/util.py": {
        "torch": {}
    }
}