{
    "memory_saving_gradients.py": {
        "tensorflow": {
            "get_default_graph_350": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_26": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.op.node_def.device if isinstance(source, tf.Tensor) else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_collection_99": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_202": {
                "variable": {
                    "value": "grad_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ]
                    ]
                },
                "name": {
                    "value": "x.op.name + '_sg'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_204": {
                "variable": {
                    "value": "grad_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ]
                    ]
                }
            },
            "name_scope_347": {
                "name": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(micros)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_298": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.indices",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_299": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.indices",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "x.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test/deep_imagenet_benchmark.py": {
        "tensorflow": {
            "OptimizerOptions_81": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_82": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, HEIGHT, WIDTH, DEPTH))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_96": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(inputs, True)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, NUM_CLASSES))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_98": {
                "variable": {
                    "value": "l2_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RunMetadata_111": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_113": {
                "variable": {
                    "value": "kwargs[options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_149": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.gradients(loss, tf.trainable_variables())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_85": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=150000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_149": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy + _WEIGHT_DECAY * l2_penalty",
                            "BinOp"
                        ],
                        [
                            "create_loss()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_82": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_98": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/deep_resnet_benchmark.py": {
        "tensorflow": {
            "OptimizerOptions_65": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_66": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, HEIGHT, WIDTH, DEPTH))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_82": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(inputs, True)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, NUM_CLASSES))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_84": {
                "variable": {
                    "value": "l2_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RunMetadata_97": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_99": {
                "variable": {
                    "value": "kwargs[options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_135": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.gradients(loss, tf.trainable_variables())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_69": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=150000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_135": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy + _WEIGHT_DECAY * l2_penalty",
                            "BinOp"
                        ],
                        [
                            "create_loss()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_66": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_84": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/imagenet_correctness_test.py": {
        "tensorflow": {
            "RunMetadata_73": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_75": {
                "variable": {
                    "value": "kwargs[options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OptimizerOptions_103": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_104": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_105": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=150000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([BATCH_SIZE, HEIGHT, WIDTH, DEPTH]) / 1000",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_124": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(inputs, True)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=[BATCH_SIZE, NUM_CLASSES]) / 1000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_130": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MomentumOptimizer_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "_INITIAL_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1 * BATCH_SIZE / 128",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "_MOMENTUM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                }
            },
            "get_collection_136": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_151": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_138": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy + _WEIGHT_DECAY * tf.add_n([tf.nn.l2_loss(v) for v in tf.trainable_variables()])",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_147": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_gpu_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_110": {
                "shape": {
                    "value": "[BATCH_SIZE, HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_111": {
                "shape": {
                    "value": "[BATCH_SIZE, NUM_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_155": {
                "name": {
                    "value": "remember",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "op.outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_initializer_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_104": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_127": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "trainable_variables_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_128": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/imagenet_test.py": {
        "tensorflow": {
            "RunMetadata_84": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_86": {
                "variable": {
                    "value": "kwargs[options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OptimizerOptions_114": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_115": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_116": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=150000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, HEIGHT, WIDTH, DEPTH))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_132": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(inputs, False)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, NUM_CLASSES))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_138": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_150": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_169": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_164": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_gpu_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_173": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "op.outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_initializer_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_115": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/keras_test.py": {
        "tensorflow": {
            "load_data_23": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_35": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.to_categorical(y_train, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "to_categorical_36": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.to_categorical(y_test, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_39": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(784,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_41": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_43": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSprop_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/linearize.py": {
        "tensorflow": {
            "get_default_graph_387": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_51": {
                "variable": {
                    "value": "controls_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_145": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/linearize_test.py": {
        "tensorflow": {
            "get_default_graph_96": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_113": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_119": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[a0, b0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_120": {
                "variable": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "[b]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[a0, b0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_132": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_133": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.Variable(1.0)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_134": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(a)",
                            "Call"
                        ],
                        [
                            "result[0] + result[1] + c",
                            "BinOp"
                        ],
                        [
                            "result[0] + result[1] + c",
                            "BinOp"
                        ],
                        [
                            "tf.add_n([result[0], result[1], c], name='b')",
                            "Call"
                        ],
                        [
                            "tf.constant([4, 5, 6])",
                            "Call"
                        ]
                    ]
                }
            },
            "OptimizerOptions_149": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_150": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, HEIGHT, WIDTH, DEPTH))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((BATCH_SIZE, HEIGHT, WIDTH, DEPTH))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_173": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(inputs, True)",
                            "Call"
                        ],
                        [
                            "network(inputs, False)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, NUM_CLASSES))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((BATCH_SIZE, NUM_CLASSES))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_175": {
                "variable": {
                    "value": "l2_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, HEIGHT, WIDTH, DEPTH))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((BATCH_SIZE, HEIGHT, WIDTH, DEPTH))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_198": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(inputs, True)",
                            "Call"
                        ],
                        [
                            "network(inputs, False)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, NUM_CLASSES))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((BATCH_SIZE, NUM_CLASSES))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_206": {
                "variable": {
                    "value": "ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_223": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy + _WEIGHT_DECAY * l2_penalty",
                            "BinOp"
                        ],
                        [
                            "_create_cifar_resnet_loss()",
                            "Call"
                        ],
                        [
                            "_create_imagenet_resnet_loss()",
                            "Call"
                        ],
                        [
                            "_create_cifar_resnet_loss()",
                            "Call"
                        ],
                        [
                            "_create_cifar_resnet_loss()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_235": {
                "variable": {
                    "value": "ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_252": {
                "variable": {
                    "value": "ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_255": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy + _WEIGHT_DECAY * l2_penalty",
                            "BinOp"
                        ],
                        [
                            "_create_cifar_resnet_loss()",
                            "Call"
                        ],
                        [
                            "_create_imagenet_resnet_loss()",
                            "Call"
                        ],
                        [
                            "_create_cifar_resnet_loss()",
                            "Call"
                        ],
                        [
                            "_create_cifar_resnet_loss()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_268": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_269": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 5, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_270": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.Variable(1.0)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_272": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[7, 8, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_313": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_314": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 5, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "top_k_315": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.Variable(1.0)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "result",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_317": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[7, 8, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_325": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_326": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "top_k_327": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.Variable(1.0)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "result",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_328": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[result[0], result[1], c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_329": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[7]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_337": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_338": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 5, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_340": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[7, 8, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_341": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[7, 8, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_362": {
                "variable": {
                    "value": "node0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "leaf0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_leaf(0)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "merge0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_153": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=3000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_205": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_218": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_234": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_251": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_353": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_358": {
                "variable": {
                    "value": "merge_node",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.Variable(1.0)",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1], name='a')",
                            "Call"
                        ],
                        [
                            "tf.constant([1, 2, 3])",
                            "Call"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(a)",
                            "Call"
                        ],
                        [
                            "result[0] + result[1] + c",
                            "BinOp"
                        ],
                        [
                            "result[0] + result[1] + c",
                            "BinOp"
                        ],
                        [
                            "tf.add_n([result[0], result[1], c], name='b')",
                            "Call"
                        ],
                        [
                            "tf.constant([4, 5, 6])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'leaf' + str(i)",
                            "BinOp"
                        ],
                        [
                            "'merge' + str(i)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reset_default_graph_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_57": {
                "ys": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[a0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_90": {
                "ys": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[a0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_150": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_175": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/mem_util_test.py": {
        "tensorflow": {
            "fill_33": {
                "variable": {
                    "value": "A0",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "A0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_35": {
                "variable": {
                    "value": "Bn",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "Bn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunMetadata_49": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_50": {
                "variable": {
                    "value": "kwargs[options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OptimizerOptions_59": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_60": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_63": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=150000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_26": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A0",
                            "variable"
                        ],
                        [
                            "tf.tanh(A, name='A' + str(L))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'A' + str(L)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_36": {
                "ys": {
                    "value": "[An]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[A0]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[Bn]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_71": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_91": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_95": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_99": {
                "*inputs": {
                    "value": "b0.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "c0.op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_gpu_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_111": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_30": {
                "ys": {
                    "value": "[An]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[A0]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[Bn]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GraphOptions_60": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/memory_test.py": {
        "tensorflow": {
            "RunMetadata_44": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_45": {
                "variable": {
                    "value": "kwargs[options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OptimizerOptions_56": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_57": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InteractiveSession_62": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=150000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_74": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_98": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_131": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_159": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_177": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_201": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_228": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_237": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "[a + b]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[a0, b0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_258": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_293": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_325": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_355": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_393": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_424": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_455": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_484": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_517": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_544": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_579": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_614": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_647": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_85": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_random_ops._random_uniform((n,), dtype, name='u')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_random_ops._random_uniform((n,), dtype, name='x')",
                            "Call"
                        ],
                        [
                            "tf.maximum(upper, y, name='cl')",
                            "Call"
                        ],
                        [
                            "tf.minimum(upper, y, name='cu')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_88": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_random_ops._random_uniform((n,), dtype, name='u')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_random_ops._random_uniform((n,), dtype, name='x')",
                            "Call"
                        ],
                        [
                            "tf.maximum(upper, y, name='cl')",
                            "Call"
                        ],
                        [
                            "tf.minimum(upper, y, name='cu')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_363": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "nodes[10]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_to_collection_364": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "nodes[20]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reset_default_graph_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_483": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_543": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_613": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_646": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_106": {
                "control_inputs": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_433": {
                "control_inputs": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_464": {
                "control_inputs": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_525": {
                "control_inputs": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_553": {
                "control_inputs": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_561": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_588": {
                "control_inputs": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_596": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_630": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_663": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_58": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_107": {
                "ys": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[a0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_434": {
                "ys": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[a0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_465": {
                "ys": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[a0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_526": {
                "ys": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[a0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test/mnist_correctness_test.py": {
        "tensorflow": {
            "reshape_42": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_59": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "max_pooling2d_71": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=inputs, filters=32, kernel_size=[5, 5], padding='same', activation=tf.nn.relu, data_format=data_format)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2, data_format=data_format)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "max_pooling2d_91": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=64, kernel_size=[5, 5], padding='same', activation=tf.nn.relu, data_format=data_format)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2, data_format=data_format)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_103": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "dense_112": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RunMetadata_124": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_126": {
                "variable": {
                    "value": "kwargs[options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OptimizerOptions_151": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_152": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_166": {
                "variable": {
                    "value": "tf_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "device_name": {
                    "value": "TEST_DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "str"
                        ]
                    ]
                }
            },
            "Variable_176": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform((FLAGS_batch_size, 28 ** 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_177": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.concat([tf.ones((FLAGS_batch_size, 1)), tf.zeros((FLAGS_batch_size, 9))], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_193": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=dropout, units=10)",
                            "Call"
                        ],
                        [
                            "mnist_model(images, tf.estimator.ModeKeys.TRAIN, 'channels_last')",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.concat([tf.ones((FLAGS_batch_size, 1)), tf.zeros((FLAGS_batch_size, 9))], axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_196": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_198": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_199": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_52": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_155": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=150000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_164": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_177": {
                "values": {
                    "value": "[tf.ones((FLAGS_batch_size, 1)), tf.zeros((FLAGS_batch_size, 9))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_152": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_177": {
                "shape": {
                    "value": "(FLAGS_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "shape": {
                    "value": "(FLAGS_batch_size, 9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test/multiple_memory_obtain_test.py": {
        "tensorflow": {
            "ConfigProto_20": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_34": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "fill_35": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "RunMetadata_77": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_78": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_21": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False, graph_options=tf.GraphOptions(optimizer_options=tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_40": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reset_default_graph_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_58": {
                "ys": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "nodes[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "[a0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_20": {
                "optimizer_options": {
                    "value": "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "OptimizerOptions_20": {
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test/pixel_cnn_pp/model.py": {
        "tensorflow": {
            "concat_36": {
                "variable": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, tf.ones(xs[:-1] + [1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.int_shape(f)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_101": {
                "variable": {
                    "value": "x_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nn.nin(nn.concat_elu(f), 3, init_scale=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "x_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(nn.nin(nn.concat_elu(f), 3, init_scale=0.1))",
                            "Call"
                        ],
                        [
                            "tf.split(x_sample, 10, 0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_to_collection_61": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_list + ul_list",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_69": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_70": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_78": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_79": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_87": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_shifted_deconv2d(u, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(u, u_list.pop(), conv=nn.down_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_88": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_36": {
                "shape": {
                    "value": "xs[:-1] + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_68": {
                "values": {
                    "value": "[u, ul_list.pop()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_77": {
                "values": {
                    "value": "[u, ul_list.pop()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_86": {
                "values": {
                    "value": "[u, ul_list.pop()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_91": {
                "features": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_111": {
                "features": {
                    "value": "ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ],
                        [
                            "nn.down_right_shifted_deconv2d(ul, num_filters=nr_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "nn.gated_resnet(ul, tf.concat([u, ul_list.pop()], 3), conv=nn.down_right_shifted_conv2d)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/pixel_cnn_pp/nn.py": {
        "tensorflow": {
            "reduce_max_20": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_21": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_27": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l[:, :, :, nr_mix:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "xs + [nr_mix * 3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_54": {
                "variable": {
                    "value": "log_scales",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l[:, :, :, :, nr_mix:2 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l[:, :, :, :, 2 * nr_mix:3 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "means[:, :, :, 1, :] + coeffs[:, :, :, 0, :] * x[:, :, :, 0, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "m3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "means[:, :, :, 2, :] + coeffs[:, :, :, 1, :] * x[:, :, :, 0, :] + coeffs[:, :, :, 2, :] * x[:, :, :, 1, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(means[:, :, :, 0, :], [xs[0], xs[1], xs[2], 1, nr_mix]), m2, m3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "inv_stdv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-log_scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "cdf_plus",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "plus_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "cdf_min",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_81": {
                "condition": {
                    "value": "cdf_delta > 1e-05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(tf.maximum(cdf_delta, 1e-12))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "log_pdf_mid - np.log(127.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l[:, :, :, nr_mix:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "xs + [nr_mix * 3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_96": {
                "variable": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(logit_probs - tf.log(-tf.log(tf.random_uniform(logit_probs.get_shape(), minval=1e-05, maxval=1.0 - 1e-05))), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nr_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(ls[-1] / 10)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.argmax(logit_probs - tf.log(-tf.log(tf.random_uniform(logit_probs.get_shape(), minval=1e-05, maxval=1.0 - 1e-05))), 3), depth=nr_mix, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sel, xs[:-1] + [1, nr_mix])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "xs[:-1] + [1, nr_mix]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l[:, :, :, :, :nr_mix] * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_100": {
                "variable": {
                    "value": "log_scales",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.tanh(l[:, :, :, :, 2 * nr_mix:3 * nr_mix]) * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_106": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(x[:, :, :, 0], -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_107": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(x[:, :, :, 1] + coeffs[:, :, :, 0] * x0, -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_108": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(x[:, :, :, 2] + coeffs[:, :, :, 1] * x0 + coeffs[:, :, :, 2] * x1, -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_132": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "adam_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_286": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(c1, num_filters * 2, init_scale=0.1)",
                            "Call"
                        ],
                        [
                            "c2 + tf.reshape(tf.matmul(h, hw), [xs[0], 1, 1, 2 * num_filters])",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_302": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_313": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "elu_15": {
                "features": {
                    "value": "tf.concat([x, -x], axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_109": {
                "values": {
                    "value": "[tf.reshape(x0, xs[:-1] + [1]), tf.reshape(x1, xs[:-1] + [1]), tf.reshape(x2, xs[:-1] + [1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_129": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost_or_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "mg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(p.get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "p.name + '_adam_mg'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_149": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_204": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, W, [1] + stride + [1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_239": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[xs[0], xs[1] * stride[0], xs[2] * stride[1], num_filters]",
                            "List"
                        ],
                        [
                            "[xs[0], xs[1] * stride[0] + filter_size[0] - 1, xs[2] * stride[1] + filter_size[1] - 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] + stride + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_260": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [num_units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_274": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), num_filters)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), num_filters)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_294": {
                "values": {
                    "value": "[tf.zeros([xs[0], 1, xs[2], xs[3]]), x[:, :xs[1] - 1, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_298": {
                "values": {
                    "value": "[tf.zeros([xs[0], xs[1], 1, xs[3]]), x[:, :, :xs[2] - 1, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_15": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_22": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(x - m2), axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_28": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(x - m), axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "input_tensor": {
                    "value": "tf.square(127.5 * (x - xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "xs + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "shape": {
                    "value": "xs + [nr_mix]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_66": {
                "features": {
                    "value": "plus_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_67": {
                "features": {
                    "value": "min_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x < -0.999, log_cdf_plus, tf.where(x > 0.999, log_one_minus_cdf_min, tf.where(cdf_delta > 1e-05, tf.log(tf.maximum(cdf_delta, 1e-12)), log_pdf_mid - np.log(127.5))))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_probs, 3) + log_prob_from_logits(logit_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_96": {
                "input": {
                    "value": "logit_probs - tf.log(-tf.log(tf.random_uniform(logit_probs.get_shape(), minval=1e-05, maxval=1.0 - 1e-05)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "l[:, :, :, :, nr_mix:2 * nr_mix] * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_106": {
                "x": {
                    "value": "x[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_107": {
                "x": {
                    "value": "x[:, :, :, 1] + coeffs[:, :, :, 0] * x0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_108": {
                "x": {
                    "value": "x[:, :, :, 2] + coeffs[:, :, :, 1] * x0 + coeffs[:, :, :, 2] * x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_136": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(p.get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "p.name + '_adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_name + '_' + str(counters[layer_name])",
                            "BinOp"
                        ],
                        [
                            "get_name('dense', counters)",
                            "Call"
                        ],
                        [
                            "get_name('conv2d', counters)",
                            "Call"
                        ],
                        [
                            "get_name('deconv2d', counters)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_177": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_name + '_' + str(counters[layer_name])",
                            "BinOp"
                        ],
                        [
                            "get_name('dense', counters)",
                            "Call"
                        ],
                        [
                            "get_name('conv2d', counters)",
                            "Call"
                        ],
                        [
                            "get_name('deconv2d', counters)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_207": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_name + '_' + str(counters[layer_name])",
                            "BinOp"
                        ],
                        [
                            "get_name('dense', counters)",
                            "Call"
                        ],
                        [
                            "get_name('conv2d', counters)",
                            "Call"
                        ],
                        [
                            "get_name('deconv2d', counters)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_243": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_284": {
                "tensor": {
                    "value": "tf.matmul(h, hw)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], 1, 1, 2 * num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_287": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('b', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "tf.exp(x - m2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_28": {
                "input_tensor": {
                    "value": "tf.exp(x - m)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_33": {
                "x": {
                    "value": "1e-10 + tf.reduce_sum(tf.square(127.5 * (x - xs)), 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "input_tensor": {
                    "value": "tf.square(127.5 * (x_sample[i] - x_sample[j]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "means[:, :, :, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xs[0], xs[1], xs[2], 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_70": {
                "features": {
                    "value": "mid_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_stdv * centered_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "log_sum_exp(log_probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "log_sum_exp(log_probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_101": {
                "x": {
                    "value": "l[:, :, :, :, 2 * nr_mix:3 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_105": {
                "x": {
                    "value": "log_scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(l[:, :, :, :, nr_mix:2 * nr_mix], -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.reduce_sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, 4), -7.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_109": {
                "tensor": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.maximum(x[:, :, :, 2] + coeffs[:, :, :, 1] * x0 + coeffs[:, :, :, 2] * x1, -1.0), 1.0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "xs[:-1] + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "shape": {
                    "value": "p.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_144": {
                "x": {
                    "value": "mg_hat + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_173": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(V), [0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "tensor": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g / tf.sqrt(tf.reduce_sum(tf.square(V), [0]))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_180": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_201": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_201": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_204": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [1, 1, 1, num_filters]) * tf.nn.l2_normalize(V, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(g, [1, 1, num_filters, 1]) * tf.nn.l2_normalize(V, [0, 1, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] + stride + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_236": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, num_filters, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_236": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, xs + [1]) + tf.zeros(xs + [nr_mix])",
                            "BinOp"
                        ],
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scaler, [1, num_units]) * x + tf.reshape(b, [1, num_units])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=0)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1] + stride + [1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, target_shape, [1] + stride + [1], padding=pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, axis=[0, 1, 2])",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [filter_size[0] - 1, 0], [filter_size[1] - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "deconv2d(x, num_filters, filter_size=filter_size, pad='VALID', stride=stride, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "get_name('conditional_weights', counters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_284": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "hw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('hw', ema, shape=[int_shape(h)[-1], 2 * num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "hw.initialized_value()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_294": {
                "shape": {
                    "value": "[xs[0], 1, xs[2], xs[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "shape": {
                    "value": "[xs[0], xs[1], 1, xs[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_22": {
                "x": {
                    "value": "x - m2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_28": {
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_40": {
                "x": {
                    "value": "1e-10 + tf.reduce_sum(tf.square(127.5 * (x_sample[i] - x_sample[j])), 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_81": {
                "x": {
                    "value": "tf.maximum(cdf_delta, 1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_96": {
                "x": {
                    "value": "tf.random_uniform(logit_probs.get_shape(), minval=1e-05, maxval=1.0 - 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_105": {
                "x": {
                    "value": "1.0 - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "shape": {
                    "value": "p.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_142": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_units], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('g', ema, shape=[num_filters], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_143": {
                "x": {
                    "value": "mom2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1.0, 'adam_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_165": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_167": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_169": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_173": {
                "input_tensor": {
                    "value": "tf.square(V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "x": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_179": {
                "control_inputs": {
                    "value": "[g.assign(g * scale_init), b.assign_add(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_194": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_196": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_198": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_208": {
                "x": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_209": {
                "control_inputs": {
                    "value": "[g.assign(g * scale_init), b.assign_add(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_229": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_231": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_233": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_244": {
                "x": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_245": {
                "control_inputs": {
                    "value": "[g.assign(g * scale_init), b.assign_add(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_81": {
                "x": {
                    "value": "cdf_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdf_plus - cdf_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_138": {
                "x": {
                    "value": "mom1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1.0, 'adam_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_173": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_var_maybe_avg('V', ema, shape=[int(x.get_shape()[1]), num_units], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [int(x.get_shape()[-1]), num_filters], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "get_var_maybe_avg('V', ema, shape=filter_size + [num_filters, int(x.get_shape()[-1])], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_281": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_33": {
                "x": {
                    "value": "127.5 * (x - xs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_40": {
                "x": {
                    "value": "127.5 * (x_sample[i] - x_sample[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test/pixel_cnn_test.py": {
        "tensorflow": {
            "set_random_seed_54": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "x_init",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.init_batch_size,) + obs_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_102": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "name_": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "func_": {
                    "value": "model_spec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_108": {
                "variable": {
                    "value": "all_params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_109": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "args.polyak_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_110": {
                "variable": {
                    "value": "maintain_averages_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema.apply(all_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "tf_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_204": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "y_init",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.init_batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_90": {
                "variable": {
                    "value": "h_init",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(args.init_batch_size,))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_num_labels()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "nn.adam_updates(all_params, grads[0], lr=tf_lr, mom1=0.95, mom2=0.9995)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "maintain_averages_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.group(ema.apply(all_params))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_84": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.batch_size,) + obs_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_155": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_92": {
                "indices": {
                    "value": "tf.Variable(y_sample[i], trainable=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_num_labels()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_93": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_94": {
                "indices": {
                    "value": "ys[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_num_labels()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_119": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "initial_value": {
                    "value": "y_sample[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_135": {
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/resnet_correctness_test.py": {
        "tensorflow": {
            "OptimizerOptions_61": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_62": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, HEIGHT, WIDTH, DEPTH))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_78": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(inputs, True)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, NUM_CLASSES))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_80": {
                "variable": {
                    "value": "l2_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RunMetadata_93": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_95": {
                "variable": {
                    "value": "kwargs[options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_134": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_140": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy + _WEIGHT_DECAY * l2_penalty",
                            "BinOp"
                        ],
                        [
                            "create_loss()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_142": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_143": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy + _WEIGHT_DECAY * l2_penalty",
                            "BinOp"
                        ],
                        [
                            "create_loss()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_65": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=150000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_gpu_available_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_123": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_gpu_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_137": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "op.outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_62": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_80": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/resnet_model.py": {
        "tensorflow": {
            "relu_51": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_93": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME if strides == 1 else VALID",
                    "type": "IfExp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'conv2d_%d' % (conv2d_counter,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_47": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BATCH_NORM_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.997",
                            "float"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "_BATCH_NORM_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                },
                "center": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_74": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [pad_beg, pad_end], [pad_beg, pad_end]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_77": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_223": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_257": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_pooling2d_273": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_276": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_avg_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_278": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_279": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_317": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_pooling2d_333": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_336": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_avg_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_338": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_339": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_375": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_376": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_379": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_max_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_pooling2d_399": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_402": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_avg_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_403": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[inputs.get_shape()[0].value, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_404": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_405": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_440": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_441": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_444": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_max_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_pooling2d_464": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_built_with_cuda() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if tf.test.is_gpu_available() else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_467": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_avg_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_468": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[inputs.get_shape()[0].value, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_469": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_470": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_252": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_312": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_370": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_435": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inputs, axis=1 if data_format == 'channels_first' else 3, momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True, scale=True, training=is_training, fused=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, is_training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=16, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=16, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=32, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=building_block, blocks=num_blocks, strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=8, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=64, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=64, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=128, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=256, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=512, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=1, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=3, strides=2, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[0], strides=1, is_training=is_training, name='block_layer1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[1], strides=2, is_training=is_training, name='block_layer2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[2], strides=2, is_training=is_training, name='block_layer3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=1, block_fn=block_fn, blocks=layers[3], strides=2, is_training=is_training, name='block_layer4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_relu(inputs, is_training, data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=7, strides=1, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape()[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=inputs, units=num_classes)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_dense')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_built_with_cuda_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_built_with_cuda_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_built_with_cuda_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/resnet_test.py": {
        "tensorflow": {
            "OptimizerOptions_60": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_61": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(optimizer_options=optimizer_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, HEIGHT, WIDTH, DEPTH))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_77": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(inputs, True)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((BATCH_SIZE, NUM_CLASSES))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_79": {
                "variable": {
                    "value": "l2_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RunMetadata_92": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_94": {
                "variable": {
                    "value": "kwargs[options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_127": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_133": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy + _WEIGHT_DECAY * l2_penalty",
                            "BinOp"
                        ],
                        [
                            "create_loss()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_64": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=150000, graph_options=tf.GraphOptions(optimizer_options=optimizer_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_gpu_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_130": {
                "name": {
                    "value": "checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "op.outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_61": {
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_79": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/util.py": {
        "tensorflow": {
            "identity_153": {
                "variable": {
                    "value": "node0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "leaf0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_leaf(0)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "merge0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_171": {
                "variable": {
                    "value": "a0_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_172": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "a0_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((n,), dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name_prefix + '00'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_191": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "name_prefix + '00'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_209": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "fill_210": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_random_ops._random_uniform((n2, n2), dtype, name=name)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_226": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "name_prefix + '00'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_244": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "np.float32",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "name_prefix + '00'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_323": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_147": {
                "variable": {
                    "value": "merge_node",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.add(a, a_nonlin, name=name + '_add')",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.sigmoid(tf.add(a, a_nonlin, name=name + '_add'))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'leaf' + str(i)",
                            "BinOp"
                        ],
                        [
                            "'merge' + str(i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_177": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.add(a, a_nonlin, name=name + '_add')",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.sigmoid(tf.add(a, a_nonlin, name=name + '_add'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'leaf' + str(i)",
                            "BinOp"
                        ],
                        [
                            "'merge' + str(i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_197": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.add(a, a_nonlin, name=name + '_add')",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.sigmoid(tf.add(a, a_nonlin, name=name + '_add'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'leaf' + str(i)",
                            "BinOp"
                        ],
                        [
                            "'merge' + str(i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_215": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.add(a, a_nonlin, name=name + '_add')",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.sigmoid(tf.add(a, a_nonlin, name=name + '_add'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'leaf' + str(i)",
                            "BinOp"
                        ],
                        [
                            "'merge' + str(i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "'%s%02d' % (name_prefix, i)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_231": {
                "variable": {
                    "value": "a_nonlin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.add(a, a_nonlin, name=name + '_add')",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.sigmoid(tf.add(a, a_nonlin, name=name + '_add'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_tanh'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_232": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.add(a, a_nonlin, name=name + '_add')",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.sigmoid(tf.add(a, a_nonlin, name=name + '_add'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_nonlin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(a, name=name + '_tanh')",
                            "Call"
                        ],
                        [
                            "tf.tanh(a, name=name + '_tanh')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_add'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_249": {
                "variable": {
                    "value": "a_nonlin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.add(a, a_nonlin, name=name + '_add')",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.sigmoid(tf.add(a, a_nonlin, name=name + '_add'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_tanh'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_250": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(a, a_nonlin, name=name + '_add')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_320": {
                "name": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(micros)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_250": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.tanh(a, name=name)",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.add(a, a_nonlin, name=name + '_add')",
                            "Call"
                        ],
                        [
                            "a0",
                            "variable"
                        ],
                        [
                            "tf.sigmoid(tf.add(a, a_nonlin, name=name + '_add'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_nonlin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(a, name=name + '_tanh')",
                            "Call"
                        ],
                        [
                            "tf.tanh(a, name=name + '_tanh')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_add'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test/util_test.py": {
        "tensorflow": {
            "reset_default_graph_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}