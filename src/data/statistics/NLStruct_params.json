{
    "deepstruct/models/graph.py": {
        "torch": {
            "zeros_107": {
                "variable": {
                    "value": "data_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_248": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "modelconf.tensor_mod.FloatTensor(2).fill_(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_289": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "modelconf.tensor_mod.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_310": {
                "variable": {
                    "value": "self.node_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_vals, self.hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_316": {
                "variable": {
                    "value": "self.pair_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_vals * 2, self.hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "variable": {
                    "value": "self.unary_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.filter_size - 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_363": {
                "variable": {
                    "value": "self.pair_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_vals * 2, self.hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_390": {
                "tensors": {
                    "value": "[node_potentials, pair_potentials]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_292": {
                "ndarray": {
                    "value": "-1 * np.ones((len(obs_features), self.num_potentials))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "in_features": {
                    "value": "num_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_313": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_317": {
                "in_features": {
                    "value": "num_vals * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_319": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_326": {
                "ndarray": {
                    "value": "np.zeros((len(obs_features), self.num_vals * 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_331": {
                "ndarray": {
                    "value": "np.zeros((len(obs_features), self.num_vals))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_364": {
                "in_features": {
                    "value": "num_vals * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_366": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "deepstruct/models/modelconf.py": {
        "torch": {}
    },
    "deepstruct/models/pairwise_models.py": {
        "torch": {}
    },
    "experiments/train_tagging_baseline.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_25": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(results)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "features_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "save_img_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "save_label_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "tmp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * len(node_regions)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.unary_model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tmp",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.pair_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "modelconf.tensor_mod.FloatTensor(len(pair_regions) * num_vals * num_vals).uniform_(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ExponentialLR_240": {
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "save_img_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "save_label_file",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_tagging_unary.py": {
        "torch": {}
    },
    "experiments/train_words_pots.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[info[0] for info in batch_info]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[info[1] for info in batch_info]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('batch_size', 10)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "words_collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "WordsDataset(args.data_directory, TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('batch_size', 10)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "words_collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_122": {
                "variable": {
                    "value": "model_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['l_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "WordsDataset(args.data_directory, TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "words_collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prepare_model()",
                            "Call"
                        ],
                        [
                            "nn.Sequential(nn.Linear(28 * 28, hidden_size), nn.ReLU(), nn.Linear(hidden_size, 26))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "classifier_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "26",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiMarginLoss_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "skimage.io.imread(img_path, as_gray=True).flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LambdaLR_118": {
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda epoch: 1.0 / math.sqrt(epoch) if epoch > 0 else 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "datum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "ndarray": {
                    "value": "np.array([int(label.strip()) for label in fin.readlines()])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}