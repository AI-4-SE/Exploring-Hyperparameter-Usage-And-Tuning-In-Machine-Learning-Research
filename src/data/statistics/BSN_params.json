{
    "diff_gamma-CNN/gan/gan.py": {
        "tensorflow": {
            "ConfigProto_470": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_80": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.z_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.latent.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.real_image_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.image_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "real_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "self.d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_131": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(interpolates, train=True, sn_op=NO_OPS)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[interpolates]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_140": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "self.d_loss_gp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.d_loss_gp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_147": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(self.real_image_pl, train=True, sn_op=NO_OPS)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[self.real_image_pl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "real_slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_156": {
                "variable": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "real_slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_158": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(self.fake_image_train_tf, train=True, sn_op=NO_OPS)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[self.fake_image_train_tf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_164": {
                "variable": {
                    "value": "fake_slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_167": {
                "variable": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fake_slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_170": {
                "variable": {
                    "value": "self.g_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.g_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.g_beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_177": {
                "variable": {
                    "value": "self.d_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.d_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.d_beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_183": {
                "variable": {
                    "value": "self.spectral_norm_update_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "self.SN_OP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_191": {
                "variable": {
                    "value": "self.g_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.g_summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_238": {
                "variable": {
                    "value": "self.d_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.d_summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_253": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./test/checkpoint'",
                            "str"
                        ],
                        [
                            "self.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "self.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, 'global_id-{}'.format(global_id))",
                            "Call"
                        ],
                        [
                            "checkpoint_dir",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FileWriter_364": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_471": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_118": {
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "input_tensor": {
                    "value": "self.d_real_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_138": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_154": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_165": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_187": {
                "name": {
                    "value": "loss/g/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_189": {
                "name": {
                    "value": "loss/g",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_194": {
                "name": {
                    "value": "loss/d/real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_196": {
                "name": {
                    "value": "loss/d/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_198": {
                "name": {
                    "value": "loss/d/gp",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_loss_gp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_200": {
                "name": {
                    "value": "loss/d",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_202": {
                "name": {
                    "value": "d/real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_real_image_train_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_205": {
                "name": {
                    "value": "d/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_fake_image_train_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_225": {
                "name": {
                    "value": "d/mean_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_227": {
                "name": {
                    "value": "d/min_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_229": {
                "name": {
                    "value": "d/max_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_231": {
                "name": {
                    "value": "d/mean_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_233": {
                "name": {
                    "value": "d/min_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_235": {
                "name": {
                    "value": "d/max_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_410": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_199": {
                "input_tensor": {
                    "value": "self.d_loss_gp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_204": {
                "input_tensor": {
                    "value": "self.d_real_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_207": {
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_221": {
                "name": {
                    "value": "'d/scale{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_scales[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_228": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_230": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_232": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_234": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_236": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_339": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='metric/' + k, simple_value=metric[k])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_216": {
                "name": {
                    "value": "'d/sigma{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_sigmas[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_212": {
                "name": {
                    "value": "'d/sigma{}_{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_sigmas[i][j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "diff_gamma-CNN/gan/metric.py": {
        "tensorflow": {
            "placeholder_55": {
                "variable": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.activations1_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_activations1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.activations2_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_activations2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_76": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_79": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_81": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_run_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(activations)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inception_score_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_162": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_165": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_167": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, self.inception_url, self.inception_frozen_graph, os.path.basename(self.inception_url)), output_tensor='logits:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "inception_score_run_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_89": {
                "value": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='fid_run_classifier')",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_181": {
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, self.inception_url, self.inception_frozen_graph, os.path.basename(self.inception_url)), output_tensor='logits:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='inception_score_run_classifier')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_84": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ],
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_176": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ],
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "diff_gamma-CNN/gan/network.py": {
        "tensorflow": {
            "Saver_36": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.all_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.all_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_15": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_21": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_130": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'scale{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.scale_initial)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.scale_trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "layer0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "layer4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "layer0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "layer4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "layer5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "layer6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "layer7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_64": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.mg, self.mg, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_77": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_88": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_99": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_110": {
                "x": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_133": {
                "value": {
                    "value": "self.scale_initial",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "diff_gamma-CNN/gan/op.py": {
        "tensorflow": {
            "reshape_10": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(input_.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_16": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_.get_shape().as_list()[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(input_.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_160": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(w, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "w / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + conv.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_179": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_87": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(w, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "w / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_20": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_39": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('matrix', [input_.get_shape().as_list()[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(matrix, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "matrix * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_106": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), output_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "biases * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bias_add_167": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), [-1] + conv.get_shape().as_list()[1:])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "biases * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_32": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_84": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_104": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_124": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_153": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "SN1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "SN2",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "diff_gamma-CNN/gan/sn.py": {
        "tensorflow": {
            "reshape_21": {
                "variable": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(W, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_19": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(W, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_38": {
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('u', [1, W_shape[-1]], initializer=tf.truncated_normal_initializer(), trainable=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(W_reshaped)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "v_ip1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_l2normalize(tf.matmul(u, tf.transpose(W_reshaped)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "a": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_47": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ip1",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_50": {
                "control_inputs": {
                    "value": "[u.assign(u_final)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ip1",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_64": {
                "name": {
                    "value": "update_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "u.assign(u_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_13": {
                "input_tensor": {
                    "value": "v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_47": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_ip1",
                            "variable"
                        ]
                    ]
                }
            },
            "transpose_55": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_ip1",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "diff_gamma-CNN/gan_task.py": {
        "tensorflow": {
            "ConfigProto_46": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_47": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "no_gamma-CNN/gan/gan.py": {
        "tensorflow": {
            "ConfigProto_442": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_78": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.z_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.latent.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.real_image_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.image_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "real_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "self.d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(1.0 + self.d_fake_image_train_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "self.d_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(1.0 - self.d_real_image_train_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_127": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(self.real_image_pl, train=True, sn_op=NO_OPS)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[self.real_image_pl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "real_slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_136": {
                "variable": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "real_slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_138": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(self.fake_image_train_tf, train=True, sn_op=NO_OPS)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[self.fake_image_train_tf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "variable": {
                    "value": "fake_slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_147": {
                "variable": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fake_slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_150": {
                "variable": {
                    "value": "self.g_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.g_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.g_beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_157": {
                "variable": {
                    "value": "self.d_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.d_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.d_beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_163": {
                "variable": {
                    "value": "self.spectral_norm_update_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "self.SN_OP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_171": {
                "variable": {
                    "value": "self.g_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.g_summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_211": {
                "variable": {
                    "value": "self.d_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.d_summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_226": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./test/checkpoint'",
                            "str"
                        ],
                        [
                            "self.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "self.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, 'global_id-{}'.format(global_id))",
                            "Call"
                        ],
                        [
                            "checkpoint_dir",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FileWriter_337": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_443": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_116": {
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_121": {
                "features": {
                    "value": "1.0 + self.d_fake_image_train_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_123": {
                "features": {
                    "value": "1.0 - self.d_real_image_train_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_134": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_145": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_167": {
                "name": {
                    "value": "loss/g/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_169": {
                "name": {
                    "value": "loss/g",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_174": {
                "name": {
                    "value": "loss/d/real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_176": {
                "name": {
                    "value": "loss/d/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_178": {
                "name": {
                    "value": "loss/d",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_180": {
                "name": {
                    "value": "d/real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_real_image_train_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_183": {
                "name": {
                    "value": "d/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_fake_image_train_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_198": {
                "name": {
                    "value": "d/mean_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_200": {
                "name": {
                    "value": "d/min_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_202": {
                "name": {
                    "value": "d/max_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_204": {
                "name": {
                    "value": "d/mean_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_206": {
                "name": {
                    "value": "d/min_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_208": {
                "name": {
                    "value": "d/max_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_383": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "input_tensor": {
                    "value": "self.d_real_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_185": {
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_199": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_201": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_203": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_205": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_207": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_209": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_312": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='metric/' + k, simple_value=metric[k])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_194": {
                "name": {
                    "value": "'d/sigma{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_sigmas[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_190": {
                "name": {
                    "value": "'d/sigma{}_{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_sigmas[i][j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "no_gamma-CNN/gan/metric.py": {
        "tensorflow": {
            "placeholder_55": {
                "variable": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.activations1_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_activations1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.activations2_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_activations2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_76": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_79": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_81": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_run_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(activations)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inception_score_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_162": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_165": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_167": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, self.inception_url, self.inception_frozen_graph, os.path.basename(self.inception_url)), output_tensor='logits:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "inception_score_run_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_89": {
                "value": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='fid_run_classifier')",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_181": {
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, self.inception_url, self.inception_frozen_graph, os.path.basename(self.inception_url)), output_tensor='logits:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='inception_score_run_classifier')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_84": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ],
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_176": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ],
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "no_gamma-CNN/gan/network.py": {
        "tensorflow": {
            "Saver_36": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.all_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.all_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_15": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_21": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "layer0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "layer4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "layer0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "layer4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "layer5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "layer6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "layer7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_64": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.mg, self.mg, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_77": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_88": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_99": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_110": {
                "x": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "no_gamma-CNN/gan/op.py": {
        "tensorflow": {
            "reshape_10": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(input_.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_16": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_.get_shape().as_list()[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(input_.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_98": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_152": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(w, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "w / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + conv.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_174": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_84": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(w, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "w / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_20": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_36": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('matrix', [input_.get_shape().as_list()[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(matrix, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "matrix * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_103": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), output_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_162": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), [-1] + conv.get_shape().as_list()[1:])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_35": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_81": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_101": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_121": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_159": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "SN1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "SN2",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "no_gamma-CNN/gan/sn.py": {
        "tensorflow": {
            "reshape_21": {
                "variable": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(W, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_19": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(W, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_38": {
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('u', [1, W_shape[-1]], initializer=tf.truncated_normal_initializer(), trainable=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(W_reshaped)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "v_ip1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_l2normalize(tf.matmul(u, tf.transpose(W_reshaped)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "a": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_47": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ip1",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_50": {
                "control_inputs": {
                    "value": "[u.assign(u_final)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ip1",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_64": {
                "name": {
                    "value": "update_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "u.assign(u_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_13": {
                "input_tensor": {
                    "value": "v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_47": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_ip1",
                            "variable"
                        ]
                    ]
                }
            },
            "transpose_55": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_ip1",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "no_gamma-CNN/gan_task.py": {
        "tensorflow": {
            "ConfigProto_47": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_48": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "no_gamma-ResNet/gan/gan.py": {
        "tensorflow": {
            "ConfigProto_622": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_108": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_230": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.g_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.g_beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_234": {
                "variable": {
                    "value": "self.d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.d_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.d_beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_315": {
                "variable": {
                    "value": "self.spectral_norm_update_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "self.SN_OP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_323": {
                "variable": {
                    "value": "self.g_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.g_summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_371": {
                "variable": {
                    "value": "self.d_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.d_summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_386": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./test/checkpoint'",
                            "str"
                        ],
                        [
                            "self.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "self.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, 'global_id-{}'.format(global_id))",
                            "Call"
                        ],
                        [
                            "checkpoint_dir",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FileWriter_497": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "self.z_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.latent.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "self.real_image_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.image_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "real_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_123": {
                "variable": {
                    "value": "self.z_tf_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.z_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_125": {
                "variable": {
                    "value": "self.real_image_tf_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.real_image_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_216": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_217": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(grads, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_239": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(self.real_image_tf_l[self.central_device2_id], train=True, sn_op=NO_OPS, var_device=self.gpu_devices[self.central_device2_id])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[self.real_image_tf_l[self.central_device2_id]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_246": {
                "variable": {
                    "value": "real_slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_249": {
                "variable": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "real_slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_251": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(self.fake_image_train_tf_l[self.central_device2_id], train=True, sn_op=NO_OPS, var_device=self.gpu_devices[self.central_device2_id])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[self.fake_image_train_tf_l[self.central_device2_id]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_258": {
                "variable": {
                    "value": "fake_slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_261": {
                "variable": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fake_slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_533": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='memory/peak_rss', simple_value=resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_540": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='memory/rss', simple_value=self.process.memory_info().rss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_546": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='memory/vms', simple_value=self.process.memory_info().vms)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_624": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_116": {
                "device_name": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_177": {
                "device_name": {
                    "value": "self.gpu_devices[self.central_device_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_210": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_238": {
                "device_name": {
                    "value": "self.gpu_devices[self.central_device2_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_287": {
                "device_name": {
                    "value": "self.gpu_devices[self.central_device2_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_311": {
                "device_name": {
                    "value": "self.gpu_devices[self.central_device_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_319": {
                "name": {
                    "value": "loss/g/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss_fake_l[self.central_device_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_321": {
                "name": {
                    "value": "loss/g",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss_l[self.central_device_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_326": {
                "name": {
                    "value": "loss/d/real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss_real_l[self.central_device2_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_328": {
                "name": {
                    "value": "loss/d/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss_fake_l[self.central_device2_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_330": {
                "name": {
                    "value": "loss/d",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss_l[self.central_device2_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_332": {
                "name": {
                    "value": "d/real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_real_image_train_tf_l[self.central_device2_id])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_336": {
                "name": {
                    "value": "d/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_fake_image_train_tf_l[self.central_device2_id])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_358": {
                "name": {
                    "value": "d/mean_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_360": {
                "name": {
                    "value": "d/min_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_362": {
                "name": {
                    "value": "d/max_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_364": {
                "name": {
                    "value": "d/mean_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_366": {
                "name": {
                    "value": "d/min_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_368": {
                "name": {
                    "value": "d/max_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_559": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "self.gpu_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_153": {
                "device_name": {
                    "value": "self.gpu_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_178": {
                "name": {
                    "value": "self.name_scopes[self.central_device_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_247": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_259": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_270": {
                "device_name": {
                    "value": "self.gpu_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_272": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(1.0 + self.d_fake_image_train_tf_l[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_274": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(1.0 - self.d_real_image_train_tf_l[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_297": {
                "device_name": {
                    "value": "self.gpu_devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_334": {
                "input_tensor": {
                    "value": "self.d_real_image_train_tf_l[self.central_device2_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_338": {
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf_l[self.central_device2_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_359": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_361": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_363": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_365": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_367": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_369": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_472": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='metric/' + k, simple_value=metric[k])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_133": {
                "name": {
                    "value": "self.name_scopes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_collection_144": {
                "variable": {
                    "value": "self.batch_norm_update_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scopes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_154": {
                "name": {
                    "value": "self.name_scopes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_271": {
                "name": {
                    "value": "self.name_scopes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_298": {
                "name": {
                    "value": "self.name_scopes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_354": {
                "name": {
                    "value": "'d/sigma{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_sigmas[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_272": {
                "features": {
                    "value": "1.0 + self.d_fake_image_train_tf_l[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_274": {
                "features": {
                    "value": "1.0 - self.d_real_image_train_tf_l[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_299": {
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf_l[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_350": {
                "name": {
                    "value": "'d/sigma{}_{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_sigmas[i][j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_346": {
                "name": {
                    "value": "'d/sigma{}_{}_{}'.format(i, j, k)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_sigmas[i][j][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "no_gamma-ResNet/gan/metric.py": {
        "tensorflow": {
            "placeholder_55": {
                "variable": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.activations1_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_activations1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.activations2_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_activations2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_76": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_79": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_81": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_run_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(activations)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inception_score_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_162": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_165": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_167": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, self.inception_url, self.inception_frozen_graph, os.path.basename(self.inception_url)), output_tensor='logits:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "inception_score_run_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_89": {
                "value": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='fid_run_classifier')",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_181": {
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, self.inception_url, self.inception_frozen_graph, os.path.basename(self.inception_url)), output_tensor='logits:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='inception_score_run_classifier')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_84": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ],
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_176": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ],
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "no_gamma-ResNet/gan/network.py": {
        "tensorflow": {
            "Saver_36": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.all_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.all_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_15": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_21": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "layer0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "layer4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "layer5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "layer6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "layer0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "layer4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "layer5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "layer6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.mg, self.mg, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_110": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_122": {
                "x": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_226": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "input_tensor": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "no_gamma-ResNet/gan/op.py": {
        "tensorflow": {
            "reshape_10": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(input_.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(input_.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_169": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.initializers.variance_scaling(scale=ini_scale, mode='fan_avg', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.initializers.variance_scaling(scale=ini_scale, mode='fan_avg', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(w, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "input_.get_shape().as_list()[2]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + conv.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_193": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_transpose_210": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "tf.constant(kernel, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(batch_size, h * k_size, w * k_size, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k_size, k_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ],
                        [
                            "'up_resnet'",
                            "Method Argument"
                        ],
                        [
                            "'down_resnet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_.get_shape().as_list()[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.variance_scaling(scale=ini_scale, mode='fan_avg', distribution='uniform')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ],
                        [
                            "'up_resnet'",
                            "Method Argument"
                        ],
                        [
                            "'down_resnet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'unpooling'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.variance_scaling(scale=ini_scale, mode='fan_avg', distribution='uniform')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_96": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.initializers.variance_scaling(scale=ini_scale, mode='fan_avg', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.initializers.variance_scaling(scale=ini_scale, mode='fan_avg', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(w, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "input_.get_shape().as_list()[2]",
                            "Subscript"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'unpooling'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.variance_scaling(scale=ini_scale, mode='fan_avg', distribution='uniform')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_175": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_196": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'unpooling'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ],
                        [
                            "'up_resnet'",
                            "Method Argument"
                        ],
                        [
                            "'down_resnet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_225": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_, matrix) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "unpooling(output, 2)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=2, strides=2, padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_240": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_, matrix) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "unpooling(output, 2)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=2, strides=2, padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_272": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ],
                        [
                            "'up_resnet'",
                            "Method Argument"
                        ],
                        [
                            "'down_resnet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_294": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_, matrix) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "unpooling(output, 2)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=2, strides=2, padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_16": {
                "device_name": {
                    "value": "var_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_37": {
                "device_name": {
                    "value": "var_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_43": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('matrix', [input_.get_shape().as_list()[1], output_size], tf.float32, tf.initializers.variance_scaling(scale=ini_scale, mode='fan_avg', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(matrix, update_collection=sn_op, with_sigma=True, var_device=var_device)",
                            "Call"
                        ],
                        [
                            "matrix * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'unpooling'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_86": {
                "device_name": {
                    "value": "var_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_110": {
                "device_name": {
                    "value": "var_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_117": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), output_shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(input_, tf.constant(kernel, dtype=tf.float32), output_shape=(batch_size, h * k_size, w * k_size, c), strides=[1, k_size, k_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_131": {
                "device_name": {
                    "value": "var_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_174": {
                "device_name": {
                    "value": "var_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ],
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_181": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), [-1] + conv.get_shape().as_list()[1:])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_212": {
                "value": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.einsum('ijk,klm', kernel1, kernel2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "block1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "block2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_276": {
                "name_or_scope": {
                    "value": "block1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_278": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_, matrix) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "unpooling(output, 2)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=2, strides=2, padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "block2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_310": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_, matrix) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "unpooling(output, 2)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "batch_norm()(output, train=train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=2.0)",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, hidden_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv2d(output, output_dim, d_h=1, d_w=1, k_h=k_h, k_w=k_w, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=2.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=2, strides=2, padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_312": {
                "name_or_scope": {
                    "value": "shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_330": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpooling(input_, 2)",
                            "Call"
                        ],
                        [
                            "conv2d(output2, output_dim, d_h=1, d_w=1, k_h=1, k_w=1, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=1.0)",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "conv2d(output2, output_dim, d_h=1, d_w=1, k_h=1, k_w=1, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=1.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output2, ksize=2, strides=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output2, ksize=2, strides=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "conv2d(output2, output_dim, d_h=1, d_w=1, k_h=1, k_w=1, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=1.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_334": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpooling(input_, 2)",
                            "Call"
                        ],
                        [
                            "conv2d(output2, output_dim, d_h=1, d_w=1, k_h=1, k_w=1, sn_op=None, with_sigma=False, var_device=var_device, ini_scale=1.0)",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "conv2d(output2, output_dim, d_h=1, d_w=1, k_h=1, k_w=1, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=1.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output2, ksize=2, strides=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output2, ksize=2, strides=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "conv2d(output2, output_dim, d_h=1, d_w=1, k_h=1, k_w=1, sn_op=sn_op, with_sigma=True, var_device=var_device, ini_scale=1.0, scale=scale, sn_mode=sn_mode)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_41": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "SN1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "SN2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_178": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "no_gamma-ResNet/gan/sn.py": {
        "tensorflow": {
            "reshape_21": {
                "variable": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(W, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_19": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(W, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('u', [1, W_shape[-1]], initializer=tf.truncated_normal_initializer(), trainable=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(W_reshaped)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "v_ip1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_l2normalize(tf.matmul(u, tf.transpose(W_reshaped)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_54": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_23": {
                "device_name": {
                    "value": "var_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_39": {
                "a": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_48": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ip1",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_51": {
                "control_inputs": {
                    "value": "[u.assign(u_final)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ip1",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_65": {
                "name": {
                    "value": "update_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "u.assign(u_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_13": {
                "input_tensor": {
                    "value": "v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_48": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_ip1",
                            "variable"
                        ]
                    ]
                }
            },
            "transpose_56": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_ip1",
                            "variable"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "no_gamma-ResNet/gan_task.py": {
        "tensorflow": {
            "ConfigProto_36": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_37": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "same_gamma-CNN/gan/gan.py": {
        "tensorflow": {
            "ConfigProto_470": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_80": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.z_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.latent.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.real_image_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.image_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "real_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "self.d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_131": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(interpolates, train=True, sn_op=NO_OPS)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[interpolates]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_140": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "self.d_loss_gp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.d_loss_gp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_147": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(self.real_image_pl, train=True, sn_op=NO_OPS)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[self.real_image_pl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "real_slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_156": {
                "variable": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "real_slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_158": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.discriminator.build(self.fake_image_train_tf, train=True, sn_op=NO_OPS)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "[self.fake_image_train_tf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_164": {
                "variable": {
                    "value": "fake_slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(gradients[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_167": {
                "variable": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fake_slopes + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_170": {
                "variable": {
                    "value": "self.g_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.g_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.g_beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_177": {
                "variable": {
                    "value": "self.d_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.d_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "self.d_beta2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_183": {
                "variable": {
                    "value": "self.spectral_norm_update_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "self.SN_OP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_191": {
                "variable": {
                    "value": "self.g_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.g_summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_238": {
                "variable": {
                    "value": "self.d_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.d_summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_253": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./test/checkpoint'",
                            "str"
                        ],
                        [
                            "self.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "self.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, 'global_id-{}'.format(global_id))",
                            "Call"
                        ],
                        [
                            "checkpoint_dir",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FileWriter_364": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_471": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_118": {
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "input_tensor": {
                    "value": "self.d_real_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_138": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_154": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_165": {
                "x": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_187": {
                "name": {
                    "value": "loss/g/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_189": {
                "name": {
                    "value": "loss/g",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_194": {
                "name": {
                    "value": "loss/d/real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_196": {
                "name": {
                    "value": "loss/d/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_198": {
                "name": {
                    "value": "loss/d/gp",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_loss_gp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_200": {
                "name": {
                    "value": "loss/d",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_202": {
                "name": {
                    "value": "d/real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_real_image_train_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_205": {
                "name": {
                    "value": "d/fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_fake_image_train_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_225": {
                "name": {
                    "value": "d/mean_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_227": {
                "name": {
                    "value": "d/min_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_229": {
                "name": {
                    "value": "d/max_real_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(self.d_real_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_231": {
                "name": {
                    "value": "d/mean_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_233": {
                "name": {
                    "value": "d/min_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_235": {
                "name": {
                    "value": "d/max_fake_slopes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(self.d_fake_slopes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_410": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_199": {
                "input_tensor": {
                    "value": "self.d_loss_gp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_204": {
                "input_tensor": {
                    "value": "self.d_real_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_207": {
                "input_tensor": {
                    "value": "self.d_fake_image_train_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_221": {
                "name": {
                    "value": "'d/scale{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_scales[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_228": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_230": {
                "input_tensor": {
                    "value": "self.d_real_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_232": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_234": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_236": {
                "input_tensor": {
                    "value": "self.d_fake_slopes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_339": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='metric/' + k, simple_value=metric[k])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_216": {
                "name": {
                    "value": "'d/sigma{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_sigmas[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_212": {
                "name": {
                    "value": "'d/sigma{}_{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_sigmas[i][j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "same_gamma-CNN/gan/metric.py": {
        "tensorflow": {
            "placeholder_55": {
                "variable": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.activations1_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_activations1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.activations2_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_activations2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_76": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_79": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_81": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "fid_run_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(activations)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inception_score_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_162": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.inception_images_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_165": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(self.inception_images_pl, [size, size])",
                            "Call"
                        ],
                        [
                            "(images - self.image_min) / (self.image_max - self.image_min)",
                            "BinOp"
                        ],
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "self.model.sample_from(latents)",
                            "Call"
                        ],
                        [
                            "self.transform_image(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_167": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, self.inception_url, self.inception_frozen_graph, os.path.basename(self.inception_url)), output_tensor='logits:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "inception_score_run_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_89": {
                "value": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='fid_run_classifier')",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_181": {
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, self.inception_url, self.inception_frozen_graph, os.path.basename(self.inception_url)), output_tensor='logits:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='inception_score_run_classifier')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_84": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ],
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_176": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ],
                        [
                            "array_ops.split(images, num_or_size_splits=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "same_gamma-CNN/gan/network.py": {
        "tensorflow": {
            "Saver_36": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.all_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.all_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_15": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_21": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self.scale_initial)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.scale_trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "layer0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "layer4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "layer0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "layer4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "layer5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "layer6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "layer7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_64": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.mg, self.mg, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_77": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_88": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_99": {
                "features": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_110": {
                "x": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_130": {
                "value": {
                    "value": "self.scale_initial",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "same_gamma-CNN/gan/op.py": {
        "tensorflow": {
            "reshape_10": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(input_.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_16": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_.get_shape().as_list()[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod(input_.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_160": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(w, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "w / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + conv.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_179": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'flatten'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_87": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(w, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "w * scale",
                            "BinOp"
                        ],
                        [
                            "w / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_20": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_39": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [-1, np.prod(input_.get_shape().as_list()[1:])])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('matrix', [input_.get_shape().as_list()[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_normed_weight(matrix, update_collection=sn_op, with_sigma=True)",
                            "Call"
                        ],
                        [
                            "matrix * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_106": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), output_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "biases * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bias_add_167": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), [-1] + conv.get_shape().as_list()[1:])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "biases * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_32": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_84": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_104": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_124": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_153": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "SN1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "SN2",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "same_gamma-CNN/gan/sn.py": {
        "tensorflow": {
            "reshape_21": {
                "variable": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(W, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_19": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(W, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_38": {
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('u', [1, W_shape[-1]], initializer=tf.truncated_normal_initializer(), trainable=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(W_reshaped)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "v_ip1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_l2normalize(tf.matmul(u, tf.transpose(W_reshaped)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "variable": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "W_reshaped / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W_bar, W_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(W_bar, [0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "a": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_47": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ip1",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_50": {
                "control_inputs": {
                    "value": "[u.assign(u_final)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "v_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_ip1",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W, [-1, W_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_64": {
                "name": {
                    "value": "update_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "u.assign(u_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_13": {
                "input_tensor": {
                    "value": "v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_47": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_ip1",
                            "variable"
                        ]
                    ]
                }
            },
            "transpose_55": {
                "a": {
                    "value": "u_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_ip1",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "same_gamma-CNN/gan_task.py": {
        "tensorflow": {
            "ConfigProto_46": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_47": {
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}