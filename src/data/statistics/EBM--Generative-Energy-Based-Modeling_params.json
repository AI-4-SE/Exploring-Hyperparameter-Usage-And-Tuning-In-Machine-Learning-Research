{
    "ebm/config.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ebm/models.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.cnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 6, kernel_size=5, stride=1, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.cnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, c_hid1, kernel_size=5, stride=2, padding=4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "interChannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "interChannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOutChannels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(nChannels * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(nChannels * reduction))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_151": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x1)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.dense3(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(out), 7))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gamma",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ],
                        [
                            "nOutChannels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nClasses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_237": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.avg_pool2d(F.relu(out), 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_17": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_221": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_22": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SiLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_34": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SiLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "5 * 5 * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SiLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_hid1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "c_hid1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_hid2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_features",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "c_hid2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_hid3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "c_hid3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_hid3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "c_hid3 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c_hid3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "c_hid3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_124": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_125": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x1)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.dense3(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(out), 7))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_138": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_150": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_237": {
                "input": {
                    "value": "F.relu(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_251": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x1)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.dense3(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(out), 7))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_237": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x1)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.dense3(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(out), 7))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_160": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ebm/train.py": {
        "torch": {
            "SummaryWriter_152": {
                "variable": {
                    "value": "self.tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_168": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.cnn.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "inp_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_imgs, fake_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_331": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.randn((batch_size,) + self.img_shape, device=self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_572": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size,) + self.img_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_578": {
                "variable": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.randn((batch_size,) + self.img_shape, device=self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_582": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.randn((batch_size,) + self.img_shape, device=self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_415": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - original_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_415": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_415": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_427": {
                "obj": {
                    "value": "self.cnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.ckpt_path + '/model_state_dict.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_668": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - original_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_668": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_668": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_64": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_79": {
                "*size": {
                    "value": "(10000,) + img_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.ckpt_path, 'model_state_dict.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.reload_model, 'model_state_dict.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_337": {
                "input": {
                    "value": "in_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_357": {
                "outputs": {
                    "value": "out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.randn((batch_size,) + self.img_shape, device=self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_588": {
                "input": {
                    "value": "in_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_588": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_588": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_609": {
                "outputs": {
                    "value": "out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.randn((batch_size,) + self.img_shape, device=self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_137": {
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.ckpt_path, 'model_state_dict.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.reload_model, 'model_state_dict.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_312": {
                "n": {
                    "value": "self.mcmc_persistent_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_223": {
                "input": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_228": {
                "input": {
                    "value": "m.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_320": {
                "*size": {
                    "value": "(batch_size,) + self.img_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_318": {
                "*size": {
                    "value": "(batch_size,) + self.img_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "toy_examples/ebm_toy/config.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "toy_examples/ebm_toy/models.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.cnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, n_f, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_17": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "leak",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "n_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_32": {
                "negative_slope": {
                    "value": "leak",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_34": {
                "negative_slope": {
                    "value": "leak",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_36": {
                "negative_slope": {
                    "value": "leak",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "n_f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "toy_examples/ebm_toy/train.py": {
        "torch": {
            "SummaryWriter_147": {
                "variable": {
                    "value": "self.tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_189": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "inp_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_imgs, fake_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_353": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_355": {
                "variable": {
                    "value": "r_s_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_624": {
                "variable": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_629": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_631": {
                "variable": {
                    "value": "r_s_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_442": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - original_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_442": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_442": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_459": {
                "obj": {
                    "value": "self.cnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.ckpt_path + '/model_state_dict.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_721": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - original_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_721": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_721": {
                "variable": {
                    "value": "e2e_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_62": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_78": {
                "*size": {
                    "value": "[10000, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_134": {
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.ckpt_path, 'model_state_dict.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_360": {
                "input": {
                    "value": "in_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_381": {
                "outputs": {
                    "value": "out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_636": {
                "input": {
                    "value": "in_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_658": {
                "outputs": {
                    "value": "out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x - self.mcmc_step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "torch.autograd.Variable(x.clone(), requires_grad=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "x + self.mcmc_step_size * self.mass * momentum",
                            "BinOp"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_245": {
                "input": {
                    "value": "layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_248": {
                "input": {
                    "value": "layer.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_332": {
                "n": {
                    "value": "self.mcmc_persistent_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_605": {
                "n": {
                    "value": "self.mcmc_persistent_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_341": {
                "*size": {
                    "value": "[batch_size, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_614": {
                "*size": {
                    "value": "[batch_size, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_338": {
                "*size": {
                    "value": "[batch_size, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_611": {
                "*size": {
                    "value": "[batch_size, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "toy_examples/ebm_toy/utils.py": {
        "torch": {
            "Tensor_189": {
                "variable": {
                    "value": "xy_plot_torch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_23": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xy_plot_torch, y_vals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_257": {
                "variable": {
                    "value": "xy_plot_torch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_53": {
                "input": {
                    "value": "t.sum(en_diffs[t_init:t_end] * en_diffs[t_init:t_end]) / (t_gap - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "std_55": {
                "input": {
                    "value": "grad_mags[t_init:t_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xy_plot_torch, y_vals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_55": {
                "input": {
                    "value": "grad_mags[t_init:t_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_193": {
                "input": {
                    "value": "xy_plot_torch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "t.Tensor(self.xy_plot).view(-1, 1, 1, 1).to(next(f.parameters()).device)",
                            "Call"
                        ],
                        [
                            "t.Tensor(self.xy_plot).view(-1, 1, 1, 1).to(next(f.parameters()).device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_53": {
                "input": {
                    "value": "en_diffs[t_init:t_end] * en_diffs[t_init:t_end]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_261": {
                "input": {
                    "value": "xy_plot_torch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "t.Tensor(self.xy_plot).view(-1, 1, 1, 1).to(next(f.parameters()).device)",
                            "Call"
                        ],
                        [
                            "t.Tensor(self.xy_plot).view(-1, 1, 1, 1).to(next(f.parameters()).device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}