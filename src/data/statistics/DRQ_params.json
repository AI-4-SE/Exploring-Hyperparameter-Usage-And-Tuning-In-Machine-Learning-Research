{
    "TripletLoss.py": {
        "sklearn": {},
        "tensorflow": {
            "maximum_38": {
                "variable": {
                    "value": "pairwise_distances_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.add(math_ops.reduce_sum(math_ops.square(feature), axis=[1], keepdims=True), math_ops.reduce_sum(math_ops.square(array_ops.transpose(feature)), axis=[0], keepdims=True)) - 2.0 * math_ops.matmul(feature, array_ops.transpose(feature))",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(pairwise_distances_squared, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_equal_40": {
                "variable": {
                    "value": "error_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.add(math_ops.reduce_sum(math_ops.square(feature), axis=[1], keepdims=True), math_ops.reduce_sum(math_ops.square(array_ops.transpose(feature)), axis=[0], keepdims=True)) - 2.0 * math_ops.matmul(feature, array_ops.transpose(feature))",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(pairwise_distances_squared, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_50": {
                "variable": {
                    "value": "pairwise_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distances_squared",
                            "variable"
                        ],
                        [
                            "math_ops.sqrt(pairwise_distances_squared + math_ops.to_float(error_mask) * 1e-16)",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, math_ops.to_float(math_ops.logical_not(error_mask)))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, mask_offdiagonals)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "math_ops.to_float(math_ops.logical_not(error_mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_57": {
                "variable": {
                    "value": "pairwise_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distances_squared",
                            "variable"
                        ],
                        [
                            "math_ops.sqrt(pairwise_distances_squared + math_ops.to_float(error_mask) * 1e-16)",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, math_ops.to_float(math_ops.logical_not(error_mask)))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, mask_offdiagonals)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_offdiagonals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.ones_like(pairwise_distances) - array_ops.diag(array_ops.ones([num_data]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l2_normalize_62": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature",
                            "Method Argument"
                        ],
                        [
                            "feature",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.l2_normalize(feature, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.l2_normalize(feature, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_94": {
                "variable": {
                    "value": "axis_minimums",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_111": {
                "variable": {
                    "value": "axis_maximums",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logical_not_142": {
                "variable": {
                    "value": "adjacency_not",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adjacency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_multilabel_adjacency(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_147": {
                "variable": {
                    "value": "pdist_matrix_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdist_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_cosine_distance(embeddings) if use_cos else pairwise_distance(embeddings, squared=True)",
                            "IfExp"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_148": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.tile(adjacency_not, [batch_size, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "mask_final",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "math_ops.greater(math_ops.reduce_sum(math_ops.cast(mask, dtype=dtypes.float32), 1, keepdims=True), 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "variable": {
                    "value": "mask_final",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(math_ops.greater(math_ops.reduce_sum(math_ops.cast(mask, dtype=dtypes.float32), 1, keepdims=True), 0.0), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(mask_final)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_160": {
                "variable": {
                    "value": "adjacency_not",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adjacency_not",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_not(adjacency)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(adjacency_not, dtype=dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_161": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_and(array_ops.tile(adjacency_not, [batch_size, 1]), math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "math_ops.cast(mask, dtype=dtypes.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "negatives_outside",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_minimum(pdist_matrix_tile, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "negatives_outside",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "negatives_outside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(masked_minimum(pdist_matrix_tile, mask), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(negatives_outside)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_169": {
                "variable": {
                    "value": "negatives_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_maximum(pdist_matrix, adjacency_not)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_171": {
                "variable": {
                    "value": "semi_hard_negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(math_ops.greater(math_ops.reduce_sum(math_ops.cast(mask, dtype=dtypes.float32), 1, keepdims=True), 0.0), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(mask_final)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "negatives_outside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(masked_minimum(pdist_matrix_tile, mask), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(negatives_outside)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "negatives_inside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.tile(masked_maximum(pdist_matrix, adjacency_not), [1, batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_174": {
                "variable": {
                    "value": "loss_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "pdist_matrix - semi_hard_negatives",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_182": {
                "variable": {
                    "value": "num_positives",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(adjacency, dtype=dtypes.float32) - array_ops.diag(array_ops.ones([batch_size]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "truediv_184": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.reduce_sum(math_ops.maximum(math_ops.multiply(loss_mat, mask_positives), 0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "num_positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(mask_positives)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "triplet_semihard_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "variable": {
                    "value": "pairwise_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances_squared + math_ops.to_float(error_mask) * 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_82": {
                "x": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels @ array_ops.transpose(labels)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_29": {
                "x": {
                    "value": "math_ops.reduce_sum(math_ops.square(feature), axis=[1], keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.reduce_sum(math_ops.square(array_ops.transpose(feature)), axis=[0], keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_51": {
                "x": {
                    "value": "math_ops.logical_not(error_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature",
                            "Method Argument"
                        ],
                        [
                            "feature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_55": {
                "input": {
                    "value": "pairwise_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distances_squared",
                            "variable"
                        ],
                        [
                            "math_ops.sqrt(pairwise_distances_squared + math_ops.to_float(error_mask) * 1e-16)",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, math_ops.to_float(math_ops.logical_not(error_mask)))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, mask_offdiagonals)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_55": {
                "diagonal": {
                    "value": "array_ops.ones([num_data])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "a": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_95": {
                "input_tensor": {
                    "value": "math_ops.multiply(data - axis_minimums, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_112": {
                "input_tensor": {
                    "value": "math_ops.multiply(data - axis_maximums, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_149": {
                "input": {
                    "value": "adjacency_not",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_not(adjacency)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(adjacency_not, dtype=dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_150": {
                "x": {
                    "value": "pdist_matrix_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.tile(pdist_matrix, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_154": {
                "x": {
                    "value": "math_ops.reduce_sum(math_ops.cast(mask, dtype=dtypes.float32), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_176": {
                "x": {
                    "value": "adjacency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_multilabel_adjacency(labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_177": {
                "diagonal": {
                    "value": "array_ops.ones([batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "input_tensor": {
                    "value": "math_ops.maximum(math_ops.multiply(loss_mat, mask_positives), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "math_ops.square(feature)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "math_ops.square(array_ops.transpose(feature))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "a": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature",
                            "Method Argument"
                        ],
                        [
                            "feature",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "array_ops.transpose(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_51": {
                "x": {
                    "value": "error_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.less_equal(pairwise_distances_squared, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_56": {
                "shape": {
                    "value": "[num_data]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_96": {
                "x": {
                    "value": "data - axis_minimums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_and(array_ops.tile(adjacency_not, [batch_size, 1]), math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "math_ops.cast(mask, dtype=dtypes.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_113": {
                "x": {
                    "value": "data - axis_maximums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_and(array_ops.tile(adjacency_not, [batch_size, 1]), math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "math_ops.cast(mask, dtype=dtypes.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_151": {
                "tensor": {
                    "value": "array_ops.transpose(pdist_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "input_tensor": {
                    "value": "math_ops.cast(mask, dtype=dtypes.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_178": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_186": {
                "x": {
                    "value": "math_ops.multiply(loss_mat, mask_positives)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_30": {
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature",
                            "Method Argument"
                        ],
                        [
                            "feature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_32": {
                "x": {
                    "value": "array_ops.transpose(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_35": {
                "a": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature",
                            "Method Argument"
                        ],
                        [
                            "feature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_152": {
                "a": {
                    "value": "pdist_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_cosine_distance(embeddings) if use_cos else pairwise_distance(embeddings, squared=True)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cast_156": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_and(array_ops.tile(adjacency_not, [batch_size, 1]), math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "math_ops.cast(mask, dtype=dtypes.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_187": {
                "x": {
                    "value": "loss_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.add(margin, pdist_matrix - semi_hard_negatives)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(adjacency, dtype=dtypes.float32) - array_ops.diag(array_ops.ones([batch_size]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_32": {
                "a": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature",
                            "Method Argument"
                        ],
                        [
                            "feature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_47": {
                "x": {
                    "value": "error_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.less_equal(pairwise_distances_squared, 0.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tSNE.py": {
        "sklearn": {},
        "tensorflow": {
            "set_verbosity_19": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NUS",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The preferred dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "Mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "train or evaluate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "BitLength",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The quantization code length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "ClassNum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The classification class number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "K",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The centroids number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "PrintEvery",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many batches after one print",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_32": {
                "name": {
                    "value": "LearningRate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Init learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "Epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many epoches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "BatchSize",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "Device",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Device ID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "R",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Recall@R, -1 for all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_39": {
                "name": {
                    "value": "Lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_40": {
                "name": {
                    "value": "Tau",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "tau",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_41": {
                "name": {
                    "value": "Mu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_42": {
                "name": {
                    "value": "Nu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Nu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_52": {
                "device_name": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/device:GPU:0' if FLAGS.UseGPU else '/cpu:0'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "Accuracy.py": {
        "tensorflow": {
            "set_verbosity_17": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NUS",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The preferred dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "Mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "eval",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "train or evaluate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "BitLength",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The quantization code length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "ClassNum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The classification class number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "K",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The centroids number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "PrintEvery",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many batches after one print",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_29": {
                "name": {
                    "value": "LearningRate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Init learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "Epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many epoches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "BatchSize",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "Device",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Device ID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "R",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Recall@R, -1 for all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_44": {
                "device_name": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/device:GPU:0' if FLAGS.UseGPU else '/cpu:0'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "DSQ.py": {
        "tensorflow": {
            "set_verbosity_16": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_83": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_103": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._initLR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self._embeddingStep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exponential_decay_105": {
                "variable": {
                    "value": "codebook1lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self._codebook1Step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exponential_decay_107": {
                "variable": {
                    "value": "codebook2lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self._codebook2Step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_113": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self._initLR, global_step=self._embeddingStep, decay_steps=10000, decay_rate=0.9)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_173": {
                "variable": {
                    "value": "self.TrainCodebook_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "codebook1lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(0.0001, global_step=self._codebook1Step, decay_steps=10000, decay_rate=0.9)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_180": {
                "variable": {
                    "value": "self.TrainCodebook_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "codebook2lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(0.0001, global_step=self._codebook2Step, decay_steps=10000, decay_rate=0.9)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_187": {
                "variable": {
                    "value": "self.Input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batchSize, IMAGE_HEIGHT, IMAGE_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_188": {
                "variable": {
                    "value": "self.LabelHot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batchSize, self._classNum]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_190": {
                "variable": {
                    "value": "self._embeddingStep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "EmbeddingStep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_191": {
                "variable": {
                    "value": "self._codebook1Step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Codebook1Step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_192": {
                "variable": {
                    "value": "self._codebook2Step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Codebook2Step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_211": {
                "variable": {
                    "value": "self._summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_217": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'/tmp/' + self._name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_202": {
                "name": {
                    "value": "Soft Distortion",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.NetPQ.SoftDistortion",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_203": {
                "name": {
                    "value": "Hard Distortion",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.NetPQ.HardDistortion",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_204": {
                "name": {
                    "value": "JCL",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.NetPQ.JointCenter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_205": {
                "name": {
                    "value": "Clustering (semantic)",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.NetPQ.Clustering",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_206": {
                "name": {
                    "value": "Distinction (cross entropy)",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.NetPQ.Distinction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_207": {
                "name": {
                    "value": "Codebook",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.NetPQ.Codebook",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_229": {
                "config": {
                    "value": "self._config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_233": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_359": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_441": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_507": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_524": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_571": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_647": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_686": {
                "config": {
                    "value": "self._config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_357": {
                "config": {
                    "value": "self._config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_439": {
                "config": {
                    "value": "self._config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_505": {
                "config": {
                    "value": "self._config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_522": {
                "config": {
                    "value": "self._config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_569": {
                "config": {
                    "value": "self._config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_645": {
                "config": {
                    "value": "self._config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_262": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.NetPQ.Margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initMargin",
                            "Attribute"
                        ],
                        [
                            "margin * self._factor",
                            "BinOp"
                        ],
                        [
                            "self._targetMargin",
                            "Attribute"
                        ],
                        [
                            "self._targetMargin",
                            "Attribute"
                        ],
                        [
                            "self._targetMargin",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_301": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.NetPQ.Margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initMargin",
                            "Attribute"
                        ],
                        [
                            "margin * self._factor",
                            "BinOp"
                        ],
                        [
                            "self._targetMargin",
                            "Attribute"
                        ],
                        [
                            "self._targetMargin",
                            "Attribute"
                        ],
                        [
                            "self._targetMargin",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_336": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.NetPQ.Margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initMargin",
                            "Attribute"
                        ],
                        [
                            "margin * self._factor",
                            "BinOp"
                        ],
                        [
                            "self._targetMargin",
                            "Attribute"
                        ],
                        [
                            "self._targetMargin",
                            "Attribute"
                        ],
                        [
                            "self._targetMargin",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Encoder_Alex.py": {
        "tensorflow": {}
    },
    "Encoder_VGG.py": {
        "tensorflow": {
            "conv2d_22": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.random_crop(tf.image.random_flip_left_right(each_image), [224, 224, 3]) for each_image in tf.unstack(inp)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_65": {
                "variable": {
                    "value": "(red, green, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.random_crop(tf.image.random_flip_left_right(each_image), [224, 224, 3]) for each_image in tf.unstack(inp)])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_69": {
                "variable": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[blue - VGG_MEAN[0], green - VGG_MEAN[1], red - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "local_response_normalization_82": {
                "variable": {
                    "value": "self.lrn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2e-05",
                            "float"
                        ]
                    ]
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.75",
                            "float"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "local_response_normalization_91": {
                "variable": {
                    "value": "self.lrn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2e-05",
                            "float"
                        ]
                    ]
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.75",
                            "float"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_256": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_366": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=self.cls, labels=label) if self._multiLabel == False else tf.nn.sigmoid_cross_entropy_with_logits(logits=self.cls, labels=label)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "reduce_mean_373": {
                "variable": {
                    "value": "self.JointCenter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.QSoft - self.QHard)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "fc8w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([4096, 300], dtype=tf.float32, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_126": {
                "variable": {
                    "value": "fc8b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[300], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_128": {
                "variable": {
                    "value": "self.fc8l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(self.relu7, fc8w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc8b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[300], dtype=tf.float32), name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_129": {
                "variable": {
                    "value": "self.fc8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.fc8l",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "clsw",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([4096, self.n_class], dtype=tf.float32, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_137": {
                "variable": {
                    "value": "clsb",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[self.n_class], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_139": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(self.relu7, clsw)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "clsb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[self.n_class], dtype=tf.float32), name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_145": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_148": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_conv_filter(name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_156": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME', name=name)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_158": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_177": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_184": {
                "initial_value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_filter'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_187": {
                "initial_value": {
                    "value": "self.data_dict[name][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_biases'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_190": {
                "initial_value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_weights'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_205": {
                "variable": {
                    "value": "self.Codebook",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Codebook",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._stackLevel, self._subCenters, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "self.QSoft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "self.QHard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_212": {
                "variable": {
                    "value": "self.SoftDistortion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "soft_distortion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_213": {
                "variable": {
                    "value": "self.HardDistortion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "hard_distortion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_261": {
                "variable": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_264": {
                "variable": {
                    "value": "margin_param",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_271": {
                "variable": {
                    "value": "v_label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(label, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(word_dict, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "variable": {
                    "value": "ip_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.expand_dims(self.X, 1), v_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_280": {
                "variable": {
                    "value": "v_label_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.ones([self.batch_size, self.n_class]), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(word_dict, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_281": {
                "variable": {
                    "value": "mod_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.expand_dims(tf.reduce_sum(tf.square(self.X), 1), 1), tf.reduce_sum(tf.square(v_label_mod), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_286": {
                "variable": {
                    "value": "cos_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ip_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(tf.expand_dims(self.X, 1), v_label), 2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(tf.expand_dims(self.X, 1), v_label), 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mod_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.multiply(tf.expand_dims(tf.reduce_sum(tf.square(self.X), 1), 1), tf.reduce_sum(tf.square(v_label_mod), 2)))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.multiply(tf.expand_dims(tf.reduce_sum(tf.square(self.X), 1), 1), tf.reduce_sum(tf.square(v_label_mod), 2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_289": {
                "variable": {
                    "value": "ip_2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_298": {
                "variable": {
                    "value": "mod_2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_300": {
                "variable": {
                    "value": "mod_2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(mod_2_2, tf.constant(1e-07))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones([self.batch_size, self.n_class])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mod_2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_302": {
                "variable": {
                    "value": "cos_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ip_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.X, word_dict, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.X, word_dict, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mod_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.less(mod_2_2, tf.constant(1e-07)), tf.ones([self.batch_size, self.n_class]), mod_2_2)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(mod_2_2, tf.constant(1e-07)), tf.ones([self.batch_size, self.n_class]), mod_2_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_306": {
                "x": {
                    "value": "tf.expand_dims(cos_1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(cos_2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_309": {
                "variable": {
                    "value": "cos_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_cos_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(margin_param, tf.subtract(tf.expand_dims(cos_1, 2), tf.expand_dims(cos_2, 1)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.expand_dims(margin_param, 0), tf.subtract(tf.expand_dims(cos_1, 2), tf.expand_dims(cos_2, 1)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(label, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_311": {
                "variable": {
                    "value": "cos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(tf.constant(0, dtype=tf.float32), cos_cos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_313": {
                "variable": {
                    "value": "self.cos_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.maximum(tf.constant(0, dtype=tf.float32), cos_cos))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.maximum(tf.constant(0, dtype=tf.float32), cos_cos))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(tf.constant(self.n_class, dtype=tf.float32), tf.reduce_sum(label))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_114": {
                "x": {
                    "value": "tf.nn.relu(self.fc6)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_114": {
                "features": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_117": {
                "x": {
                    "value": "tf.nn.relu(self.fc7)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_117": {
                "features": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_122": {
                "name": {
                    "value": "fc8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_133": {
                "name": {
                    "value": "cls",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_151": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_165": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Quantization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_216": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Codebook",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "level in range(self._stackLevel)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_218": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "residual - hard",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(codes, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_220": {
                "variable": {
                    "value": "Cm_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(codes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_222": {
                "variable": {
                    "value": "Xm_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(residual)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_225": {
                "variable": {
                    "value": "(meshX, meshY)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "Cm_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(codes), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "Xm_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(residual), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_228": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(meshX, meshY)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_233": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.softmax(distance)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.Codebook, level)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_234": {
                "variable": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(residual, tf.transpose(codes, [1, 0]))",
                            "Call"
                        ],
                        [
                            "distance / mod",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_236": {
                "variable": {
                    "value": "hard",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.Codebook, level)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(distance, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_244": {
                "input_tensor": {
                    "value": "tf.square(self.X - self.QSoft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_246": {
                "input_tensor": {
                    "value": "tf.square(self.X - self.QHard)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_316": {
                "variable": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_323": {
                "variable": {
                    "value": "v_label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(label, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(word_dict, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_326": {
                "variable": {
                    "value": "ip_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.expand_dims(self.X, 1), v_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_328": {
                "variable": {
                    "value": "v_label_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.ones([self.batch_size, self.n_class]), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(word_dict, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_329": {
                "variable": {
                    "value": "mod_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.expand_dims(tf.reduce_sum(tf.square(self.X), 1), 1), tf.reduce_sum(tf.square(v_label_mod), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_333": {
                "variable": {
                    "value": "cos_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ip_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(tf.expand_dims(self.X, 1), v_label), 2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(tf.expand_dims(self.X, 1), v_label), 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mod_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.multiply(tf.expand_dims(tf.reduce_sum(tf.square(self.X), 1), 1), tf.reduce_sum(tf.square(v_label_mod), 2)))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.multiply(tf.expand_dims(tf.reduce_sum(tf.square(self.X), 1), 1), tf.reduce_sum(tf.square(v_label_mod), 2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_335": {
                "variable": {
                    "value": "ip_2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_343": {
                "variable": {
                    "value": "mod_2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_344": {
                "variable": {
                    "value": "mod_2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(mod_2_2, tf.constant(1e-07))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones([self.batch_size, self.n_class])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mod_2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_346": {
                "variable": {
                    "value": "cos_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ip_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.X, word_dict, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.X, word_dict, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mod_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.less(mod_2_2, tf.constant(1e-07)), tf.ones([self.batch_size, self.n_class]), mod_2_2)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(mod_2_2, tf.constant(1e-07)), tf.ones([self.batch_size, self.n_class]), mod_2_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_351": {
                "variable": {
                    "value": "ip_3",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_353": {
                "variable": {
                    "value": "mod_3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(reduce_shaper(tf.square(word_dict)), reduce_shaper(tf.square(word_dict)), transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_359": {
                "x": {
                    "value": "tf.expand_dims(cos_1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(cos_2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_361": {
                "variable": {
                    "value": "cos_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_cos_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(margin_param, tf.subtract(tf.expand_dims(cos_1, 2), tf.expand_dims(cos_2, 1)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.expand_dims(margin_param, 0), tf.subtract(tf.expand_dims(cos_1, 2), tf.expand_dims(cos_2, 1)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(label, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_363": {
                "variable": {
                    "value": "cos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(tf.constant(0, dtype=tf.float32), cos_cos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_364": {
                "variable": {
                    "value": "self.cos_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.maximum(tf.constant(0, dtype=tf.float32), cos_cos))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.maximum(tf.constant(0, dtype=tf.float32), cos_cos))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(tf.constant(self.n_class, dtype=tf.float32), tf.reduce_sum(label))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_373": {
                "x": {
                    "value": "self.QSoft - self.QHard",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_crop_58": {
                "value": {
                    "value": "tf.image.random_flip_left_right(each_image)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "a": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "fc8w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([4096, 300], dtype=tf.float32, stddev=0.01), name='weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_137": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_class]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "a": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "clsw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([4096, self.n_class], dtype=tf.float32, stddev=0.01), name='weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_177": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_fc_weight(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_245": {
                "x": {
                    "value": "self.X - self.QSoft",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_247": {
                "x": {
                    "value": "self.X - self.QHard",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_271": {
                "input": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_276": {
                "x": {
                    "value": "tf.expand_dims(self.X, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "v_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.expand_dims(label, 2), tf.expand_dims(word_dict, 0))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.expand_dims(label, 2), tf.expand_dims(word_dict, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_280": {
                "input": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_281": {
                "x": {
                    "value": "tf.expand_dims(tf.reduce_sum(tf.square(self.X), 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(tf.square(v_label_mod), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_295": {
                "tensor": {
                    "value": "tf.reduce_sum(t, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(t)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_298": {
                "a": {
                    "value": "reduce_shaper(tf.square(self.X))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "reduce_shaper(tf.square(word_dict))",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "less_300": {
                "x": {
                    "value": "mod_2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_300": {
                "shape": {
                    "value": "[self.batch_size, self.n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_309": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_311": {
                "x": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(cos_cos_1, tf.expand_dims(label, 2))",
                            "Call"
                        ],
                        [
                            "tf.multiply(cos_cos_1, tf.expand_dims(label, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_313": {
                "x": {
                    "value": "tf.constant(self.n_class, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_366": {
                "logits": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_367": {
                "logits": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_58": {
                "image": {
                    "value": "each_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_58": {
                "value": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_218": {
                "a": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.Codebook, level)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_220": {
                "x": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.Codebook, level)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_222": {
                "x": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "residual - hard",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_228": {
                "x": {
                    "value": "meshX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(Cm_square, Xm_square)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "meshY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(Cm_square, Xm_square)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_233": {
                "logits": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(residual, tf.transpose(codes, [1, 0]))",
                            "Call"
                        ],
                        [
                            "distance / mod",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_276": {
                "input": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_280": {
                "shape": {
                    "value": "[self.batch_size, self.n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_281": {
                "input": {
                    "value": "tf.reduce_sum(tf.square(self.X), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_281": {
                "input_tensor": {
                    "value": "tf.square(self.X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_295": {
                "input_tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_300": {
                "value": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_306": {
                "input": {
                    "value": "cos_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(ip_2, mod_2)",
                            "Call"
                        ],
                        [
                            "tf.div(ip_2, mod_2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_311": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_313": {
                "value": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_313": {
                "input_tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_323": {
                "input": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_326": {
                "x": {
                    "value": "tf.expand_dims(self.X, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "v_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.expand_dims(label, 2), tf.expand_dims(word_dict, 0))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.expand_dims(label, 2), tf.expand_dims(word_dict, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_328": {
                "input": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_329": {
                "x": {
                    "value": "tf.expand_dims(tf.reduce_sum(tf.square(self.X), 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(tf.square(v_label_mod), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "tensor": {
                    "value": "tf.reduce_sum(t, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(t)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_343": {
                "a": {
                    "value": "reduce_shaper(tf.square(self.X))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "reduce_shaper(tf.square(word_dict))",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "less_344": {
                "x": {
                    "value": "mod_2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.matmul(reduce_shaper(tf.square(self.X)), reduce_shaper(tf.square(word_dict)), transpose_b=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_344": {
                "shape": {
                    "value": "[self.batch_size, self.n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_353": {
                "a": {
                    "value": "reduce_shaper(tf.square(word_dict))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "reduce_shaper(tf.square(word_dict))",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_359": {
                "input": {
                    "value": "cos_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(ip_2, mod_2)",
                            "Call"
                        ],
                        [
                            "tf.div(ip_2, mod_2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_361": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_363": {
                "x": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(cos_cos_1, tf.expand_dims(label, 2))",
                            "Call"
                        ],
                        [
                            "tf.multiply(cos_cos_1, tf.expand_dims(label, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_364": {
                "x": {
                    "value": "tf.constant(self.n_class, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_281": {
                "x": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_298": {
                "x": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_326": {
                "input": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_328": {
                "shape": {
                    "value": "[self.batch_size, self.n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_329": {
                "input": {
                    "value": "tf.reduce_sum(tf.square(self.X), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_329": {
                "input_tensor": {
                    "value": "tf.square(self.X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_341": {
                "input_tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_344": {
                "value": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_363": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_364": {
                "value": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_364": {
                "input_tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_295": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_329": {
                "x": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_343": {
                "x": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_353": {
                "x": {
                    "value": "word_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(np.loadtxt(NUS_WORD_DICT if self.n_class > 10 else CIFAR_WORD_DICT), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_341": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Eval.py": {
        "tensorflow": {
            "set_verbosity_18": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NUS",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The preferred dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "Mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "eval",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "train or evaluate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "BitLength",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The quantization code length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "ClassNum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The classification class number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "K",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The centroids number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "PrintEvery",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many batches after one print",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_30": {
                "name": {
                    "value": "LearningRate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Init learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "Epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many epoches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "BatchSize",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "Device",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Device ID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "R",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Recall@R, -1 for all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_37": {
                "name": {
                    "value": "Lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_38": {
                "name": {
                    "value": "Tau",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "tau",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_39": {
                "name": {
                    "value": "Mu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_40": {
                "name": {
                    "value": "Nu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Nu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/device:GPU:0' if FLAGS.UseGPU else '/cpu:0'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "Operation.py": {
        "tensorflow": {
            "get_variable_68": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_105": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_119": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_36": {
                "values": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Method Argument"
                        ],
                        [
                            "tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ],
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_87": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_73": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_96": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_61": {
                "shape": {
                    "value": "[x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_69": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_72": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_84": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_95": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_114": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_120": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_122": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PRCurve.py": {
        "tensorflow": {
            "set_verbosity_17": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NUS",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The preferred dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "Mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "train or evaluate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "BitLength",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The quantization code length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "ClassNum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The classification class number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "K",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The centroids number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "PrintEvery",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many batches after one print",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_29": {
                "name": {
                    "value": "LearningRate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Init learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "Epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many epoches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "BatchSize",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "Device",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Device ID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "R",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Recall@R, -1 for all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "Lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_37": {
                "name": {
                    "value": "Tau",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "tau",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_38": {
                "name": {
                    "value": "Mu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_39": {
                "name": {
                    "value": "Nu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Nu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_48": {
                "device_name": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/device:GPU:0' if FLAGS.UseGPU else '/cpu:0'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "Time.py": {
        "tensorflow": {
            "set_verbosity_37": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NUS",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The preferred dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_43": {
                "name": {
                    "value": "Mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "eval",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "train or evaluate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "BitLength",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The quantization code length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "ClassNum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The classification class number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "K",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The centroids number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "PrintEvery",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many batches after one print",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_49": {
                "name": {
                    "value": "LearningRate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Init learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "Epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many epoches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "BatchSize",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_52": {
                "name": {
                    "value": "Device",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Device ID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "R",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Recall@R, -1 for all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_64": {
                "device_name": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/device:GPU:0' if FLAGS.UseGPU else '/cpu:0'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "set_verbosity_16": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_21": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NUS",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The preferred dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "Mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "train or evaluate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "BitLength",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The quantization code length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "ClassNum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The classification class number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "K",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The centroids number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "PrintEvery",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many batches after one print",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_28": {
                "name": {
                    "value": "LearningRate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Init learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "Epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many epoches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "BatchSize",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "Device",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Device ID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "R",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Recall@R, -1 for all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_35": {
                "name": {
                    "value": "Lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "Tau",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "tau",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_37": {
                "name": {
                    "value": "Mu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_38": {
                "name": {
                    "value": "Nu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Nu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_47": {
                "device_name": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/device:GPU:0' if FLAGS.UseGPU else '/cpu:0'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    }
}