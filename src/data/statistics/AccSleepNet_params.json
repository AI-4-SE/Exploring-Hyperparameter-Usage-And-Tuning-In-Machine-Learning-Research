{
    "deepsleep/trainer.py": {
        "sklearn": {
            "confusion_matrix_346": {
                "variable": {
                    "value": "train_cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "f1_score_348": {
                "variable": {
                    "value": "train_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_366": {
                "variable": {
                    "value": "valid_cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "f1_score_368": {
                "variable": {
                    "value": "valid_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_724": {
                "variable": {
                    "value": "train_cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "f1_score_726": {
                "variable": {
                    "value": "train_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_737": {
                "variable": {
                    "value": "valid_cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "f1_score_739": {
                "variable": {
                    "value": "valid_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "add_n_47": {
                "variable": {
                    "value": "train_reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('losses', scope=network_name + '\\\\/')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_283": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_289": {
                "variable": {
                    "value": "train_summary_wrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(output_dir, 'train_summary')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_648": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_654": {
                "variable": {
                    "value": "train_summary_wrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(output_dir, 'train_summary')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_47": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "network_name + '\\\\/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_270": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Graph_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_625": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_269": {
                "name_or_scope": {
                    "value": "train_net.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_624": {
                "name_or_scope": {
                    "value": "train_net.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_648": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_651": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_423": {
                "ref": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "epoch + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_606": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_683": {
                "variable": {
                    "value": "tmp_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_794": {
                "ref": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "epoch + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_808": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_608": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_733": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_299": {
                "checkpoint_dir": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.output_dir, 'fold{}'.format(self.fold_idx), train_net.name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.output_dir, 'fold{}'.format(self.fold_idx), train_net.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_665": {
                "checkpoint_dir": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.output_dir, 'fold{}'.format(self.fold_idx), train_net.name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.output_dir, 'fold{}'.format(self.fold_idx), train_net.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_685": {
                "ref": {
                    "value": "tmp_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph().get_tensor_by_name(k)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deepsleep/loss.py": {
        "tensorflow": {
            "sparse_softmax_cross_entropy_with_logits_5": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_10": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits, targets, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_19": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.seq2seq.sequence_loss_by_example([logits], [targets], [tf.ones([batch_size * seq_length])])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_18": {
                "shape": {
                    "value": "[batch_size * seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "deepsleep/model.py": {
        "tensorflow": {}
    },
    "deepsleep/nn.py": {
        "tensorflow": {
            "get_variable_9": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_29": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.sqrt(2.0 / fan_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_81": {
                "variable": {
                    "value": "output_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, pool_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool_93": {
                "variable": {
                    "value": "output_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, pool_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "output_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_43": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "output_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variable_with_weight_decay('weights', shape=filter_shape, wd=wd)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "output_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variable_with_weight_decay('weights', shape=[input_dim, n_hiddens], wd=wd)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_132": {
                "x": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha * input_var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_149": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_151": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_153": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(inputs_shape) - 1))",
                            "Call"
                        ],
                        [
                            "list(range(len(inputs_shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_156": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cond_163": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_168": {
                "variable": {
                    "value": "normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "_create_variable(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=params_shape, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', shape=params_shape, initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='gamma', shape=params_shape, initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', shape=params_shape, initializer=tf.random_normal_initializer(mean=1.0, stddev=0.002))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "tf_bn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_191": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=1.0, stddev=0.002)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_199": {
                "variable": {
                    "value": "moving_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_203": {
                "variable": {
                    "value": "moving_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_variance",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_209": {
                "variable": {
                    "value": "(batch_mean, batch_variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(inputs_shape) - 1))",
                            "Call"
                        ],
                        [
                            "list(range(len(inputs_shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_44": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bias_add_75": {
                "variable": {
                    "value": "output_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=input_var, filter=kernel, strides=[1, stride, 1, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output_var, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_var, ksize=[1, pool_size, 1, 1], strides=[1, stride, 1, 1], padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(input_var, ksize=[1, pool_size, 1, 1], strides=[1, stride, 1, 1], padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_var, weights)",
                            "Call"
                        ],
                        [
                            "tf.add(output_var, biases)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_var, shape=[-1, dim], name=name)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_create_variable('biases', [filter_shape[-1]], tf.constant_initializer(bias))",
                            "Call"
                        ],
                        [
                            "_create_variable('biases', [n_hiddens], tf.constant_initializer(bias))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_126": {
                "variable": {
                    "value": "output_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=input_var, filter=kernel, strides=[1, stride, 1, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output_var, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_var, ksize=[1, pool_size, 1, 1], strides=[1, stride, 1, 1], padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(input_var, ksize=[1, pool_size, 1, 1], strides=[1, stride, 1, 1], padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_var, weights)",
                            "Call"
                        ],
                        [
                            "tf.add(output_var, biases)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_var, shape=[-1, dim], name=name)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_create_variable('biases', [filter_shape[-1]], tf.constant_initializer(bias))",
                            "Call"
                        ],
                        [
                            "_create_variable('biases', [n_hiddens], tf.constant_initializer(bias))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_normalization_225": {
                "variable": {
                    "value": "normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=params_shape, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', shape=params_shape, initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='gamma', shape=params_shape, initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', shape=params_shape, initializer=tf.random_normal_initializer(mean=1.0, stddev=0.002))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_228": {
                "variable": {
                    "value": "normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "moving_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_mean', params_shape, initializer=tf.zeros_initializer, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "moving_variance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_variance', params_shape, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=params_shape, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', shape=params_shape, initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='gamma', shape=params_shape, initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', shape=params_shape, initializer=tf.random_normal_initializer(mean=1.0, stddev=0.002))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "l2_loss_43": {
                "t": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "_create_variable(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_73": {
                "value": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_124": {
                "value": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_150": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_152": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "control_dependencies_160": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_196": {
                "mean": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_205": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "control_dependencies_219": {
                "control_inputs": {
                    "value": "[update_moving_mean, update_moving_variance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_161": {
                "input": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_220": {
                "input": {
                    "value": "batch_variance",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "deepsleep/optimize.py": {
        "tensorflow": {
            "AdamOptimizer_5": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta1": {
                    "value": "beta1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "beta2": {
                    "value": "beta2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "Adam",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_19": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(loss, train_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5.0",
                            "MethodArgument"
                        ],
                        [
                            "5.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_22": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta1": {
                    "value": "beta1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "beta2": {
                    "value": "beta2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "Adam",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_45": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(loss, train_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5.0",
                            "MethodArgument"
                        ],
                        [
                            "5.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_70": {
                "variable": {
                    "value": "apply_gradient_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*apply_gradient_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdamOptimizer_53": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "list_lrs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta1": {
                    "value": "beta1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "beta2": {
                    "value": "beta2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "Adam",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_19": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "train_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_45": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "train_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(v)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "DEFINE_string_35": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "E://SleepDatasetpython36//ConvertedDatasets//NclAccGENEA_1s_agg_721_npz//",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to load training data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_39": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "E://SleepDatasetpython36//ConvertedDatasets//NclAccNpz-forPilotRuntest//output",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": " Directory where to save trained models and outputs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "n_folds",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of cross-validation folds.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "fold_idx",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Index of cross-validation fold to train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "pretrain_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs for pretraining DeepFeatureNet.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "finetune_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochsfor fine-tuning DeepSleepNet.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_120": {
                "filename": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'fold{}'.format(FLAGS.fold_idx))",
                            "Call"
                        ]
                    ]
                }
            },
            "MakeDirs_122": {
                "dirname": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'fold{}'.format(FLAGS.fold_idx))",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_121": {
                "dirname": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'fold{}'.format(FLAGS.fold_idx))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}